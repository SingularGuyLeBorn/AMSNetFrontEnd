--- START: config/config.ts ---
// https://umijs.org/config/
import { defineConfig } from '@umijs/max';
import { join } from 'path';
import defaultSettings from './defaultSettings';
import proxy from './proxy';
import routes from './routes';
const { REACT_APP_ENV = 'dev' } = process.env;
export default defineConfig({
  /**
   * @name 开启 hash 模式
   * @description 让 build 之后的产物包含 hash 后缀。通常用于增量发布和避免浏览器加载缓存。
   * @doc https://umijs.org/docs/api/config#hash
   */
  hash: true,
  /**
   * @name 兼容性设置
   * @description 设置 ie11 不一定完美兼容，需要检查自己使用的所有依赖
   * @doc https://umijs.org/docs/api/config#targets
   */
  // targets: {
  //   ie: 11,
  // },
  /**
   * @name 路由的配置，不在路由中引入的文件不会编译
   * @description 只支持 path，component，routes，redirect，wrappers，title 的配置
   * @doc https://umijs.org/docs/guides/routes
   */
  // umi routes: https://umijs.org/docs/routing
  routes,
  /**
   * @name 主题的配置
   * @description 虽然叫主题，但是其实只是 less 的变量设置
   * @doc antd的主题设置 https://ant.design/docs/react/customize-theme-cn
   * @doc umi 的theme 配置 https://umijs.org/docs/api/config#theme
   */
  theme: {
    // 如果不想要 configProvide 动态设置主题需要把这个设置为 default
    // 只有设置为 variable， 才能使用 configProvide 动态设置主色调
    'root-entry-name': 'variable',
  },
  /**
   * @name moment 的国际化配置
   * @description 如果对国际化没有要求，打开之后能减少js的包大小
   * @doc https://umijs.org/docs/api/config#ignoremomentlocale
   */
  ignoreMomentLocale: true,
  /**
   * @name 代理配置
   * @description 可以让你的本地服务器代理到你的服务器上，这样你就可以访问服务器的数据了
   * @see 要注意以下 代理只能在本地开发时使用，build 之后就无法使用了。
   * @doc 代理介绍 https://umijs.org/docs/guides/proxy
   * @doc 代理配置 https://umijs.org/docs/api/config#proxy
   */
  proxy: proxy[REACT_APP_ENV as keyof typeof proxy],
  /**
   * @name 快速热更新配置
   * @description 一个不错的热更新组件，更新时可以保留 state
   */
  fastRefresh: true,
  //============== 以下都是max的插件配置 ===============
  /**
   * @name 数据流插件
   * @@doc https://umijs.org/docs/max/data-flow
   */
  model: {},
  /**
   * 一个全局的初始数据流，可以用它在插件之间共享数据
   * @description 可以用来存放一些全局的数据，比如用户信息，或者一些全局的状态，全局初始状态在整个 Umi 项目的最开始创建。
   * @doc https://umijs.org/docs/max/data-flow#%E5%85%A8%E5%B1%80%E5%88%9D%E5%A7%8B%E7%8A%B6%E6%80%81
   */
  initialState: {},
  /**
   * @name layout 插件
   * @doc https://umijs.org/docs/max/layout-menu
   */
  title: 'AMSNet',
  layout: {
    locale: true,
    ...defaultSettings,
  },
  /**
   * @name moment2dayjs 插件
   * @description 将项目中的 moment 替换为 dayjs
   * @doc https://umijs.org/docs/max/moment2dayjs
   */
  moment2dayjs: {
    preset: 'antd',
    plugins: ['duration'],
  },
  /**
   * @name 国际化插件
   * @doc https://umijs.org/docs/max/i18n
   */ /**
   * @name antd 插件
   * @description 内置了 babel import 插件
   * @doc https://umijs.org/docs/max/antd#antd
   */
  antd: {},
  /**
   * @name 网络请求配置
   * @description 它基于 axios 和 ahooks 的 useRequest 提供了一套统一的网络请求和错误处理方案。
   * @doc https://umijs.org/docs/max/request
   */
  request: {},
  /**
   * @name 权限插件
   * @description 基于 initialState 的权限插件，必须先打开 initialState
   * @doc https://umijs.org/docs/max/access
   */
  access: {},
  /**
   * @name <head> 中额外的 script
   * @description 配置 <head> 中额外的 script
   */
  headScripts: [
    // 解决首次加载时白屏的问题
    {
      src: '/scripts/loading.js',
      async: true,
    },
  ],
  //================ pro 插件配置 =================
  presets: ['umi-presets-pro'],
  /**
   * @name openAPI 插件的配置
   * @description 基于 openapi 的规范生成serve 和mock，能减少很多样板代码
   * @doc https://pro.ant.design/zh-cn/docs/openapi/
   */
  openAPI: [
    {
      requestLibPath: "import { request } from '@umijs/max'",
      schemaPath: 'http://127.0.0.1:8100/api/v2/api-docs',
      projectName: 'backend',
    },
  ],
  mfsu: {
    strategy: 'normal',
  },
  requestRecord: {},
  esbuildMinifyIIFE: true

});

--- END: config/config.ts ---

--- START: config/defaultSettings.ts ---
import { ProLayoutProps } from '@ant-design/pro-components';

/**
 * 默认设置
 */
const Settings: ProLayoutProps & {
  pwa?: boolean;
  logo?: string;
} = {
  navTheme: 'light',
  // 拂晓蓝
  colorPrimary: '#1890ff',
  layout: 'mix',
  contentWidth: 'Fluid',
  fixedHeader: false,
  fixSiderbar: true,
  colorWeak: false,
  title: 'AMSNet',
  pwa: true,
  iconfontUrl: '',
  token: {
    // 参见ts声明，demo 见文档，通过token 修改样式
    //https://procomponents.ant.design/components/layout#%E9%80%9A%E8%BF%87-token-%E4%BF%AE%E6%94%B9%E6%A0%B7%E5%BC%8F
  },
};

export default Settings;

--- END: config/defaultSettings.ts ---

--- START: config/proxy.ts ---
/**
 * @name 代理的配置
 * @see 在生产环境 代理是无法生效的，所以这里没有生产环境的配置
 * -------------------------------
 * The agent cannot take effect in the production environment
 * so there is no configuration of the production environment
 * For details, please see
 * https://pro.ant.design/docs/deploy
 *
 * @doc https://umijs.org/docs/guides/proxy
 */
export default {
  // 如果需要自定义本地开发服务器  请取消注释按需调整
  // dev: {
  //   // localhost:8000/api/** -> https://preview.pro.ant.design/api/**
  //   '/api/': {
  //     // 要代理的地址
  //     target: 'https://preview.pro.ant.design',
  //     // 配置了这个可以从 http 代理到 https
  //     // 依赖 origin 的功能可能需要这个，比如 cookie
  //     changeOrigin: true,
  //   },
  // },

  /**
   * @name 详细的代理配置
   * @doc https://github.com/chimurai/http-proxy-middleware
   */
  test: {
    // localhost:8000/api/** -> https://preview.pro.ant.design/api/**
    '/api/': {
      target: 'https://proapi.azurewebsites.net',
      changeOrigin: true,
      pathRewrite: { '^': '' },
    },
  },
  pre: {
    '/api/': {
      target: 'your pre url',
      changeOrigin: true,
      pathRewrite: { '^': '' },
    },
  },
};

--- END: config/proxy.ts ---

--- START: config/routes.ts ---
export default [
  { path: '/welcome', icon: 'home', component: './Welcome', name: 'AMSNet' },
  {
    path: '/user',
    layout: false,
    routes: [
      { path: '/user/login', component: './User/Login' },
      { path: '/user/register', component: './User/Register' },
    ],
  },
  {
    path: '/fileoperate',
    icon: 'edit',
    component: './FileOperate',
    name: 'Device Labeling',
    access: 'canUser',
  },
  {
    path: '/maskoperate',
    icon: 'edit',
    component: './MaskOperate',
    name: 'Net Labeling',
    access: 'canUser',
  },
  {
    path: '/graphoperate',
    icon: 'edit',
    component: './GraphOperate',
    name: 'Knowledge Graph',
    access: 'canUser',
  },
  // {
  //   path: '/floatwindow',
  //   icon: 'edit',
  //   component: './FloatWindow',
  //   name: 'floatwindow',
  //   access: 'canUser',
  // },
  // {
  //   path: '/fileoperate-test',
  //   icon: 'edit',
  //   component: './FileOperate-Test',
  //   name: 'Device Labeling Test',
  //   access: 'canAdmin',
  // },
  // {
  //   path: '/maskoperate-test',
  //   icon: 'edit',
  //   component: './MaskOperate-Test',
  //   name: 'Net Labeling Test',
  //   access: 'canAdmin',
  // },
  // {
  //   path: '/graphoperate-test',
  //   icon: 'edit',
  //   component: './GraphOperate-Test',
  //   name: 'Knowledge Graph Test',
  //   access: 'canAdmin',
  // },
  // {
  //   path: '/floatwindow-test',
  //   icon: 'edit',
  //   component: './FloatWindowTest',
  //   name: 'floatwindow Test',
  //   access: 'canAdmin',
  // },
  // {
  //   path: '/admin',
  //   icon: 'crown',
  //   name: '管理页',
  //   access: 'canAdmin',
  //   routes: [
  //     { path: '/admin', redirect: '/admin/user' },
  //     { icon: 'table', path: '/admin/user', component: './Admin/User', name: '用户管理' },
  //   ],
  // },
  { path: '/', redirect: '/welcome' },
  { path: '*', layout: false, component: './404' },
];

--- END: config/routes.ts ---

--- START: src/access.ts ---
/**
 * @see https://umijs.org/zh-CN/plugins/plugin-access
 * */
export default function access(initialState: { currentUser?: API.LoginUserVO } | undefined) {
  const { currentUser } = initialState ?? {};
  return {
    canUser: currentUser,
    canAdmin: currentUser && currentUser.userRole === 'admin',
  };
}

--- END: src/access.ts ---

--- START: src/app.tsx ---
import Footer from '@/components/Footer';
import { getLoginUserUsingGet } from '@/services/backend/userController';
import type { RunTimeLayoutConfig } from '@umijs/max';
import { history, useModel } from '@umijs/max';
import defaultSettings from '../config/defaultSettings';
import { AvatarDropdown } from './components/RightContent/AvatarDropdown';
import { requestConfig } from './requestConfig';
import FloatWindow from "@/pages/FloatWindow";
import { Button } from 'antd';
import { GlobalOutlined } from '@ant-design/icons';
import React from 'react';

const loginPath = '/user/login';

// Define the extended InitialState type
export interface InitialState {
  currentUser?: API.LoginUserVO;
  language?: string;
}

/**
 * @see  https://umijs.org/zh-CN/plugins/plugin-initial-state
 * */
export async function getInitialState(): Promise<InitialState> {
  // Get saved language from localStorage or default to 'en'
  const savedLanguage = localStorage.getItem('language') || 'en';

  const initialState: InitialState = {
    currentUser: undefined,
    language: savedLanguage,
  };

  // 如果不是登录页面，执行
  const { location } = history;
  if (location.pathname !== loginPath) {
    try {
      const res = await getLoginUserUsingGet();
      initialState.currentUser = res.data;
    } catch (error: any) {
      // 如果未登录
    }
  }
  return initialState;
}

// Language switcher component with fixed positioning
const LanguageSwitcher: React.FC = () => {
  const { initialState, setInitialState } = useModel('@@initialState');
  const currentLanguage = initialState?.language || 'en'; // Default to English

  const toggleLanguage = () => {
    const newLanguage = currentLanguage === 'zh' ? 'en' : 'zh';
    // Save to localStorage for persistence
    localStorage.setItem('language', newLanguage);

    // Update global state
    setInitialState((prevState) => ({
      ...prevState,
      language: newLanguage,
    }));

    // Dispatch a custom event that child components can listen for
    window.dispatchEvent(
        new CustomEvent('languageChange', { detail: { language: newLanguage } })
    );
  };

  return (
      <div style={{
        position: 'fixed',
        top: '12px',
        right: '135px',
        zIndex: 1000,
      }}>
        <Button
            type="primary"
            icon={<GlobalOutlined />}
            onClick={toggleLanguage}
        >
          {currentLanguage === 'zh' ? '中文' : 'EN'}
        </Button>
      </div>
  );
};

// ProLayout 支持的api https://procomponents.ant.design/components/layout
// @ts-ignore
export const layout: RunTimeLayoutConfig = ({ initialState }) => {
  return {
    avatarProps: {
      render: () => {
        return <AvatarDropdown />;
      },
    },
    waterMarkProps: {
      content: initialState?.currentUser?.userName,
    },
    footerRender: () => <Footer />,
    menuHeaderRender: undefined,
    // 自定义 403 页面
    // unAccessible: <div>unAccessible</div>,
    ...defaultSettings,

    // 核心修改点：通过 childrenRender 注入悬浮窗和语言切换按钮
    childrenRender: (children) => (
        <>
          {/* 主内容区域 */}
          {children}

          {/*/!* 全局悬浮窗（固定在右下角） *!/*/}
          {/*<FloatWindow />*/}

          {/* 语言切换按钮（固定在右上角） */}
          <LanguageSwitcher />
        </>
    )
  };
};

/**
 * @name request 配置，可以配置错误处理
 * 它基于 axios 和 ahooks 的 useRequest 提供了一套统一的网络请求和错误处理方案。
 * @doc https://umijs.org/docs/max/request#配置
 */
export const request = requestConfig;

// 创建一个全局的语言变量工具，用于非React组件获取语言设置
window.appLanguage = {
  // 获取当前语言
  getCurrentLanguage: () => {
    return localStorage.getItem('language') || 'en';
  },

  // 订阅语言变化
  subscribeToLanguageChange: (callback) => {
    const handler = (event) => {
      callback(event.detail.language);
    };
    window.addEventListener('languageChange', handler);

    // 返回取消订阅的函数
    return () => {
      window.removeEventListener('languageChange', handler);
    };
  }
};

// 在全局范围内声明类型
declare global {
  interface Window {
    appLanguage: {
      getCurrentLanguage: () => string;
      subscribeToLanguageChange: (cb: (lang: string) => void) => () => void;
    };
  }
}

--- END: src/app.tsx ---

--- START: src/global.tsx ---
import '@umijs/max';
import { Button, message, notification } from 'antd';
import defaultSettings from '../config/defaultSettings';
const { pwa } = defaultSettings;
const isHttps = document.location.protocol === 'https:';
const clearCache = () => {
  // remove all caches
  if (window.caches) {
    caches
      .keys()
      .then((keys) => {
        keys.forEach((key) => {
          caches.delete(key);
        });
      })
      .catch((e) => console.log(e));
  }
};

// if pwa is true
if (pwa) {
  // Notify user if offline now
  window.addEventListener('sw.offline', () => {
    message.warning('当前处于离线状态');
  });

  // Pop up a prompt on the page asking the user if they want to use the latest version
  window.addEventListener('sw.updated', (event: Event) => {
    const e = event as CustomEvent;
    const reloadSW = async () => {
      // Check if there is sw whose state is waiting in ServiceWorkerRegistration
      // https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration
      const worker = e.detail && e.detail.waiting;
      if (!worker) {
        return true;
      }
      // Send skip-waiting event to waiting SW with MessageChannel
      await new Promise((resolve, reject) => {
        const channel = new MessageChannel();
        channel.port1.onmessage = (msgEvent) => {
          if (msgEvent.data.error) {
            reject(msgEvent.data.error);
          } else {
            resolve(msgEvent.data);
          }
        };
        worker.postMessage(
          {
            type: 'skip-waiting',
          },
          [channel.port2],
        );
      });
      clearCache();
      window.location.reload();
      return true;
    };
    const key = `open${Date.now()}`;
    const btn = (
      <Button
        type="primary"
        onClick={() => {
          notification.destroy(key);
          reloadSW();
        }}
      >
        {'刷新'}
      </Button>
    );
    notification.open({
      message: '有新内容',
      description: '请点击“刷新”按钮或者手动刷新页面',
      btn,
      key,
      onClose: async () => null,
    });
  });
} else if ('serviceWorker' in navigator && isHttps) {
  // unregister service worker
  const { serviceWorker } = navigator;
  if (serviceWorker.getRegistrations) {
    serviceWorker.getRegistrations().then((sws) => {
      sws.forEach((sw) => {
        sw.unregister();
      });
    });
  }
  serviceWorker.getRegistration().then((sw) => {
    if (sw) sw.unregister();
  });
  clearCache();
}

--- END: src/global.tsx ---

--- START: src/requestConfig.ts ---
﻿import { BACKEND_HOST_LOCAL, BACKEND_HOST_PROD } from '@/constants';
import type { RequestOptions } from '@@/plugin-request/request';
import type { RequestConfig } from '@umijs/max';

// 与后端约定的响应数据格式
interface ResponseStructure {
  success: boolean;
  data: any;
  errorCode?: number;
  errorMessage?: string;
}

const isDev = process.env.NODE_ENV === 'development';

/**
 * @name 错误处理
 * pro 自带的错误处理， 可以在这里做自己的改动
 * @doc https://umijs.org/docs/max/request#配置
 */
export const requestConfig: RequestConfig = {
  baseURL: isDev ? BACKEND_HOST_LOCAL : BACKEND_HOST_PROD,
  withCredentials: true,

  // 请求拦截器
  requestInterceptors: [
    (config: RequestOptions) => {
      // 拦截请求配置，进行个性化处理。
      return config;
    },
  ],

  // 响应拦截器
  responseInterceptors: [
    (response) => {
      // 请求地址
      const requestPath: string = response.config.url ?? '';

      // 响应
      const { data } = response as unknown as ResponseStructure;
      if (!data) {
        throw new Error('服务异常，无返回值');
      }

      // 错误码处理
      const code: number = data.code;
      // 未登录，且不为获取用户登录信息接口
      if (
        code === 40100 &&
        !requestPath.includes('user/get/login') &&
        !location.pathname.includes('/user/login')
      ) {
        // 跳转至登录页
        window.location.href = `/user/login?redirect=${window.location.href}`;
        throw new Error('请先登录');
      }

      if (code !== 0) {
        throw new Error(data.message ?? '服务器错误');
      }
      return response;
    },
  ],
};

--- END: src/requestConfig.ts ---

--- START: src/typings.d.ts ---
declare module 'slash2';
declare module '*.css';
declare module '*.less';
declare module '*.scss';
declare module '*.sass';
declare module '*.svg';
declare module '*.png';
declare module '*.jpg';
declare module '*.jpeg';
declare module '*.gif';
declare module '*.bmp';
declare module '*.tiff';
declare module 'omit.js';
declare module 'numeral';
declare module '@antv/data-set';
declare module 'mockjs';
declare module 'react-fittext';
declare module 'bizcharts-plugin-slider';

declare const REACT_APP_ENV: 'test' | 'dev' | 'pre' | false;

/**
 * 分页信息
 */
interface PageInfo<T> {
  current: number;
  size: number;
  total: number;
  records: T[];
}

/**
 * 分页请求
 */
interface PageRequest {
  current?: number;
  pageSize?: number;
  sortField?: string;
  sortOrder?: 'ascend' | 'descend';
}

/**
 * 删除请求
 */
interface DeleteRequest {
  id: number;
}

/**
 * 返回封装
 */
interface BaseResponse<T> {
  code: number;
  data: T;
  message?: string;
}

/**
 * 全局初始化状态
 */
interface InitialState {
  currentUser?: API.LoginUserVO;
}

--- END: src/typings.d.ts ---

--- START: src/.umi/exports.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
// defineApp
export { defineApp } from './core/defineApp'
export type { RuntimeConfig } from './core/defineApp'
// plugins
export { Access, useAccess, useAccessMarkedRoutes } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-access';
export { Provider, useModel } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-model';
export { useRequest, UseRequestProvider, request, getRequestInstance } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-request';
// plugins types.d.ts
export * from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-access/types.d';
export * from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-antd/types.d';
export * from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-layout/types.d';
export * from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-request/types.d';
// @umijs/renderer-*
export { createBrowserHistory, createHashHistory, createMemoryHistory, Helmet, HelmetProvider, createSearchParams, generatePath, matchPath, matchRoutes, Navigate, NavLink, Outlet, resolvePath, useLocation, useMatch, useNavigate, useOutlet, useOutletContext, useParams, useResolvedPath, useRoutes, useSearchParams, useAppData, useClientLoaderData, useLoaderData, useRouteProps, useSelectedRoutes, useServerLoaderData, renderClient, __getRoot, Link, useRouteData, __useFetcher, withRouter } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@umijs+renderer-react@4.4.11_react-dom@18.3.1_react@18.3.1/node_modules/@umijs/renderer-react';
export type { History, ClientLoader } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@umijs+renderer-react@4.4.11_react-dom@18.3.1_react@18.3.1/node_modules/@umijs/renderer-react'
// umi/client/client/plugin
export { ApplyPluginsType, PluginManager } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/umi@4.4.11_@babel+core@7.27.4_@types+node@24.0.3_@types+react@18.3.23_eslint@8.35.0_prettier@_v4fnocdsjopbxorxpcvwdajkra/node_modules/umi/client/client/plugin.js';
export { history, createHistory } from './core/history';
export { terminal } from './core/terminal';
// react ssr
export const useServerInsertedHTML: Function = () => {};
// test
export { TestBrowser } from './testBrowser';

--- END: src/.umi/exports.ts ---

--- START: src/.umi/testBrowser.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React, { useEffect, useState } from 'react';
import { ApplyPluginsType } from 'umi';
import { renderClient, RenderClientOpts } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@umijs+renderer-react@4.4.11_react-dom@18.3.1_react@18.3.1/node_modules/@umijs/renderer-react';
import { createHistory } from './core/history';
import { createPluginManager } from './core/plugin';
import { getRoutes } from './core/route';
import type { Location } from 'history';


import 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/global.less';
import 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/global.tsx';
import 'antd/dist/reset.css';
const publicPath = '/';
const runtimePublicPath = false;

type TestBrowserProps = {
  location?: Partial<Location>;
  historyRef?: React.MutableRefObject<Location>;
};

export function TestBrowser(props: TestBrowserProps) {
  const pluginManager = createPluginManager();
  const [context, setContext] = useState<RenderClientOpts | undefined>(
    undefined
  );
  useEffect(() => {
    const genContext = async () => {
      const { routes, routeComponents } = await getRoutes(pluginManager);
      // allow user to extend routes
      await pluginManager.applyPlugins({
        key: 'patchRoutes',
        type: ApplyPluginsType.event,
        args: {
          routes,
          routeComponents,
        },
      });
      const contextOpts = pluginManager.applyPlugins({
        key: 'modifyContextOpts',
        type: ApplyPluginsType.modify,
        initialValue: {},
      });
      const basename = contextOpts.basename || '/';
      const history = createHistory({
        type: 'memory',
        basename,
      });
      const context = {
        routes,
        routeComponents,
        pluginManager,
        rootElement: contextOpts.rootElement || document.getElementById('root'),
        publicPath,
        runtimePublicPath,
        history,
        basename,
        components: true,
      };
      const modifiedContext = pluginManager.applyPlugins({
        key: 'modifyClientRenderOpts',
        type: ApplyPluginsType.modify,
        initialValue: context,
      });
      return modifiedContext;
    };
    genContext().then((context) => {
      setContext(context);
      if (props.location) {
        context?.history?.push(props.location);
      }
      if (props.historyRef) {
        props.historyRef.current = context?.history;
      }
    });
  }, []);

  if (context === undefined) {
    return <div id="loading" />;
  }

  const Children = renderClient(context);
  return (
    <React.Fragment>
      <Children />
    </React.Fragment>
  );
}

--- END: src/.umi/testBrowser.tsx ---

--- START: src/.umi/typings.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
type CSSModuleClasses = { readonly [key: string]: string }
declare module '*.css' {
  const classes: CSSModuleClasses
  export default classes
}
declare module '*.scss' {
  const classes: CSSModuleClasses
  export default classes
}
declare module '*.sass' {
  const classes: CSSModuleClasses
  export default classes
}
declare module '*.less' {
  const classes: CSSModuleClasses
  export default classes
}
declare module '*.styl' {
  const classes: CSSModuleClasses
  export default classes
}
declare module '*.stylus' {
  const classes: CSSModuleClasses
  export default classes
}

// images
declare module '*.jpg' {
  const src: string
  export default src
}
declare module '*.jpeg' {
  const src: string
  export default src
}
declare module '*.png' {
  const src: string
  export default src
}
declare module '*.gif' {
  const src: string
  export default src
}
declare module '*.svg' {
  import * as React from 'react';
  export const ReactComponent: React.FunctionComponent<React.SVGProps<
  SVGSVGElement
  > & { title?: string }>;

  const src: string
  export default src
}
declare module '*.ico' {
  const src: string
  export default src
}
declare module '*.webp' {
  const src: string
  export default src
}
declare module '*.avif' {
  const src: string
  export default src
}

// media
declare module '*.mp4' {
  const src: string
  export default src
}
declare module '*.webm' {
  const src: string
  export default src
}
declare module '*.ogg' {
  const src: string
  export default src
}
declare module '*.mp3' {
  const src: string
  export default src
}
declare module '*.wav' {
  const src: string
  export default src
}
declare module '*.flac' {
  const src: string
  export default src
}
declare module '*.aac' {
  const src: string
  export default src
}

// fonts
declare module '*.woff' {
  const src: string
  export default src
}
declare module '*.woff2' {
  const src: string
  export default src
}
declare module '*.eot' {
  const src: string
  export default src
}
declare module '*.ttf' {
  const src: string
  export default src
}
declare module '*.otf' {
  const src: string
  export default src
}

// other
declare module '*.wasm' {
  const initWasm: (options: WebAssembly.Imports) => Promise<WebAssembly.Exports>
  export default initWasm
}
declare module '*.webmanifest' {
  const src: string
  export default src
}
declare module '*.pdf' {
  const src: string
  export default src
}
declare module '*.txt' {
  const src: string
  export default src
}

--- END: src/.umi/typings.d.ts ---

--- START: src/.umi/umi.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import './core/polyfill';
import 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/global.less';
import 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/global.tsx';
import 'antd/dist/reset.css';
import { renderClient } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@umijs+renderer-react@4.4.11_react-dom@18.3.1_react@18.3.1/node_modules/@umijs/renderer-react';
import { getRoutes } from './core/route';
import { createPluginManager } from './core/plugin';
import { createHistory } from './core/history';
import { ApplyPluginsType } from 'umi';


const publicPath = "/";
const runtimePublicPath = false;

async function render() {
  const pluginManager = createPluginManager();
  const { routes, routeComponents } = await getRoutes(pluginManager);

  // allow user to extend routes
  await pluginManager.applyPlugins({
    key: 'patchRoutes',
    type: ApplyPluginsType.event,
    args: {
      routes,
      routeComponents,
    },
  });

  const contextOpts = pluginManager.applyPlugins({
    key: 'modifyContextOpts',
    type: ApplyPluginsType.modify,
    initialValue: {},
  });

  const basename = contextOpts.basename || '/';
  const historyType = contextOpts.historyType || 'browser';

  const history = createHistory({
    type: historyType,
    basename,
    ...contextOpts.historyOpts,
  });

  return (pluginManager.applyPlugins({
    key: 'render',
    type: ApplyPluginsType.compose,
    initialValue() {
      const context = {
        useStream: true,
        routes,
        routeComponents,
        pluginManager,
        mountElementId: 'root',
        rootElement: contextOpts.rootElement || document.getElementById('root'),
        publicPath,
        runtimePublicPath,
        history,
        historyType,
        basename,
        __INTERNAL_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {"pureApp":false,"pureHtml":false},
        callback: contextOpts.callback,
      };
      const modifiedContext = pluginManager.applyPlugins({
        key: 'modifyClientRenderOpts',
        type: ApplyPluginsType.modify,
        initialValue: context,
      });
      return renderClient(modifiedContext);
    },
  }))();
}

import './plugin-moment2dayjs/runtime.tsx'
render();

    if (typeof window !== 'undefined') {
      window.g_umi = {
        version: '4.4.11',
      };
    }

--- END: src/.umi/umi.ts ---

--- START: src/.umi/core/defineApp.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import type { IRuntimeConfig as Plugin0 } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-antd/runtimeConfig.d'
import type { IRuntimeConfig as Plugin1 } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-initialState/runtimeConfig.d'
import type { IRuntimeConfig as Plugin2 } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-layout/runtimeConfig.d'
import type { IRuntimeConfig as Plugin3 } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-request/runtimeConfig.d'
interface IDefaultRuntimeConfig {
  onRouteChange?: (props: { routes: any, clientRoutes: any, location: any, action: any, isFirst: boolean }) => void;
  patchRoutes?: (props: { routes: any }) => void;
  patchClientRoutes?: (props: { routes: any }) => void;
  render?: (oldRender: () => void) => void;
  rootContainer?: (lastRootContainer: JSX.Element, args?: any) => void;
  [key: string]: any;
}
export type RuntimeConfig = IDefaultRuntimeConfig & Plugin0 & Plugin1 & Plugin2 & Plugin3

export function defineApp(config: RuntimeConfig): RuntimeConfig {
  return config;
}

--- END: src/.umi/core/defineApp.ts ---

--- START: src/.umi/core/EmptyRoute.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import { Outlet, useOutletContext } from 'umi';
export default function EmptyRoute() {
  const context = useOutletContext();
  return <Outlet context={context} />;
}

--- END: src/.umi/core/EmptyRoute.tsx ---

--- START: src/.umi/core/helmet.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import { HelmetProvider } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@umijs+renderer-react@4.4.11_react-dom@18.3.1_react@18.3.1/node_modules/@umijs/renderer-react';
import { context } from './helmetContext';

export const innerProvider = (container) => {
  return React.createElement(HelmetProvider, { context }, container);
}

--- END: src/.umi/core/helmet.ts ---

--- START: src/.umi/core/helmetContext.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
export const context = {};

--- END: src/.umi/core/helmetContext.ts ---

--- START: src/.umi/core/history.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import { createHashHistory, createMemoryHistory, createBrowserHistory } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@umijs+renderer-react@4.4.11_react-dom@18.3.1_react@18.3.1/node_modules/@umijs/renderer-react';
import type { UmiHistory } from './historyIntelli';

let history: UmiHistory;
let basename: string = '/';
export function createHistory(opts: any) {
  let h;
  if (opts.type === 'hash') {
    h = createHashHistory();
  } else if (opts.type === 'memory') {
    h = createMemoryHistory(opts);
  } else {
    h = createBrowserHistory();
  }
  if (opts.basename) {
    basename = opts.basename;
  }


  history = {
    ...h,
    push(to, state) {
      h.push(patchTo(to, h), state);
    },
    replace(to, state) {
      h.replace(patchTo(to, h), state);
    },
    get location() {
      return h.location;
    },
    get action() {
      return h.action;
    }
  }

  return h;
}

export function setHistory(h: UmiHistory) {
  if (h) {
    history = h;
  }
}

// Patch `to` to support basename
// Refs:
// https://github.com/remix-run/history/blob/3e9dab4/packages/history/index.ts#L484
// https://github.com/remix-run/history/blob/dev/docs/api-reference.md#to
function patchTo(to: any, h: History) {
  if (typeof to === 'string') {
    return `${stripLastSlash(basename)}${to}`;
  } else if (typeof to === 'object') {

    const currentPathname = h.location.pathname;

    return {
      ...to,
      pathname: to.pathname? `${stripLastSlash(basename)}${to.pathname}` : currentPathname,
    };
  } else {
    throw new Error(`Unexpected to: ${to}`);
  }
}

function stripLastSlash(path) {
  return path.slice(-1) === '/' ? path.slice(0, -1) : path;
}

export { history };

--- END: src/.umi/core/history.ts ---

--- START: src/.umi/core/historyIntelli.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import { getRoutes } from './route'
import type { History } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@umijs+renderer-react@4.4.11_react-dom@18.3.1_react@18.3.1/node_modules/@umijs/renderer-react'

type Routes = Awaited<ReturnType<typeof getRoutes>>['routes']
type AllRoute = Routes[keyof Routes]
type IsRoot<T extends any> = 'parentId' extends keyof T ? false : true

// show `/` in not `layout / wrapper` only
type GetAllRouteWithoutLayout<Item extends AllRoute> = Item extends any
  ? 'isWrapper' extends keyof Item
    ? never
    : 'isLayout' extends keyof Item
    ? never
    : Item
  : never
type AllRouteWithoutLayout = GetAllRouteWithoutLayout<AllRoute>
type IndexRoutePathname = '/' extends AllRouteWithoutLayout['path']
  ? '/'
  : never

type GetChildrens<T extends any> = T extends any
  ? IsRoot<T> extends true
    ? never
    : T
  : never
type Childrens = GetChildrens<AllRoute>
type Root = Exclude<AllRoute, Childrens>
type AllIds = AllRoute['id']

type GetChildrensByParentId<
  Id extends AllIds,
  Item = AllRoute
> = Item extends any
  ? 'parentId' extends keyof Item
    ? Item['parentId'] extends Id
      ? Item
      : never
    : never
  : never

type RouteObject<
  Id extends AllIds,
  Item = GetChildrensByParentId<Id>
> = IsNever<Item> extends true
  ? ''
  : Item extends AllRoute
  ? {
      [Key in Item['path'] as TrimSlash<Key>]: UnionMerge<
        RouteObject<Item['id']>
      >
    }
  : never

type GetRootRouteObject<Item extends Root> = Item extends Root
  ? {
      [K in Item['path'] as TrimSlash<K>]: UnionMerge<RouteObject<Item['id']>>
    }
  : never
type MergedResult = UnionMerge<GetRootRouteObject<Root>>

// --- patch history types ---

type HistoryTo = Parameters<History['push']>['0']
type HistoryPath = Exclude<HistoryTo, string>

type UmiPathname = Path<MergedResult> | (string & {})
interface UmiPath extends HistoryPath {
  pathname: UmiPathname
}
type UmiTo = UmiPathname | UmiPath

type UmiPush = (to: UmiTo, state?: any) => void
type UmiReplace = (to: UmiTo, state?: any) => void


export interface UmiHistory extends History {
  push: UmiPush
  replace: UmiReplace
}

// --- type utils ---
type TrimLeftSlash<T extends string> = T extends `/${infer R}`
  ? TrimLeftSlash<R>
  : T
type TrimRightSlash<T extends string> = T extends `${infer R}/`
  ? TrimRightSlash<R>
  : T
type TrimSlash<T extends string> = TrimLeftSlash<TrimRightSlash<T>>

type IsNever<T> = [T] extends [never] ? true : false
type IsEqual<A, B> = (<G>() => G extends A ? 1 : 2) extends <G>() => G extends B
  ? 1
  : 2
  ? true
  : false

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never
type UnionMerge<U> = UnionToIntersection<U> extends infer O
  ? { [K in keyof O]: O[K] }
  : never

type ExcludeEmptyKey<T> = IsEqual<T, ''> extends true ? never : T

type PathConcat<
  TKey extends string,
  TValue,
  N = TrimSlash<TKey>
> = TValue extends string
  ? ExcludeEmptyKey<N>
  :
      | ExcludeEmptyKey<N>
      | `${N & string}${IsNever<ExcludeEmptyKey<N>> extends true
          ? ''
          : '/'}${UnionPath<TValue>}`

type UnionPath<T> = {
  [K in keyof T]-?: PathConcat<K & string, T[K]>
}[keyof T]

type MakeSureLeftSlash<T> = T extends any
  ? `/${TrimRightSlash<T & string>}`
  : never

// exclude `/*`, because it always at the top of the IDE tip list
type Path<T, K = UnionPath<T>> = Exclude<MakeSureLeftSlash<K>, '/*'> | IndexRoutePathname

--- END: src/.umi/core/historyIntelli.ts ---

--- START: src/.umi/core/plugin.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import * as Plugin_0 from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/app.tsx';
import * as Plugin_1 from '@@/core/helmet.ts';
import * as Plugin_2 from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-access/runtime.tsx';
import * as Plugin_3 from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-initialState/runtime.tsx';
import * as Plugin_4 from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-layout/runtime.tsx';
import * as Plugin_5 from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-model/runtime.tsx';
import { PluginManager } from 'umi';

function __defaultExport (obj) {
  if (obj.default) {
    return typeof obj.default === 'function' ? obj.default() :  obj.default
  }
  return obj;
}
export function getPlugins() {
  return [
    {
      apply: __defaultExport(Plugin_0),
      path: process.env.NODE_ENV === 'production' ? void 0 : 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/app.tsx',
    },
    {
      apply: Plugin_1,
      path: process.env.NODE_ENV === 'production' ? void 0 : '@@/core/helmet.ts',
    },
    {
      apply: Plugin_2,
      path: process.env.NODE_ENV === 'production' ? void 0 : 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-access/runtime.tsx',
    },
    {
      apply: Plugin_3,
      path: process.env.NODE_ENV === 'production' ? void 0 : 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-initialState/runtime.tsx',
    },
    {
      apply: Plugin_4,
      path: process.env.NODE_ENV === 'production' ? void 0 : 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-layout/runtime.tsx',
    },
    {
      apply: Plugin_5,
      path: process.env.NODE_ENV === 'production' ? void 0 : 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-model/runtime.tsx',
    },
  ];
}

export function getValidKeys() {
  return ['patchRoutes','patchClientRoutes','modifyContextOpts','modifyClientRenderOpts','rootContainer','innerProvider','i18nProvider','accessProvider','dataflowProvider','outerProvider','render','onRouteChange','antd','getInitialState','layout','qiankun','request',];
}

let pluginManager = null;

export function createPluginManager() {
  pluginManager = PluginManager.create({
    plugins: getPlugins(),
    validKeys: getValidKeys(),
  });


  return pluginManager;
}

export function getPluginManager() {
  return pluginManager;
}

--- END: src/.umi/core/plugin.ts ---

--- START: src/.umi/core/pluginConfig.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import { IConfigFromPluginsJoi } from "./pluginConfigJoi.d";

interface IConfigTypes {
    codeSplitting: {
    jsStrategy: "bigVendors" | "depPerChunk" | "granularChunks";
    jsStrategyOptions?: ({

} | undefined);
    cssStrategy?: ("mergeAll" | undefined);
    cssStrategyOptions?: ({

} | undefined);
};
    title: string;
    styles: Array<string | {
    src?: (string | undefined);
} | {
    content?: (string | undefined);
} | { [x: string]: any }>;
    scripts: Array<string | {
    src?: (string | undefined);
} | {
    content?: (string | undefined);
} | { [x: string]: any }>;
    routes: Array<{
    component?: (string | undefined);
    layout?: (false | undefined);
    path?: (string | undefined);
    redirect?: (string | undefined);
    routes?: IConfigTypes['routes'];
    wrappers?: (Array<string> | undefined);
} | { [x: string]: any }>;
    routeLoader: {
    moduleType: "esm" | "cjs";
};
    reactRouter5Compat: boolean | {

};
    presets: Array<string>;
    plugins: Array<string>;
    npmClient: "pnpm" | "tnpm" | "cnpm" | "yarn" | "npm";
    mountElementId: string;
    metas: Array<{
    charset?: (string | undefined);
    content?: (string | undefined);
    "http-equiv"?: (string | undefined);
    name?: (string | undefined);
} | { [x: string]: any }>;
    links: Array<{
    crossorigin?: (string | undefined);
    href?: (string | undefined);
    hreflang?: (string | undefined);
    media?: (string | undefined);
    referrerpolicy?: (string | undefined);
    rel?: (string | undefined);
    sizes?: (any | undefined);
    title?: (any | undefined);
    type?: (any | undefined);
} | { [x: string]: any }>;
    historyWithQuery: {

};
    history: {
    type: "browser" | "hash" | "memory";
};
    headScripts: Array<string | {
    src?: (string | undefined);
} | {
    content?: (string | undefined);
} | { [x: string]: any }>;
    esbuildMinifyIIFE: boolean;
    conventionRoutes: {
    base?: (string | undefined);
    exclude?: (Array<any> | undefined);
};
    conventionLayout: boolean;
    base: string;
    analyze: {

};
    writeToDisk: boolean;
    transformRuntime: { [x: string]: any };
    theme: { [x: string]: any };
    targets: { [x: string]: any };
    svgr: { [x: string]: any };
    svgo: { [x: string]: any } | boolean;
    stylusLoader: { [x: string]: any };
    styleLoader: { [x: string]: any };
    srcTranspilerOptions: {
    esbuild?: ({ [x: string]: any } | undefined);
    swc?: ({ [x: string]: any } | undefined);
};
    srcTranspiler: "babel" | "esbuild" | "swc";
    sassLoader: { [x: string]: any };
    runtimePublicPath: {

};
    purgeCSS: { [x: string]: any };
    publicPath: string;
    proxy: { [x: string]: any } | Array<any>;
    postcssLoader: { [x: string]: any };
    outputPath: string;
    normalCSSLoaderModules: { [x: string]: any };
    mfsu: {
    cacheDirectory?: (string | undefined);
    chainWebpack?: (((...args: any[]) => unknown) | undefined);
    esbuild?: (boolean | undefined);
    exclude?: (Array<string | any> | undefined);
    include?: (Array<string> | undefined);
    mfName?: (string | undefined);
    remoteAliases?: (Array<string> | undefined);
    remoteName?: (string | undefined);
    runtimePublicPath?: (boolean | undefined);
    shared?: ({ [x: string]: any } | undefined);
    strategy?: ("eager" | "normal" | undefined);
} | boolean;
    mdx: {
    loader?: (string | undefined);
    loaderOptions?: ({ [x: string]: any } | undefined);
};
    manifest: {
    basePath?: (string | undefined);
    fileName?: (string | undefined);
};
    lessLoader: { [x: string]: any };
    jsMinifierOptions: { [x: string]: any };
    jsMinifier: "esbuild" | "swc" | "terser" | "uglifyJs" | "none";
    inlineLimit: number;
    ignoreMomentLocale: boolean;
    https: {
    cert?: (string | undefined);
    hosts?: (Array<string> | undefined);
    http2?: (boolean | undefined);
    key?: (string | undefined);
};
    hash: boolean;
    forkTSChecker: { [x: string]: any };
    fastRefresh: boolean;
    extraPostCSSPlugins: Array<any>;
    extraBabelPresets: Array<string | Array<any>>;
    extraBabelPlugins: Array<string | Array<any>>;
    extraBabelIncludes: Array<string | any>;
    externals: { [x: string]: any } | string | ((...args: any[]) => unknown);
    esm: {

};
    devtool: "cheap-source-map" | "cheap-module-source-map" | "eval" | "eval-source-map" | "eval-cheap-source-map" | "eval-cheap-module-source-map" | "eval-nosources-cheap-source-map" | "eval-nosources-cheap-module-source-map" | "eval-nosources-source-map" | "source-map" | "hidden-source-map" | "hidden-nosources-cheap-source-map" | "hidden-nosources-cheap-module-source-map" | "hidden-nosources-source-map" | "hidden-cheap-source-map" | "hidden-cheap-module-source-map" | "inline-source-map" | "inline-cheap-source-map" | "inline-cheap-module-source-map" | "inline-nosources-cheap-source-map" | "inline-nosources-cheap-module-source-map" | "inline-nosources-source-map" | "nosources-source-map" | "nosources-cheap-source-map" | "nosources-cheap-module-source-map" | boolean;
    depTranspiler: "babel" | "esbuild" | "swc" | "none";
    define: { [x: string]: any };
    deadCode: {
    context?: (string | undefined);
    detectUnusedExport?: (boolean | undefined);
    detectUnusedFiles?: (boolean | undefined);
    exclude?: (Array<string> | undefined);
    failOnHint?: (boolean | undefined);
    patterns?: (Array<string> | undefined);
};
    cssPublicPath: string;
    cssMinifierOptions: { [x: string]: any };
    cssMinifier: "cssnano" | "esbuild" | "parcelCSS" | "none";
    cssLoaderModules: { [x: string]: any };
    cssLoader: { [x: string]: any };
    copy: Array<{
    from: string;
    to: string;
} | string>;
    checkDepCssModules?: boolean;
    cacheDirectoryPath: string;
    babelLoaderCustomize: string;
    autoprefixer: { [x: string]: any };
    autoCSSModules: boolean;
    alias: { [x: string]: any };
    crossorigin: boolean | {
    includes?: (Array<any> | undefined);
};
    esmi: {
    cdnOrigin: string;
    shimUrl?: (string | undefined);
};
    exportStatic: {
    extraRoutePaths?: (((...args: any[]) => unknown) | Array<string> | undefined);
    ignorePreRenderError?: (boolean | undefined);
};
    favicons: Array<string>;
    helmet: boolean;
    icons: {
    autoInstall?: ({

} | undefined);
    defaultComponentConfig?: ({

} | undefined);
    alias?: ({

} | undefined);
    include?: (Array<string> | undefined);
};
    mock: {
    exclude?: (Array<string> | undefined);
    include?: (Array<string> | undefined);
};
    mpa: {
    template?: (string | undefined);
    layout?: (string | undefined);
    getConfigFromEntryFile?: (boolean | undefined);
    entry?: ({

} | undefined);
};
    phantomDependency: {
    exclude?: (Array<string> | undefined);
};
    polyfill: {
    imports?: (Array<string> | undefined);
};
    routePrefetch: {
    defaultPrefetch?: ("none" | "intent" | "render" | "viewport" | undefined);
    defaultPrefetchTimeout?: (number | undefined);
};
    terminal: {

};
    tmpFiles: boolean;
    clientLoader: {

};
    routeProps: {

};
    ssr: {
    serverBuildPath?: (string | undefined);
    serverBuildTarget?: ("express" | "worker" | undefined);
    platform?: (string | undefined);
    builder?: ("esbuild" | "webpack" | "mako" | undefined);
    __INTERNAL_DO_NOT_USE_OR_YOU_WILL_BE_FIRED?: ({
    pureApp?: (boolean | undefined);
    pureHtml?: (boolean | undefined);
} | undefined);
    useStream?: (boolean | undefined);
};
    lowImport: {
    libs?: (Array<any> | undefined);
    css?: (string | undefined);
};
    vite: {

};
    apiRoute: {
    platform?: (string | undefined);
};
    monorepoRedirect: boolean | {
    srcDir?: (Array<string> | undefined);
    exclude?: (Array<any> | undefined);
    peerDeps?: (boolean | undefined);
};
    test: {

};
    clickToComponent: {
    /** 默认情况下，点击将默认编辑器为vscode, 你可以设置编辑器 vscode 或者 vscode-insiders */
    editor?: (string | undefined);
};
    legacy: {
    buildOnly?: (boolean | undefined);
    nodeModulesTransform?: (boolean | undefined);
    checkOutput?: (boolean | undefined);
};
    /** 设置 babel class-properties 启用 loose 
 @doc https://umijs.org/docs/api/config#classpropertiesloose */
    classPropertiesLoose: boolean | {

};
    ui: {

};
    mako: {
    plugins?: (Array<{
    load?: (((...args: any[]) => unknown) | undefined);
    generateEnd?: (((...args: any[]) => unknown) | undefined);
}> | undefined);
    px2rem?: ({
    root?: (number | undefined);
    propBlackList?: (Array<string> | undefined);
    propWhiteList?: (Array<string> | undefined);
    selectorBlackList?: (Array<string> | undefined);
    selectorWhiteList?: (Array<string> | undefined);
    selectorDoubleList?: (Array<string> | undefined);
} | undefined);
    experimental?: ({
    webpackSyntaxValidate?: (Array<string> | undefined);
} | undefined);
    flexBugs?: (boolean | undefined);
    optimization?: ({
    skipModules?: (boolean | undefined);
} | undefined);
};
    hmrGuardian: boolean;
    forget: {
    ReactCompilerConfig?: ({

} | undefined);
};
    verifyCommit: {
    scope?: (Array<string> | undefined);
    allowEmoji?: (boolean | undefined);
};
    run: {
    globals?: (Array<string> | undefined);
};
    access: { [x: string]: any };
    analytics: {
    baidu?: (string | undefined);
    ga?: (string | undefined);
    ga_v2?: (string | undefined);
};
    antd: {
    dark?: (boolean | undefined);
    compact?: (boolean | undefined);
    import?: (boolean | undefined);
    style?: ("less" | "css" | undefined);
    theme?: ({
    components: { [x: string]: { [x: string]: any } };
} | { [x: string]: any } | undefined);
    appConfig?: ({ [x: string]: any } | undefined);
    momentPicker?: (boolean | undefined);
    styleProvider?: ({ [x: string]: any } | undefined);
    configProvider?: ({
    theme: {
    components: { [x: string]: { [x: string]: any } };
} | { [x: string]: any };
} | { [x: string]: any } | undefined);
};
    dva: {
    extraModels?: (Array<string> | undefined);
    immer?: ({ [x: string]: any } | undefined);
    skipModelValidate?: (boolean | undefined);
};
    initialState: {
    loading?: (string | undefined);
};
    layout: { [x: string]: any };
    locale: {
    default?: (string | undefined);
    useLocalStorage?: (boolean | undefined);
    baseNavigator?: (boolean | undefined);
    title?: (boolean | undefined);
    antd?: (boolean | undefined);
    baseSeparator?: (string | undefined);
};
    mf: {
    name?: (string | undefined);
    remotes?: (Array<{
    aliasName?: (string | undefined);
    name: string;
    entry?: (string | undefined);
    entries?: ({

} | undefined);
    keyResolver?: (string | undefined);
}> | undefined);
    shared?: ({ [x: string]: any } | undefined);
    library?: ({ [x: string]: any } | undefined);
    remoteHash?: (boolean | undefined);
};
    model: {
    extraModels?: (Array<string> | undefined);
    sort?: ((((...args: any[]) => unknown) | undefined) | undefined);
};
    moment2dayjs: {
    preset?: ("antd" | "antdv3" | "none" | undefined);
    plugins?: (Array<string> | undefined);
};
    qiankun: {
    slave?: ({ [x: string]: any } | undefined);
    master?: ({ [x: string]: any } | undefined);
    externalQiankun?: (boolean | undefined);
};
    reactQuery: {
    devtool?: ({ [x: string]: any } | boolean | undefined);
    queryClient?: ({ [x: string]: any } | boolean | undefined);
};
    request: {
    dataField?: (string | undefined);
};
    styledComponents: {
    babelPlugin?: ({ [x: string]: any } | undefined);
};
    tailwindcss: { [x: string]: any };
    valtio: {

};
};

type PrettifyWithCloseable<T> = {
  [K in keyof T]: T[K] | false;
} & {};

export type IConfigFromPlugins = PrettifyWithCloseable<
  IConfigFromPluginsJoi & Partial<IConfigTypes>
>;

--- END: src/.umi/core/pluginConfig.ts ---

--- START: src/.umi/core/pluginConfigJoi.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
// Created by Umi Plugin

export interface IConfigFromPluginsJoi {
openAPI?: ({
requestLibPath?: string
schemaPath?: string
mock?: boolean
projectName?: string
apiPrefix?: (string | (() => any))
namespace?: string
hook?: {
customFunctionName?: (() => any)
customClassName?: (() => any)
}
}[] | {
requestLibPath?: string
schemaPath?: string
mock?: boolean
projectName?: string
apiPrefix?: (string | (() => any))
namespace?: string
hook?: {
customFunctionName?: (() => any)
customClassName?: (() => any)
}
})
keepalive?: unknown[]
tabsLayout?: (boolean | {
hasCustomTabs?: boolean
hasDropdown?: boolean
hasFixedHeader?: boolean
})
requestRecord?: {
exclude?: unknown[]
type?: boolean
namespace?: string
comment?: boolean
outputDir?: string
successFilter?: (() => any)
role?: string
mock?: {
outputDir?: string
fileName?: string
usingRole?: string
}
}
}

--- END: src/.umi/core/pluginConfigJoi.d.ts ---

--- START: src/.umi/core/polyfill.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.error.cause.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.aggregate-error.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.aggregate-error.cause.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.at.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.find-last.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.find-last-index.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.push.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.reduce.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.reduce-right.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.to-reversed.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.to-sorted.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.to-spliced.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.with.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.map.group-by.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.object.group-by.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.object.has-own.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.promise.any.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.promise.with-resolvers.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.reflect.to-string-tag.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.regexp.flags.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.string.at-alternative.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.string.is-well-formed.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.string.replace-all.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.string.to-well-formed.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.typed-array.at.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.typed-array.find-last.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.typed-array.find-last-index.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.typed-array.set.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.typed-array.to-reversed.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.typed-array.to-sorted.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.typed-array.with.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.suppressed-error.constructor.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.from-async.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.filter-out.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.filter-reject.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.group.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.group-by.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.group-by-to-map.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.group-to-map.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.is-template-object.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.last-index.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.last-item.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.unique-by.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array-buffer.detached.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array-buffer.transfer.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array-buffer.transfer-to-fixed-length.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-disposable-stack.constructor.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.constructor.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.as-indexed-pairs.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.async-dispose.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.drop.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.every.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.filter.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.find.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.flat-map.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.for-each.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.from.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.indexed.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.map.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.reduce.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.some.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.take.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.to-array.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.bigint.range.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.composite-key.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.composite-symbol.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.data-view.get-float16.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.data-view.get-uint8-clamped.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.data-view.set-float16.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.data-view.set-uint8-clamped.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.disposable-stack.constructor.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.function.demethodize.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.function.is-callable.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.function.is-constructor.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.function.metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.function.un-this.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.constructor.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.as-indexed-pairs.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.dispose.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.drop.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.every.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.filter.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.find.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.flat-map.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.for-each.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.from.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.indexed.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.map.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.range.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.reduce.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.some.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.take.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.to-array.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.to-async.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.json.is-raw-json.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.json.parse.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.json.raw-json.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.delete-all.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.emplace.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.every.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.filter.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.find.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.find-key.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.from.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.includes.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.key-by.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.key-of.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.map-keys.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.map-values.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.merge.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.of.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.reduce.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.some.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.update.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.update-or-insert.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.upsert.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.clamp.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.deg-per-rad.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.degrees.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.fscale.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.f16round.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.iaddh.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.imulh.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.isubh.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.rad-per-deg.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.radians.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.scale.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.seeded-prng.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.signbit.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.umulh.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.number.from-string.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.number.range.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.object.iterate-entries.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.object.iterate-keys.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.object.iterate-values.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.observable.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.promise.try.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.define-metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.delete-metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.get-metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.get-metadata-keys.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.get-own-metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.get-own-metadata-keys.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.has-metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.has-own-metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.regexp.escape.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.add-all.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.delete-all.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.difference.v2.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.difference.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.every.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.filter.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.find.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.from.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.intersection.v2.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.intersection.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.is-disjoint-from.v2.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.is-disjoint-from.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.is-subset-of.v2.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.is-subset-of.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.is-superset-of.v2.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.is-superset-of.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.join.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.map.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.of.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.reduce.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.some.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.symmetric-difference.v2.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.symmetric-difference.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.union.v2.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.union.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.string.at.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.string.cooked.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.string.code-points.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.string.dedent.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.async-dispose.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.dispose.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.is-registered-symbol.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.is-registered.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.is-well-known-symbol.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.is-well-known.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.matcher.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.metadata-key.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.observable.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.pattern-match.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.replace-all.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.typed-array.from-async.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.typed-array.filter-out.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.typed-array.filter-reject.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.typed-array.group-by.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.typed-array.to-spliced.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.typed-array.unique-by.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.uint8-array.from-base64.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.uint8-array.from-hex.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.uint8-array.to-base64.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.uint8-array.to-hex.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-map.delete-all.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-map.from.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-map.of.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-map.emplace.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-map.upsert.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-set.add-all.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-set.delete-all.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-set.from.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-set.of.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/web.dom-exception.stack.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/web.immediate.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/web.self.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/web.structured-clone.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/web.url.can-parse.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/web.url-search-params.delete.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/web.url-search-params.has.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/web.url-search-params.size.js";
import 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/regenerator-runtime@0.13.11/node_modules/regenerator-runtime/runtime.js';
export {};

--- END: src/.umi/core/polyfill.ts ---

--- START: src/.umi/core/route.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';

export async function getRoutes() {
  const routes = {"1":{"path":"/welcome","icon":"home","name":"AMSNet","parentId":"ant-design-pro-layout","id":"1"},"2":{"path":"/user","layout":false,"id":"2"},"3":{"path":"/user/login","parentId":"2","id":"3"},"4":{"path":"/user/register","parentId":"2","id":"4"},"5":{"path":"/fileoperate","icon":"edit","name":"Device Labeling","access":"canUser","parentId":"ant-design-pro-layout","id":"5"},"6":{"path":"/maskoperate","icon":"edit","name":"Net Labeling","access":"canUser","parentId":"ant-design-pro-layout","id":"6"},"7":{"path":"/graphoperate","icon":"edit","name":"Knowledge Graph","access":"canUser","parentId":"ant-design-pro-layout","id":"7"},"8":{"path":"/","redirect":"/welcome","parentId":"ant-design-pro-layout","id":"8"},"9":{"path":"*","layout":false,"id":"9"},"ant-design-pro-layout":{"id":"ant-design-pro-layout","path":"/","isLayout":true},"umi/plugin/openapi":{"path":"/umi/plugin/openapi","id":"umi/plugin/openapi"}} as const;
  return {
    routes,
    routeComponents: {
'1': React.lazy(() => import(/* webpackChunkName: "p__Welcome" */'@/pages/Welcome.tsx')),
'2': React.lazy(() => import('./EmptyRoute')),
'3': React.lazy(() => import(/* webpackChunkName: "p__User__Login__index" */'@/pages/User/Login/index.tsx')),
'4': React.lazy(() => import(/* webpackChunkName: "p__User__Register__index" */'@/pages/User/Register/index.tsx')),
'5': React.lazy(() => import(/* webpackChunkName: "p__FileOperate__index" */'@/pages/FileOperate/index.tsx')),
'6': React.lazy(() => import(/* webpackChunkName: "p__MaskOperate__index" */'@/pages/MaskOperate/index.tsx')),
'7': React.lazy(() => import(/* webpackChunkName: "p__GraphOperate__index" */'@/pages/GraphOperate/index.tsx')),
'8': React.lazy(() => import('./EmptyRoute')),
'9': React.lazy(() => import(/* webpackChunkName: "p__404" */'@/pages/404.tsx')),
'ant-design-pro-layout': React.lazy(() => import(/* webpackChunkName: "umi__plugin-layout__Layout" */'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-layout/Layout.tsx')),
'umi/plugin/openapi': React.lazy(() => import(/* webpackChunkName: "umi__plugin-openapi__openapi" */'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-openapi/openapi.tsx')),
},
  };
}

--- END: src/.umi/core/route.tsx ---

--- START: src/.umi/core/terminal.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
let count = 0;
let groupLevel = 0;
function send(type: string, message?: string) {
  if(process.env.NODE_ENV==='production'){
    return;
  }else{
    const encodedMessage = message ? `&m=${encodeURI(message)}` : '';
    fetch(`/__umi/api/terminal?type=${type}&t=${Date.now()}&c=${count++}&g=${groupLevel}${encodedMessage}`, { mode: 'no-cors' })
  }
}
function prettyPrint(obj: any) {
  return JSON.stringify(obj, null, 2);
}
function stringifyObjs(objs: any[]) {
  const obj = objs.length > 1 ? objs.map(stringify).join(' ') : objs[0];
  return typeof obj === 'object' ? `${prettyPrint(obj)}` : obj.toString();
}
function stringify(obj: any) {
  return typeof obj === 'object' ? `${JSON.stringify(obj)}` : obj.toString();
}
const terminal = {
  log(...objs: any[]) { send('log', stringifyObjs(objs)) },
  info(...objs: any[]) { send('info', stringifyObjs(objs)) },
  warn(...objs: any[]) { send('warn', stringifyObjs(objs)) },
  error(...objs: any[]) { send('error', stringifyObjs(objs)) },
  group() { groupLevel++ },
  groupCollapsed() { groupLevel++ },
  groupEnd() { groupLevel && --groupLevel },
  clear() { send('clear') },
  trace(...args: any[]) { console.trace(...args) },
  profile(...args: any[]) { console.profile(...args) },
  profileEnd(...args: any[]) { console.profileEnd(...args) },
};
export { terminal };

--- END: src/.umi/core/terminal.ts ---

--- START: src/.umi/plugin-access/context.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import { AccessInstance } from './types.d';

export const AccessContext = React.createContext<AccessInstance>(null);

--- END: src/.umi/plugin-access/context.ts ---

--- START: src/.umi/plugin-access/index.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React, { PropsWithChildren } from 'react';
import { AccessContext } from './context';
import type { IRoute } from '@umijs/max';

export const useAccess = () => {
  return React.useContext(AccessContext);
};

export interface AccessProps {
  accessible: boolean;
  fallback?: React.ReactNode;
}
export const Access: React.FC<PropsWithChildren<AccessProps>> = (props) => {
  if (process.env.NODE_ENV === 'development' && typeof props.accessible !== 'boolean') {
    throw new Error('[access] the `accessible` property on <Access /> should be a boolean');
  }

  return <>{ props.accessible ? props.children : props.fallback }</>;
};

export const useAccessMarkedRoutes = (routes: IRoute[]) => {
  const access = useAccess();
  const markdedRoutes: IRoute[] = React.useMemo(() => {
    const process = (route, parentAccessCode, parentRoute) => {
      let accessCode = route.access;
      // 用父级的路由检测父级的 accessCode
      let detectorRoute = route;
      if (!accessCode && parentAccessCode) {
        accessCode = parentAccessCode;
        detectorRoute = parentRoute;
      }

      // set default status
      route.unaccessible = false;

      // check access code
      if (typeof accessCode === 'string') {
        const detector = access[accessCode];

        if (typeof detector === 'function') {
          route.unaccessible = !detector(detectorRoute);
        } else if (typeof detector === 'boolean') {
          route.unaccessible = !detector;
        } else if (typeof detector === 'undefined') {
          route.unaccessible = true;
        }
      }

      // check children access code
      if (route.children?.length) {
        const isNoAccessibleChild = !route.children.reduce((hasAccessibleChild, child) => {
          process(child, accessCode, route);

          return hasAccessibleChild || !child.unaccessible;
        }, false);

        // make sure parent route is unaccessible if all children are unaccessible
        if (isNoAccessibleChild) {
          route.unaccessible = true;
        }
      }

      // check children access code
      if (route.routes?.length) {
        const isNoAccessibleChild = !route.routes.reduce((hasAccessibleChild, child) => {
          process(child, accessCode, route);

          return hasAccessibleChild || !child.unaccessible;
        }, false);

        // make sure parent route is unaccessible if all children are unaccessible
        if (isNoAccessibleChild) {
          route.unaccessible = true;
        }
      }

      return route;
    }

    return routes.map(route => process(route));
  }, [routes.length, access]);

  return markdedRoutes;
}

--- END: src/.umi/plugin-access/index.tsx ---

--- START: src/.umi/plugin-access/runtime.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import accessFactory from '@/access';
import { useModel } from '@@/plugin-model';

import { AccessContext } from './context';

function Provider(props) {
  const { initialState } = useModel('@@initialState');
  const access = React.useMemo(() => accessFactory(initialState), [initialState]);

  return (
    <AccessContext.Provider value={access}>
      { props.children }
    </AccessContext.Provider>
  );
}

export function accessProvider(container) {
  return <Provider>{ container }</Provider>;
}

--- END: src/.umi/plugin-access/runtime.tsx ---

--- START: src/.umi/plugin-access/types.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import accessFactory from '@/access';

export type AccessInstance = ReturnType<typeof accessFactory>;

--- END: src/.umi/plugin-access/types.d.ts ---

--- START: src/.umi/plugin-antd/runtime.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import {
  ConfigProvider,
} from 'antd';
import { ApplyPluginsType } from 'umi';
import { getPluginManager } from '../core/plugin';

let cacheAntdConfig = null;

const getAntdConfig = () => {
  if(!cacheAntdConfig){
    cacheAntdConfig = getPluginManager().applyPlugins({
      key: 'antd',
      type: ApplyPluginsType.modify,
      initialValue: {
      },
    });
  }
  return cacheAntdConfig;
}

function AntdProvider({ children }) {
  let container = children;

  const [antdConfig, _setAntdConfig] = React.useState(() => {
    const {
      appConfig: _,
      ...finalConfigProvider
    } = getAntdConfig();
    return finalConfigProvider
  });
  const setAntdConfig: typeof _setAntdConfig = (newConfig) => {
    _setAntdConfig(prev => {
      return merge({}, prev, typeof newConfig === 'function' ? newConfig(prev) : newConfig)
    })
  }




  return container;
}

export function rootContainer(children) {
  return (
    <AntdProvider>
      {children}
    </AntdProvider>
  );
}

--- END: src/.umi/plugin-antd/runtime.tsx ---

--- START: src/.umi/plugin-antd/runtimeConfig.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import type { RuntimeAntdConfig } from './types.d';
export type IRuntimeConfig = {
  antd?: RuntimeAntdConfig
};

--- END: src/.umi/plugin-antd/runtimeConfig.d.ts ---

--- START: src/.umi/plugin-antd/types.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
type Prettify<T> = {
  [K in keyof T]: T[K];
} & {};

type AntdConfig = Prettify<{}


>;

export type RuntimeAntdConfig = (memo: AntdConfig) => AntdConfig;

--- END: src/.umi/plugin-antd/types.d.ts ---

--- START: src/.umi/plugin-initialState/@@initialState.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import { useState, useEffect, useCallback } from 'react';
import { getInitialState } from '@/app';

export type InitialStateType = Awaited<ReturnType<typeof getInitialState>> | undefined;

const initState = {
  initialState: undefined as InitialStateType,
  loading: true,
  error: undefined,
};

export default () => {
  const [state, setState] = useState(initState);
  const refresh = useCallback(async () => {
    setState((s) => ({ ...s, loading: true, error: undefined }));
    try {
      const ret = await getInitialState();
      setState((s) => ({ ...s, initialState: ret, loading: false }));
    } catch (e) {
      setState((s) => ({ ...s, error: e, loading: false }));
    }
  }, []);

  const setInitialState = useCallback(
    async (
      initialState: InitialStateType | ((initialState: InitialStateType) => InitialStateType),
    ) => {
      setState((s) => {
        if (typeof initialState === 'function') {
          return { ...s, initialState: initialState(s.initialState), loading: false };
        }
        return { ...s, initialState, loading: false };
      });
    },
    [],
  );

  useEffect(() => {
    refresh();
  }, []);

  return {
    ...state,
    refresh,
    setInitialState,
  };
}

--- END: src/.umi/plugin-initialState/@@initialState.ts ---

--- START: src/.umi/plugin-initialState/Provider.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import { useModel } from '@@/plugin-model';
function Loading() { return <div />; }
export default function InitialStateProvider(props: any) {
  const appLoaded = React.useRef(false);
  const { loading = false } = useModel("@@initialState") || {};
  React.useEffect(() => {
    if (!loading) {
      appLoaded.current = true;
    }
  }, [loading]);
  if (loading && !appLoaded.current && typeof window !== 'undefined') {
    return <Loading />;
  }
  return props.children;
}

--- END: src/.umi/plugin-initialState/Provider.tsx ---

--- START: src/.umi/plugin-initialState/runtime.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import Provider from './Provider';
export function dataflowProvider(container) {
  return <Provider>{ container }</Provider>;
}

--- END: src/.umi/plugin-initialState/runtime.tsx ---

--- START: src/.umi/plugin-initialState/runtimeConfig.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
export interface IRuntimeConfig {
  getInitialState?: () => Promise<Record<string, any>>
}

--- END: src/.umi/plugin-initialState/runtimeConfig.d.ts ---

--- START: src/.umi/plugin-layout/Exception.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import { history, type IRoute } from '@umijs/max';
import { Result, Button } from 'antd';

const Exception: React.FC<{
  children: React.ReactNode;
  route?: IRoute;
  notFound?: React.ReactNode;
  noAccessible?: React.ReactNode;
  unAccessible?: React.ReactNode;
  noFound?: React.ReactNode;
}> = (props) => (
  // render custom 404
  (!props.route && (props.noFound || props.notFound)) ||
  // render custom 403
  (props.route?.unaccessible && (props.unAccessible || props.noAccessible)) ||
  // render default exception
  ((!props.route || props.route?.unaccessible) && (
    <Result
      status={props.route ? '403' : '404'}
      title={props.route ? '403' : '404'}
      subTitle={props.route ? '抱歉，你无权访问该页面' : '抱歉，你访问的页面不存在'}
      extra={
        <Button type="primary" onClick={() => history.push('/')}>
          返回首页
        </Button>
      }
    />
  )) ||
  // normal render
  props.children
);

export default Exception;

--- END: src/.umi/plugin-layout/Exception.tsx ---

--- START: src/.umi/plugin-layout/icons.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import HomeOutlined from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@ant-design+icons@4.8.3_react-dom@18.3.1_react@18.3.1/node_modules/@ant-design/icons/es/icons/HomeOutlined';
import EditOutlined from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@ant-design+icons@4.8.3_react-dom@18.3.1_react@18.3.1/node_modules/@ant-design/icons/es/icons/EditOutlined';
export default { HomeOutlined, EditOutlined };

--- END: src/.umi/plugin-layout/icons.tsx ---

--- START: src/.umi/plugin-layout/index.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
export type TempType = string

--- END: src/.umi/plugin-layout/index.ts ---

--- START: src/.umi/plugin-layout/Layout.css ---
@media screen and (max-width: 480px) {
  /* 在小屏幕的时候可以有更好的体验 */
  .umi-plugin-layout-container {
    width: 100% !important;
  }
  .umi-plugin-layout-container > * {
    border-radius: 0 !important;
  }
}
.umi-plugin-layout-menu .anticon {
  margin-right: 8px;
}
.umi-plugin-layout-menu .ant-dropdown-menu-item {
  min-width: 160px;
}
.umi-plugin-layout-right {
  display: flex !important;
  float: right;
  height: 100%;
  margin-left: auto;
  overflow: hidden;
}
.umi-plugin-layout-right .umi-plugin-layout-action {
  display: flex;
  align-items: center;
  height: 100%;
  padding: 0 12px;
  cursor: pointer;
  transition: all 0.3s;
}
.umi-plugin-layout-right .umi-plugin-layout-action > i {
  color: rgba(255, 255, 255, 0.85);
  vertical-align: middle;
}
.umi-plugin-layout-right .umi-plugin-layout-action:hover {
  background: rgba(0, 0, 0, 0.025);
}
.umi-plugin-layout-right .umi-plugin-layout-action.opened {
  background: rgba(0, 0, 0, 0.025);
}
.umi-plugin-layout-right .umi-plugin-layout-search {
  padding: 0 12px;
}
.umi-plugin-layout-right .umi-plugin-layout-search:hover {
  background: transparent;
}
.umi-plugin-layout-name {
  margin-left: 8px;
}
.umi-plugin-layout-name.umi-plugin-layout-hide-avatar-img {
  margin-left: 0;
}

--- END: src/.umi/plugin-layout/Layout.css ---

--- START: src/.umi/plugin-layout/Layout.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
/// <reference types="D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/@ant-design/pro-components" />


import {
  Link, useLocation, useNavigate, Outlet, useAppData, matchRoutes,
  type IRoute
} from '@umijs/max';
import React, { useMemo } from 'react';
import {
  ProLayout,
} from "D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/@ant-design/pro-components";
import './Layout.css';
import Logo from './Logo';
import Exception from './Exception';
import { getRightRenderContent } from './rightRender';
import { useModel } from '@@/plugin-model';
import { useAccessMarkedRoutes } from '@@/plugin-access';


// 过滤出需要显示的路由, 这里的filterFn 指 不希望显示的层级
const filterRoutes = (routes: IRoute[], filterFn: (route: IRoute) => boolean) => {
  if (routes.length === 0) {
    return []
  }

  let newRoutes = []
  for (const route of routes) {
    const newRoute = {...route };
    if (filterFn(route)) {
      if (Array.isArray(newRoute.routes)) {
        newRoutes.push(...filterRoutes(newRoute.routes, filterFn))
      }
    } else {
      if (Array.isArray(newRoute.children)) {
        newRoute.children = filterRoutes(newRoute.children, filterFn);
        newRoute.routes = newRoute.children;
      }
      newRoutes.push(newRoute);
    }
  }

  return newRoutes;
}

// 格式化路由 处理因 wrapper 导致的 菜单 path 不一致
const mapRoutes = (routes: IRoute[]) => {
  if (routes.length === 0) {
    return []
  }
  return routes.map(route => {
    // 需要 copy 一份, 否则会污染原始数据
    const newRoute = {...route}
    if (route.originPath) {
      newRoute.path = route.originPath
    }

    if (Array.isArray(route.routes)) {
      newRoute.routes = mapRoutes(route.routes);
    }

    if (Array.isArray(route.children)) {
      newRoute.children = mapRoutes(route.children);
    }

    return newRoute
  })
}

export default (props: any) => {
  const location = useLocation();
  const navigate = useNavigate();
  const { clientRoutes, pluginManager } = useAppData();
  const initialInfo = (useModel && useModel('@@initialState')) || {
    initialState: undefined,
    loading: false,
    setInitialState: null,
  };
  const { initialState, loading, setInitialState } = initialInfo;
  const userConfig = {
  "locale": true,
  "navTheme": "light",
  "colorPrimary": "#1890ff",
  "layout": "mix",
  "contentWidth": "Fluid",
  "fixedHeader": false,
  "fixSiderbar": true,
  "colorWeak": false,
  "title": "AMSNet",
  "pwa": true,
  "iconfontUrl": "",
  "token": {}
};
const formatMessage = undefined;
  const runtimeConfig = pluginManager.applyPlugins({
    key: 'layout',
    type: 'modify',
    initialValue: {
      ...initialInfo
    },
  });


  // 现在的 layout 及 wrapper 实现是通过父路由的形式实现的, 会导致路由数据多了冗余层级, proLayout 消费时, 无法正确展示菜单, 这里对冗余数据进行过滤操作
  const newRoutes = filterRoutes(clientRoutes.filter(route => route.id === 'ant-design-pro-layout'), (route) => {
    return (!!route.isLayout && route.id !== 'ant-design-pro-layout') || !!route.isWrapper;
  })
  const [route] = useAccessMarkedRoutes(mapRoutes(newRoutes));

  const matchedRoute = useMemo(() => matchRoutes(route.children, location.pathname)?.pop?.()?.route, [location.pathname]);

  return (
    <ProLayout
      route={route}
      location={location}
      title={userConfig.title || 'yupi-antd-frontend-init'}
      navTheme="dark"
      siderWidth={256}
      onMenuHeaderClick={(e) => {
        e.stopPropagation();
        e.preventDefault();
        navigate('/');
      }}
      formatMessage={userConfig.formatMessage || formatMessage}
      menu={{ locale: userConfig.locale }}
      logo={Logo}
      menuItemRender={(menuItemProps, defaultDom) => {
        if (menuItemProps.isUrl || menuItemProps.children) {
          return defaultDom;
        }
        if (menuItemProps.path && location.pathname !== menuItemProps.path) {
          return (
            // handle wildcard route path, for example /slave/* from qiankun
            <Link to={menuItemProps.path.replace('/*', '')} target={menuItemProps.target}>
              {defaultDom}
            </Link>
          );
        }
        return defaultDom;
      }}
      itemRender={(route, _, routes) => {
        const { breadcrumbName, title, path } = route;
        const label = title || breadcrumbName
        const last = routes[routes.length - 1]
        if (last) {
          if (last.path === path || last.linkPath === path) {
            return <span>{label}</span>;
          }
        }
        return <Link to={path}>{label}</Link>;
      }}
      disableContentMargin
      fixSiderbar
      fixedHeader
      {...runtimeConfig}
      rightContentRender={
        runtimeConfig.rightContentRender !== false &&
        ((layoutProps) => {
          const dom = getRightRenderContent({
            runtimeConfig,
            loading,
            initialState,
            setInitialState,
          });
          if (runtimeConfig.rightContentRender) {
            return runtimeConfig.rightContentRender(layoutProps, dom, {
              // BREAK CHANGE userConfig > runtimeConfig
              userConfig,
              runtimeConfig,
              loading,
              initialState,
              setInitialState,
            });
          }
          return dom;
        })
      }
    >
      <Exception
        route={matchedRoute}
        noFound={runtimeConfig?.noFound}
        notFound={runtimeConfig?.notFound}
        unAccessible={runtimeConfig?.unAccessible}
        noAccessible={runtimeConfig?.noAccessible}
      >
        {runtimeConfig.childrenRender
          ? runtimeConfig.childrenRender(<Outlet />, props)
          : <Outlet />
        }
      </Exception>
    </ProLayout>
  );
}

--- END: src/.umi/plugin-layout/Layout.tsx ---

--- START: src/.umi/plugin-layout/Logo.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';

const LogoIcon: React.FC = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="32"
      height="32"
      viewBox="0 0 200 200"
    >
      <defs>
        <linearGradient
          id="linearGradient-1"
          x1="62.102%"
          x2="108.197%"
          y1="0%"
          y2="37.864%"
        >
          <stop offset="0%" stopColor="#4285EB"></stop>
          <stop offset="100%" stopColor="#2EC7FF"></stop>
        </linearGradient>
        <linearGradient
          id="linearGradient-2"
          x1="69.644%"
          x2="54.043%"
          y1="0%"
          y2="108.457%"
        >
          <stop offset="0%" stopColor="#29CDFF"></stop>
          <stop offset="37.86%" stopColor="#148EFF"></stop>
          <stop offset="100%" stopColor="#0A60FF"></stop>
        </linearGradient>
        <linearGradient
          id="linearGradient-3"
          x1="69.691%"
          x2="16.723%"
          y1="-12.974%"
          y2="117.391%"
        >
          <stop offset="0%" stopColor="#FA816E"></stop>
          <stop offset="41.473%" stopColor="#F74A5C"></stop>
          <stop offset="100%" stopColor="#F51D2C"></stop>
        </linearGradient>
        <linearGradient
          id="linearGradient-4"
          x1="68.128%"
          x2="30.44%"
          y1="-35.691%"
          y2="114.943%"
        >
          <stop offset="0%" stopColor="#FA8E7D"></stop>
          <stop offset="51.264%" stopColor="#F74A5C"></stop>
          <stop offset="100%" stopColor="#F51D2C"></stop>
        </linearGradient>
      </defs>
      <g fill="none" fillRule="evenodd" stroke="none" strokeWidth="1">
        <g transform="translate(-20 -20)">
          <g transform="translate(20 20)">
            <g>
              <g fillRule="nonzero">
                <g>
                  <path
                    fill="url(#linearGradient-1)"
                    d="M91.588 4.177L4.18 91.513a11.981 11.981 0 000 16.974l87.408 87.336a12.005 12.005 0 0016.989 0l36.648-36.618c4.209-4.205 4.209-11.023 0-15.228-4.208-4.205-11.031-4.205-15.24 0l-27.783 27.76c-1.17 1.169-2.945 1.169-4.114 0l-69.802-69.744c-1.17-1.169-1.17-2.942 0-4.11l69.802-69.745c1.17-1.169 2.944-1.169 4.114 0l27.783 27.76c4.209 4.205 11.032 4.205 15.24 0 4.209-4.205 4.209-11.022 0-15.227L108.581 4.056c-4.719-4.594-12.312-4.557-16.993.12z"
                  ></path>
                  <path
                    fill="url(#linearGradient-2)"
                    d="M91.588 4.177L4.18 91.513a11.981 11.981 0 000 16.974l87.408 87.336a12.005 12.005 0 0016.989 0l36.648-36.618c4.209-4.205 4.209-11.023 0-15.228-4.208-4.205-11.031-4.205-15.24 0l-27.783 27.76c-1.17 1.169-2.945 1.169-4.114 0l-69.802-69.744c-1.17-1.169-1.17-2.942 0-4.11l69.802-69.745c2.912-2.51 7.664-7.596 14.642-8.786 5.186-.883 10.855 1.062 17.009 5.837L108.58 4.056c-4.719-4.594-12.312-4.557-16.993.12z"
                  ></path>
                </g>
                <path
                  fill="url(#linearGradient-3)"
                  d="M153.686 135.855c4.208 4.205 11.031 4.205 15.24 0l27.034-27.012c4.7-4.696 4.7-12.28 0-16.974l-27.27-27.15c-4.218-4.2-11.043-4.195-15.254.013-4.209 4.205-4.209 11.022 0 15.227l18.418 18.403c1.17 1.169 1.17 2.943 0 4.111l-18.168 18.154c-4.209 4.205-4.209 11.023 0 15.228z"
                ></path>
              </g>
              <ellipse
                cx="100.519"
                cy="100.437"
                fill="url(#linearGradient-4)"
                rx="23.6"
                ry="23.581"
              ></ellipse>
            </g>
          </g>
        </g>
      </g>
    </svg>
  );
};

export default LogoIcon;

--- END: src/.umi/plugin-layout/Logo.tsx ---

--- START: src/.umi/plugin-layout/rightRender.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import { Avatar, version, Dropdown, Menu, Spin } from 'antd';
import { LogoutOutlined } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@ant-design+icons@4.8.3_react-dom@18.3.1_react@18.3.1/node_modules/@ant-design/icons';

export function getRightRenderContent (opts: {
   runtimeConfig: any,
   loading: boolean,
   initialState: any,
   setInitialState: any,
 }) {
  if (opts.runtimeConfig.rightRender) {
    return opts.runtimeConfig.rightRender(
      opts.initialState,
      opts.setInitialState,
      opts.runtimeConfig,
    );
  }

  const showAvatar = opts.initialState?.avatar || opts.initialState?.name || opts.runtimeConfig.logout;
  const disableAvatarImg = opts.initialState?.avatar === false;
  const nameClassName = disableAvatarImg ? 'umi-plugin-layout-name umi-plugin-layout-hide-avatar-img' : 'umi-plugin-layout-name';
  const avatar =
    showAvatar ? (
      <span className="umi-plugin-layout-action">
        {!disableAvatarImg ?
          (
            <Avatar
              size="small"
              className="umi-plugin-layout-avatar"
              src={
                opts.initialState?.avatar ||
                "https://gw.alipayobjects.com/zos/antfincdn/XAosXuNZyF/BiazfanxmamNRoxxVxka.png"
              }
              alt="avatar"
            />
          ) : null}
        <span className={nameClassName}>{opts.initialState?.name}</span>
      </span>
    ) : null;


  if (opts.loading) {
    return (
      <div className="umi-plugin-layout-right">
        <Spin size="small" style={ { marginLeft: 8, marginRight: 8 } } />
      </div>
    );
  }

  // 如果没有打开Locale，并且头像为空就取消掉这个返回的内容
    if(!avatar) return null;

  const langMenu = {
    className: "umi-plugin-layout-menu",
    selectedKeys: [],
    items: [
      {
        key: "logout",
        label: (
          <>
            <LogoutOutlined />
            退出登录
          </>
        ),
        onClick: () => {
          opts?.runtimeConfig?.logout?.(opts.initialState);
        },
      },
    ],
  };
  // antd@5 和  4.24 之后推荐使用 menu，性能更好
  let dropdownProps;
  if (version.startsWith("5.") || version.startsWith("4.24.")) {
    dropdownProps = { menu: langMenu };
  } else if (version.startsWith("3.")) {
    dropdownProps = {
      overlay: (
        <Menu>
          {langMenu.items.map((item) => (
            <Menu.Item key={item.key} onClick={item.onClick}>
              {item.label}
            </Menu.Item>
          ))}
        </Menu>
      ),
    };
  } else { // 需要 antd 4.20.0 以上版本
    dropdownProps = { overlay: <Menu {...langMenu} /> };
  }



  return (
    <div className="umi-plugin-layout-right anticon">
      {opts.runtimeConfig.logout ? (
        <Dropdown {...dropdownProps} overlayClassName="umi-plugin-layout-container">
          {avatar}
        </Dropdown>
      ) : (
        avatar
      )}
    </div>
  );
}

--- END: src/.umi/plugin-layout/rightRender.tsx ---

--- START: src/.umi/plugin-layout/runtime.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import icons from './icons';


function formatIcon(name: string) {
  return name
    .replace(name[0], name[0].toUpperCase())
    .replace(/-(w)/g, function(all, letter) {
      return letter.toUpperCase();
    });
}

export function patchRoutes({ routes }) {
  Object.keys(routes).forEach(key => {
    const { icon } = routes[key];
    if (icon && typeof icon === 'string') {
      

      const upperIcon = formatIcon(icon);
      if (icons[upperIcon] || icons[upperIcon + 'Outlined']) {
        routes[key].icon = React.createElement(icons[upperIcon] || icons[upperIcon + 'Outlined']);
      }
    }
  });
}

--- END: src/.umi/plugin-layout/runtime.tsx ---

--- START: src/.umi/plugin-layout/runtimeConfig.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import type { RunTimeLayoutConfig } from './types.d';
export interface IRuntimeConfig {
  layout?: RunTimeLayoutConfig
}

--- END: src/.umi/plugin-layout/runtimeConfig.d.ts ---

--- START: src/.umi/plugin-layout/types.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
/// <reference types="D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/@ant-design/pro-components" />


    import type { ProLayoutProps, HeaderProps } from "D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/@ant-design/pro-components";
    import type InitialStateType from '@@/plugin-initialState/@@initialState';
           type InitDataType = ReturnType<typeof InitialStateType>;
        

    import type { IConfigFromPlugins } from '@@/core/pluginConfig';

    export type RunTimeLayoutConfig = (initData: InitDataType) => Omit<
      ProLayoutProps,
      'rightContentRender'
    > & {
      childrenRender?: (dom: JSX.Element, props: ProLayoutProps) => React.ReactNode;
      unAccessible?: JSX.Element;
      noFound?: JSX.Element;
      logout?: (initialState: InitDataType['initialState']) => Promise<void> | void;
      rightContentRender?: ((
        headerProps: HeaderProps,
        dom: JSX.Element,
        props: {
          userConfig: IConfigFromPlugins['layout'];
          runtimeConfig: RunTimeLayoutConfig;
          loading: InitDataType['loading'];
          initialState: InitDataType['initialState'];
          setInitialState: InitDataType['setInitialState'];
        },
      ) => JSX.Element) | false;
      rightRender?: (
        initialState: InitDataType['initialState'],
        setInitialState: InitDataType['setInitialState'],
        runtimeConfig: RunTimeLayoutConfig,
      ) => JSX.Element;
    };

--- END: src/.umi/plugin-layout/types.d.ts ---

--- START: src/.umi/plugin-model/index.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
// @ts-ignore
import type { models as rawModels } from '@@/plugin-model/model';
import isEqual from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/fast-deep-equal@3.1.3/node_modules/fast-deep-equal/index.js';
import React, { useContext, useEffect, useMemo, useRef, useState } from 'react';

type Models = typeof rawModels;

type GetNamespaces<M> = {
  [K in keyof M]: M[K] extends { namespace: string }
    ? M[K]['namespace']
    : never;
}[keyof M];

type Namespaces = GetNamespaces<Models>;

// @ts-ignore
const Context = React.createContext<{ dispatcher: Dispatcher }>(null);

class Dispatcher {
  callbacks: Record<Namespaces, Set<Function>> = {};
  data: Record<Namespaces, unknown> = {};
  update = (namespace: Namespaces) => {
    if (this.callbacks[namespace]) {
      this.callbacks[namespace].forEach((cb) => {
        try {
          const data = this.data[namespace];
          cb(data);
        } catch (e) {
          cb(undefined);
        }
      });
    }
  };
}

interface ExecutorProps {
  hook: () => any;
  onUpdate: (val: any) => void;
  namespace: string;
}

function Executor(props: ExecutorProps) {
  const { hook, onUpdate, namespace } = props;

  const updateRef = useRef(onUpdate);
  const initialLoad = useRef(false);

  let data: any;
  try {
    data = hook();
  } catch (e) {
    console.error(
      `plugin-model: Invoking '${namespace || 'unknown'}' model failed:`,
      e,
    );
  }

  // 首次执行时立刻返回初始值
  useMemo(() => {
    updateRef.current(data);
  }, []);

  // React 16.13 后 update 函数用 useEffect 包裹
  useEffect(() => {
    if (initialLoad.current) {
      updateRef.current(data);
    } else {
      initialLoad.current = true;
    }
  });

  return null;
}

const dispatcher = new Dispatcher();

export function Provider(props: {
  models: Record<string, any>;
  children: React.ReactNode;
}) {
  return (
    <Context.Provider value={{ dispatcher }}>
      {Object.keys(props.models).map((namespace) => {
        return (
          <Executor
            key={namespace}
            hook={props.models[namespace]}
            namespace={namespace}
            onUpdate={(val) => {
              dispatcher.data[namespace] = val;
              dispatcher.update(namespace);
            }}
          />
        );
      })}
      {props.children}
    </Context.Provider>
  );
}

type GetModelByNamespace<M, N> = {
  [K in keyof M]: M[K] extends { namespace: string; model: unknown }
    ? M[K]['namespace'] extends N
      ? M[K]['model'] extends (...args: any) => any
        ? ReturnType<M[K]['model']>
        : never
      : never
    : never;
}[keyof M];

type Model<N> = GetModelByNamespace<Models, N>;
type Selector<N, S> = (model: Model<N>) => S;

type SelectedModel<N, T> = T extends (...args: any) => any
  ? ReturnType<NonNullable<T>>
  : Model<N>;

export function useModel<N extends Namespaces>(namespace: N): Model<N>;

export function useModel<N extends Namespaces, S>(
  namespace: N,
  selector: Selector<N, S>,
): SelectedModel<N, typeof selector>;

export function useModel<N extends Namespaces, S>(
  namespace: N,
  selector?: Selector<N, S>,
): SelectedModel<N, typeof selector> {
  const { dispatcher } = useContext<{ dispatcher: Dispatcher }>(Context);
  const selectorRef = useRef(selector);
  selectorRef.current = selector;
  const [state, setState] = useState(() =>
    selectorRef.current
      ? selectorRef.current(dispatcher.data[namespace])
      : dispatcher.data[namespace],
  );
  const stateRef = useRef<any>(state);
  stateRef.current = state;

  const isMount = useRef(false);
  useEffect(() => {
    isMount.current = true;
    return () => {
      isMount.current = false;
    };
  }, []);

  useEffect(() => {
    const handler = (data: any) => {
      if (!isMount.current) {
        // 如果 handler 执行过程中，组件被卸载了，则强制更新全局 data
        // TODO: 需要加个 example 测试
        setTimeout(() => {
          dispatcher.data[namespace] = data;
          dispatcher.update(namespace);
        });
      } else {
        const currentState = selectorRef.current
          ? selectorRef.current(data)
          : data;
        const previousState = stateRef.current;
        if (!isEqual(currentState, previousState)) {
          // 避免 currentState 拿到的数据是老的，从而导致 isEqual 比对逻辑有问题
          stateRef.current = currentState;
          setState(currentState);
        }
      }
    };

    dispatcher.callbacks[namespace] ||= new Set() as any; // rawModels 是 umi 动态生成的文件，导致前面 callback[namespace] 的类型无法推导出来，所以用 as any 来忽略掉
    dispatcher.callbacks[namespace].add(handler);
    dispatcher.update(namespace);

    return () => {
      dispatcher.callbacks[namespace].delete(handler);
    };
  }, [namespace]);

  return state;
}

--- END: src/.umi/plugin-model/index.tsx ---

--- START: src/.umi/plugin-model/model.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import model_1 from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi/plugin-initialState/@@initialState';

export const models = {
model_1: { namespace: '@@initialState', model: model_1 },
} as const

--- END: src/.umi/plugin-model/model.ts ---

--- START: src/.umi/plugin-model/runtime.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React  from 'react';
import { Provider } from './';
import { models as rawModels } from './model';

function ProviderWrapper(props: any) {
  const models = React.useMemo(() => {
    return Object.keys(rawModels).reduce((memo, key) => {
      memo[rawModels[key].namespace] = rawModels[key].model;
      return memo;
    }, {});
  }, []);
  return <Provider models={models} {...props}>{ props.children }</Provider>
}

export function dataflowProvider(container, opts) {
  return <ProviderWrapper {...opts}>{ container }</ProviderWrapper>;
}

--- END: src/.umi/plugin-model/runtime.tsx ---

--- START: src/.umi/plugin-moment2dayjs/runtime.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import dayjs from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs';
import antdPlugin from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/antd-dayjs-webpack-plugin@1.0.6_dayjs@1.11.13/node_modules/antd-dayjs-webpack-plugin/src/antd-plugin.js';

import isSameOrBefore from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/isSameOrBefore';
import isSameOrAfter from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/isSameOrAfter';
import advancedFormat from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/advancedFormat';
import customParseFormat from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/customParseFormat';
import weekday from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/weekday';
import weekYear from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/weekYear';
import weekOfYear from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/weekOfYear';
import isMoment from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/isMoment';
import localeData from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/localeData';
import localizedFormat from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/localizedFormat';
import duration from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/duration';

dayjs.extend(isSameOrBefore);
dayjs.extend(isSameOrAfter);
dayjs.extend(advancedFormat);
dayjs.extend(customParseFormat);
dayjs.extend(weekday);
dayjs.extend(weekYear);
dayjs.extend(weekOfYear);
dayjs.extend(isMoment);
dayjs.extend(localeData);
dayjs.extend(localizedFormat);
dayjs.extend(duration);

dayjs.extend(antdPlugin);

--- END: src/.umi/plugin-moment2dayjs/runtime.tsx ---

--- START: src/.umi/plugin-openapi/openapi.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
// This file is generated by Umi automatically
      // DO NOT CHANGE IT MANUALLY!
      import { useEffect, useState } from 'react';
      import { SwaggerUIBundle } from 'swagger-ui-dist';
      import 'swagger-ui-dist/swagger-ui.css';
      const App = () => {
        const [value, setValue] = useState("backend" );
        useEffect(() => {
          SwaggerUIBundle({
            url: `/umi-plugins_${value}.json`,
            dom_id: '#swagger-ui',
          });
        }, [value]);

        return (
          <div
            style={{
              padding: 24,
            }}
          >
            <select
              style={{
                position: "fixed",
                right: "16px",
                top: "8px",
              }}
              onChange={(e) => setValue(e.target.value)}
            >
              <option value="backend">backend</option>
            </select>
            <div id="swagger-ui" />
          </div>
        );
      };
      export default App;

--- END: src/.umi/plugin-openapi/openapi.tsx ---

--- START: src/.umi/plugin-request/index.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
export {
  useRequest,
  UseRequestProvider,
  request,
  getRequestInstance,
} from './request';

--- END: src/.umi/plugin-request/index.ts ---

--- START: src/.umi/plugin-request/request.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import axios, {
  type AxiosInstance,
  type AxiosRequestConfig,
  type AxiosResponse,
  type AxiosError,
} from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/axios@0.27.2/node_modules/axios';
import useUmiRequest, { UseRequestProvider } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@ahooksjs+use-request@2.8.15_react@18.3.1/node_modules/@ahooksjs/use-request';
import { ApplyPluginsType } from 'umi';
import { getPluginManager } from '../core/plugin';

import {
  BaseOptions,
  BasePaginatedOptions,
  BaseResult,
  CombineService,
  LoadMoreFormatReturn,
  LoadMoreOptions,
  LoadMoreOptionsWithFormat,
  LoadMoreParams,
  LoadMoreResult,
  OptionsWithFormat,
  PaginatedFormatReturn,
  PaginatedOptionsWithFormat,
  PaginatedParams,
  PaginatedResult,
} from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@ahooksjs+use-request@2.8.15_react@18.3.1/node_modules/@ahooksjs/use-request/es/types';

type ResultWithData< T = any > = { data?: T; [key: string]: any };

function useRequest<
  R = any,
  P extends any[] = any,
  U = any,
  UU extends U = any,
>(
  service: CombineService<R, P>,
  options: OptionsWithFormat<R, P, U, UU>,
): BaseResult<U, P>;
function useRequest<R extends ResultWithData = any, P extends any[] = any>(
  service: CombineService<R, P>,
  options?: BaseOptions<R['data'], P>,
): BaseResult<R['data'], P>;
function useRequest<R extends LoadMoreFormatReturn = any, RR = any>(
  service: CombineService<RR, LoadMoreParams<R>>,
  options: LoadMoreOptionsWithFormat<R, RR>,
): LoadMoreResult<R>;
function useRequest<
  R extends ResultWithData<LoadMoreFormatReturn | any> = any,
  RR extends R = any,
>(
  service: CombineService<R, LoadMoreParams<R['data']>>,
  options: LoadMoreOptions<RR['data']>,
): LoadMoreResult<R['data']>;

function useRequest<R = any, Item = any, U extends Item = any>(
  service: CombineService<R, PaginatedParams>,
  options: PaginatedOptionsWithFormat<R, Item, U>,
): PaginatedResult<Item>;
function useRequest<Item = any, U extends Item = any>(
  service: CombineService<
    ResultWithData<PaginatedFormatReturn<Item>>,
    PaginatedParams
  >,
  options: BasePaginatedOptions<U>,
): PaginatedResult<Item>;
function useRequest(service: any, options: any = {}) {
  return useUmiRequest(service, {
    formatResult: result => result?.data,
    requestMethod: (requestOptions: any) => {
      if (typeof requestOptions === 'string') {
        return request(requestOptions);
      }
      if (typeof requestOptions === 'object') {
        const { url, ...rest } = requestOptions;
        return request(url, rest);
      }
      throw new Error('request options error');
    },
    ...options,
  });
}

// request 方法 opts 参数的接口
interface IRequestOptions extends AxiosRequestConfig {
  skipErrorHandler?: boolean;
  requestInterceptors?: IRequestInterceptorTuple[];
  responseInterceptors?: IResponseInterceptorTuple[];
  [key: string]: any;
}

interface IRequestOptionsWithResponse extends IRequestOptions {
  getResponse: true;
}

interface IRequestOptionsWithoutResponse extends IRequestOptions{
  getResponse: false;
}

interface IRequest{
   <T = any>(url: string, opts: IRequestOptionsWithResponse): Promise<AxiosResponse<T>>;
   <T = any>(url: string, opts: IRequestOptionsWithoutResponse): Promise<T>;
   <T = any>(url: string, opts: IRequestOptions): Promise<T>; // getResponse 默认是 false， 因此不提供该参数时，只返回 data
   <T = any>(url: string): Promise<T>;  // 不提供 opts 时，默认使用 'GET' method，并且默认返回 data
}

type RequestError = AxiosError | Error

interface IErrorHandler {
  (error: RequestError, opts: IRequestOptions): void;
}
type WithPromise<T> = T | Promise<T>;
type IRequestInterceptorAxios = (config: IRequestOptions) => WithPromise<IRequestOptions>;
type IRequestInterceptorUmiRequest = (url: string, config : IRequestOptions) => WithPromise<{ url: string, options: IRequestOptions }>;
type IRequestInterceptor = IRequestInterceptorAxios | IRequestInterceptorUmiRequest;
type IErrorInterceptor = (error: Error) => Promise<Error>;
type IResponseInterceptor = <T = any>(response : AxiosResponse<T>) => WithPromise<AxiosResponse<T>> ;
type IRequestInterceptorTuple = [IRequestInterceptor , IErrorInterceptor] | [IRequestInterceptor] | IRequestInterceptor
type IResponseInterceptorTuple = [IResponseInterceptor, IErrorInterceptor] | [IResponseInterceptor] | IResponseInterceptor

export interface RequestConfig<T = any> extends AxiosRequestConfig {
  errorConfig?: {
    errorHandler?: IErrorHandler;
    errorThrower?: ( res: T ) => void
  };
  requestInterceptors?: IRequestInterceptorTuple[];
  responseInterceptors?: IResponseInterceptorTuple[];
}

let requestInstance: AxiosInstance;
let config: RequestConfig;
const getConfig = (): RequestConfig => {
  if (config) return config;
  config = getPluginManager().applyPlugins({
    key: 'request',
    type: ApplyPluginsType.modify,
    initialValue: {},
  });
  return config;
};

const getRequestInstance = (): AxiosInstance => {
  if (requestInstance) return requestInstance;
  const config = getConfig();
  requestInstance = axios.create(config);

  config?.requestInterceptors?.forEach((interceptor) => {
    if(interceptor instanceof Array){
      requestInstance.interceptors.request.use(async (config) => {
        const { url } = config;
        if(interceptor[0].length === 2){
          const { url: newUrl, options } = await interceptor[0](url, config);
          return { ...options, url: newUrl };
        }
        return interceptor[0](config);
      }, interceptor[1]);
    } else {
      requestInstance.interceptors.request.use(async (config) => {
        const { url } = config;
        if(interceptor.length === 2){
          const { url: newUrl, options } = await interceptor(url, config);
          return { ...options, url: newUrl };
        }
        return interceptor(config);
      })
    }
  });

  config?.responseInterceptors?.forEach((interceptor) => {
    interceptor instanceof Array ?
      requestInstance.interceptors.response.use(interceptor[0], interceptor[1]):
       requestInstance.interceptors.response.use(interceptor);
  });

  // 当响应的数据 success 是 false 的时候，抛出 error 以供 errorHandler 处理。
  requestInstance.interceptors.response.use((response) => {
    const { data } = response;
    if(data?.success === false && config?.errorConfig?.errorThrower){
      config.errorConfig.errorThrower(data);
    }
    return response;
  })
  return requestInstance;
};

const request: IRequest = (url: string, opts: any = { method: 'GET' }) => {
  const requestInstance = getRequestInstance();
  const config = getConfig();
  const { getResponse = false, requestInterceptors, responseInterceptors } = opts;
  const requestInterceptorsToEject = requestInterceptors?.map((interceptor) => {
    if(interceptor instanceof Array){
      return requestInstance.interceptors.request.use(async (config) => {
        const { url } = config;
        if(interceptor[0].length === 2){
          const { url: newUrl, options } = await interceptor[0](url, config);
          return { ...options, url: newUrl };
        }
        return interceptor[0](config);
      }, interceptor[1]);
    } else {
      return requestInstance.interceptors.request.use(async (config) => {
        const { url } = config;
        if(interceptor.length === 2){
          const { url: newUrl, options } = await interceptor(url, config);
          return { ...options, url: newUrl };
        }
        return interceptor(config);
      })
    }
    });
  const responseInterceptorsToEject = responseInterceptors?.map((interceptor) => {
    return interceptor instanceof Array ?
      requestInstance.interceptors.response.use(interceptor[0], interceptor[1]):
       requestInstance.interceptors.response.use(interceptor);
    });
  return new Promise((resolve, reject)=>{
    requestInstance
      .request({...opts, url})
      .then((res)=>{
        requestInterceptorsToEject?.forEach((interceptor) => {
          requestInstance.interceptors.request.eject(interceptor);
        });
        responseInterceptorsToEject?.forEach((interceptor) => {
          requestInstance.interceptors.response.eject(interceptor);
        });
        resolve(getResponse ? res : res.data);
      })
      .catch((error)=>{
        requestInterceptorsToEject?.forEach((interceptor) => {
          requestInstance.interceptors.request.eject(interceptor);
        });
        responseInterceptorsToEject?.forEach((interceptor) => {
          requestInstance.interceptors.response.eject(interceptor);
        });
        try {
          const handler =
            config?.errorConfig?.errorHandler;
          if(handler)
            handler(error, opts, config);
        } catch (e) {
          reject(e);
        }
        reject(error);
      })
  })
}

export {
  useRequest,
  UseRequestProvider,
  request,
  getRequestInstance,
};

export type {
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError,
  RequestError,
  IRequestInterceptorAxios as RequestInterceptorAxios,
  IRequestInterceptorUmiRequest as RequestInterceptorUmiRequest,
  IRequestInterceptor as RequestInterceptor,
  IErrorInterceptor as ErrorInterceptor,
  IResponseInterceptor as ResponseInterceptor,
  IRequestOptions as RequestOptions,
  IRequest as Request,
};

--- END: src/.umi/plugin-request/request.ts ---

--- START: src/.umi/plugin-request/runtimeConfig.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import type { RequestConfig } from './types.d'
export type IRuntimeConfig = {
  request?: RequestConfig
};

--- END: src/.umi/plugin-request/runtimeConfig.d.ts ---

--- START: src/.umi/plugin-request/types.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
export type {
  RequestConfig,
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError,
  RequestError,
  RequestInterceptorAxios,
  RequestInterceptorUmiRequest,
  RequestInterceptor,
  ErrorInterceptor,
  ResponseInterceptor,
  RequestOptions,
  Request } from './request';

--- END: src/.umi/plugin-request/types.d.ts ---

--- START: src/.umi-production/exports.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
// defineApp
export { defineApp } from './core/defineApp'
export type { RuntimeConfig } from './core/defineApp'
// plugins
export { Access, useAccess, useAccessMarkedRoutes } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-access';
export { Provider, useModel } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-model';
export { useRequest, UseRequestProvider, request, getRequestInstance } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-request';
// plugins types.d.ts
export * from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-access/types.d';
export * from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-antd/types.d';
export * from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-layout/types.d';
export * from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-request/types.d';
// @umijs/renderer-*
export { createBrowserHistory, createHashHistory, createMemoryHistory, Helmet, HelmetProvider, createSearchParams, generatePath, matchPath, matchRoutes, Navigate, NavLink, Outlet, resolvePath, useLocation, useMatch, useNavigate, useOutlet, useOutletContext, useParams, useResolvedPath, useRoutes, useSearchParams, useAppData, useClientLoaderData, useLoaderData, useRouteProps, useSelectedRoutes, useServerLoaderData, renderClient, __getRoot, Link, useRouteData, __useFetcher, withRouter } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@umijs+renderer-react@4.3.3_126f6425b550ad73689e2dc68527f8ee/node_modules/@umijs/renderer-react';
export type { History, ClientLoader } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@umijs+renderer-react@4.3.3_126f6425b550ad73689e2dc68527f8ee/node_modules/@umijs/renderer-react'
// umi/client/client/plugin
export { ApplyPluginsType, PluginManager } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/umi@4.3.31_@babel+core@7.26_d89a7b73138333e2a6e26c68365f144c/node_modules/umi/client/client/plugin.js';
export { history, createHistory } from './core/history';
export { terminal } from './core/terminal';
// react ssr
export const useServerInsertedHTML: Function = () => {};

--- END: src/.umi-production/exports.ts ---

--- START: src/.umi-production/testBrowser.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React, { useEffect, useState } from 'react';
import { ApplyPluginsType } from 'umi';
import { renderClient, RenderClientOpts } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@umijs+renderer-react@4.3.3_126f6425b550ad73689e2dc68527f8ee/node_modules/@umijs/renderer-react';
import { createHistory } from './core/history';
import { createPluginManager } from './core/plugin';
import { getRoutes } from './core/route';
import type { Location } from 'history';


import 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/global.less';
import 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/global.tsx';
import 'antd/dist/reset.css';
const publicPath = '/';
const runtimePublicPath = false;

type TestBrowserProps = {
  location?: Partial<Location>;
  historyRef?: React.MutableRefObject<Location>;
};

export function TestBrowser(props: TestBrowserProps) {
  const pluginManager = createPluginManager();
  const [context, setContext] = useState<RenderClientOpts | undefined>(
    undefined
  );
  useEffect(() => {
    const genContext = async () => {
      const { routes, routeComponents } = await getRoutes(pluginManager);
      // allow user to extend routes
      await pluginManager.applyPlugins({
        key: 'patchRoutes',
        type: ApplyPluginsType.event,
        args: {
          routes,
          routeComponents,
        },
      });
      const contextOpts = pluginManager.applyPlugins({
        key: 'modifyContextOpts',
        type: ApplyPluginsType.modify,
        initialValue: {},
      });
      const basename = contextOpts.basename || '/';
      const history = createHistory({
        type: 'memory',
        basename,
      });
      const context = {
        routes,
        routeComponents,
        pluginManager,
        rootElement: contextOpts.rootElement || document.getElementById('root'),
        publicPath,
        runtimePublicPath,
        history,
        basename,
        components: true,
      };
      const modifiedContext = pluginManager.applyPlugins({
        key: 'modifyClientRenderOpts',
        type: ApplyPluginsType.modify,
        initialValue: context,
      });
      return modifiedContext;
    };
    genContext().then((context) => {
      setContext(context);
      if (props.location) {
        context?.history?.push(props.location);
      }
      if (props.historyRef) {
        props.historyRef.current = context?.history;
      }
    });
  }, []);

  if (context === undefined) {
    return <div id="loading" />;
  }

  const Children = renderClient(context);
  return (
    <React.Fragment>
      <Children />
    </React.Fragment>
  );
}

--- END: src/.umi-production/testBrowser.tsx ---

--- START: src/.umi-production/typings.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
type CSSModuleClasses = { readonly [key: string]: string }
declare module '*.css' {
  const classes: CSSModuleClasses
  export default classes
}
declare module '*.scss' {
  const classes: CSSModuleClasses
  export default classes
}
declare module '*.sass' {
  const classes: CSSModuleClasses
  export default classes
}
declare module '*.less' {
  const classes: CSSModuleClasses
  export default classes
}
declare module '*.styl' {
  const classes: CSSModuleClasses
  export default classes
}
declare module '*.stylus' {
  const classes: CSSModuleClasses
  export default classes
}

// images
declare module '*.jpg' {
  const src: string
  export default src
}
declare module '*.jpeg' {
  const src: string
  export default src
}
declare module '*.png' {
  const src: string
  export default src
}
declare module '*.gif' {
  const src: string
  export default src
}
declare module '*.svg' {
  import * as React from 'react';
  export const ReactComponent: React.FunctionComponent<React.SVGProps<
  SVGSVGElement
  > & { title?: string }>;

  const src: string
  export default src
}
declare module '*.ico' {
  const src: string
  export default src
}
declare module '*.webp' {
  const src: string
  export default src
}
declare module '*.avif' {
  const src: string
  export default src
}

// media
declare module '*.mp4' {
  const src: string
  export default src
}
declare module '*.webm' {
  const src: string
  export default src
}
declare module '*.ogg' {
  const src: string
  export default src
}
declare module '*.mp3' {
  const src: string
  export default src
}
declare module '*.wav' {
  const src: string
  export default src
}
declare module '*.flac' {
  const src: string
  export default src
}
declare module '*.aac' {
  const src: string
  export default src
}

// fonts
declare module '*.woff' {
  const src: string
  export default src
}
declare module '*.woff2' {
  const src: string
  export default src
}
declare module '*.eot' {
  const src: string
  export default src
}
declare module '*.ttf' {
  const src: string
  export default src
}
declare module '*.otf' {
  const src: string
  export default src
}

// other
declare module '*.wasm' {
  const initWasm: (options: WebAssembly.Imports) => Promise<WebAssembly.Exports>
  export default initWasm
}
declare module '*.webmanifest' {
  const src: string
  export default src
}
declare module '*.pdf' {
  const src: string
  export default src
}
declare module '*.txt' {
  const src: string
  export default src
}

--- END: src/.umi-production/typings.d.ts ---

--- START: src/.umi-production/umi.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import './core/polyfill';
import 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/global.less';
import 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/global.tsx';
import 'antd/dist/reset.css';
import { renderClient } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@umijs+renderer-react@4.3.3_126f6425b550ad73689e2dc68527f8ee/node_modules/@umijs/renderer-react';
import { getRoutes } from './core/route';
import { createPluginManager } from './core/plugin';
import { createHistory } from './core/history';
import { ApplyPluginsType } from 'umi';


const publicPath = "/";
const runtimePublicPath = false;

async function render() {
  const pluginManager = createPluginManager();
  const { routes, routeComponents } = await getRoutes(pluginManager);

  // allow user to extend routes
  await pluginManager.applyPlugins({
    key: 'patchRoutes',
    type: ApplyPluginsType.event,
    args: {
      routes,
      routeComponents,
    },
  });

  const contextOpts = pluginManager.applyPlugins({
    key: 'modifyContextOpts',
    type: ApplyPluginsType.modify,
    initialValue: {},
  });

  const basename = contextOpts.basename || '/';
  const historyType = contextOpts.historyType || 'browser';

  const history = createHistory({
    type: historyType,
    basename,
    ...contextOpts.historyOpts,
  });

  return (pluginManager.applyPlugins({
    key: 'render',
    type: ApplyPluginsType.compose,
    initialValue() {
      const context = {
        routes,
        routeComponents,
        pluginManager,
        mountElementId: 'root',
        rootElement: contextOpts.rootElement || document.getElementById('root'),
        publicPath,
        runtimePublicPath,
        history,
        historyType,
        basename,
        __INTERNAL_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {"pureApp":false,"pureHtml":false},
        callback: contextOpts.callback,
      };
      const modifiedContext = pluginManager.applyPlugins({
        key: 'modifyClientRenderOpts',
        type: ApplyPluginsType.modify,
        initialValue: context,
      });
      return renderClient(modifiedContext);
    },
  }))();
}

import './plugin-moment2dayjs/runtime.tsx'
render();

    if (typeof window !== 'undefined') {
      window.g_umi = {
        version: '4.3.31',
      };
    }

--- END: src/.umi-production/umi.ts ---

--- START: src/.umi-production/core/defineApp.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import type { IRuntimeConfig as Plugin0 } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-antd/runtimeConfig.d'
import type { IRuntimeConfig as Plugin1 } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-initialState/runtimeConfig.d'
import type { IRuntimeConfig as Plugin2 } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-layout/runtimeConfig.d'
import type { IRuntimeConfig as Plugin3 } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-request/runtimeConfig.d'
interface IDefaultRuntimeConfig {
  onRouteChange?: (props: { routes: any, clientRoutes: any, location: any, action: any, isFirst: boolean }) => void;
  patchRoutes?: (props: { routes: any }) => void;
  patchClientRoutes?: (props: { routes: any }) => void;
  render?: (oldRender: () => void) => void;
  rootContainer?: (lastRootContainer: JSX.Element, args?: any) => void;
  [key: string]: any;
}
export type RuntimeConfig = IDefaultRuntimeConfig & Plugin0 & Plugin1 & Plugin2 & Plugin3

export function defineApp(config: RuntimeConfig): RuntimeConfig {
  return config;
}

--- END: src/.umi-production/core/defineApp.ts ---

--- START: src/.umi-production/core/EmptyRoute.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import { Outlet, useOutletContext } from 'umi';
export default function EmptyRoute() {
  const context = useOutletContext();
  return <Outlet context={context} />;
}

--- END: src/.umi-production/core/EmptyRoute.tsx ---

--- START: src/.umi-production/core/helmet.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import { HelmetProvider } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@umijs+renderer-react@4.3.3_126f6425b550ad73689e2dc68527f8ee/node_modules/@umijs/renderer-react';
import { context } from './helmetContext';

export const innerProvider = (container) => {
  return React.createElement(HelmetProvider, { context }, container);
}

--- END: src/.umi-production/core/helmet.ts ---

--- START: src/.umi-production/core/helmetContext.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
export const context = {};

--- END: src/.umi-production/core/helmetContext.ts ---

--- START: src/.umi-production/core/history.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import { createHashHistory, createMemoryHistory, createBrowserHistory } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@umijs+renderer-react@4.3.3_126f6425b550ad73689e2dc68527f8ee/node_modules/@umijs/renderer-react';
import type { UmiHistory } from './historyIntelli';

let history: UmiHistory;
let basename: string = '/';
export function createHistory(opts: any) {
  let h;
  if (opts.type === 'hash') {
    h = createHashHistory();
  } else if (opts.type === 'memory') {
    h = createMemoryHistory(opts);
  } else {
    h = createBrowserHistory();
  }
  if (opts.basename) {
    basename = opts.basename;
  }


  history = {
    ...h,
    push(to, state) {
      h.push(patchTo(to, h), state);
    },
    replace(to, state) {
      h.replace(patchTo(to, h), state);
    },
    get location() {
      return h.location;
    },
    get action() {
      return h.action;
    }
  }

  return h;
}

export function setHistory(h: UmiHistory) {
  if (h) {
    history = h;
  }
}

// Patch `to` to support basename
// Refs:
// https://github.com/remix-run/history/blob/3e9dab4/packages/history/index.ts#L484
// https://github.com/remix-run/history/blob/dev/docs/api-reference.md#to
function patchTo(to: any, h: History) {
  if (typeof to === 'string') {
    return `${stripLastSlash(basename)}${to}`;
  } else if (typeof to === 'object') {

    const currentPathname = h.location.pathname;

    return {
      ...to,
      pathname: to.pathname? `${stripLastSlash(basename)}${to.pathname}` : currentPathname,
    };
  } else {
    throw new Error(`Unexpected to: ${to}`);
  }
}

function stripLastSlash(path) {
  return path.slice(-1) === '/' ? path.slice(0, -1) : path;
}

export { history };

--- END: src/.umi-production/core/history.ts ---

--- START: src/.umi-production/core/historyIntelli.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import { getRoutes } from './route'
import type { History } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@umijs+renderer-react@4.3.3_126f6425b550ad73689e2dc68527f8ee/node_modules/@umijs/renderer-react'

type Routes = Awaited<ReturnType<typeof getRoutes>>['routes']
type AllRoute = Routes[keyof Routes]
type IsRoot<T extends any> = 'parentId' extends keyof T ? false : true

// show `/` in not `layout / wrapper` only
type GetAllRouteWithoutLayout<Item extends AllRoute> = Item extends any
  ? 'isWrapper' extends keyof Item
    ? never
    : 'isLayout' extends keyof Item
    ? never
    : Item
  : never
type AllRouteWithoutLayout = GetAllRouteWithoutLayout<AllRoute>
type IndexRoutePathname = '/' extends AllRouteWithoutLayout['path']
  ? '/'
  : never

type GetChildrens<T extends any> = T extends any
  ? IsRoot<T> extends true
    ? never
    : T
  : never
type Childrens = GetChildrens<AllRoute>
type Root = Exclude<AllRoute, Childrens>
type AllIds = AllRoute['id']

type GetChildrensByParentId<
  Id extends AllIds,
  Item = AllRoute
> = Item extends any
  ? 'parentId' extends keyof Item
    ? Item['parentId'] extends Id
      ? Item
      : never
    : never
  : never

type RouteObject<
  Id extends AllIds,
  Item = GetChildrensByParentId<Id>
> = IsNever<Item> extends true
  ? ''
  : Item extends AllRoute
  ? {
      [Key in Item['path'] as TrimSlash<Key>]: UnionMerge<
        RouteObject<Item['id']>
      >
    }
  : never

type GetRootRouteObject<Item extends Root> = Item extends Root
  ? {
      [K in Item['path'] as TrimSlash<K>]: UnionMerge<RouteObject<Item['id']>>
    }
  : never
type MergedResult = UnionMerge<GetRootRouteObject<Root>>

// --- patch history types ---

type HistoryTo = Parameters<History['push']>['0']
type HistoryPath = Exclude<HistoryTo, string>

type UmiPathname = Path<MergedResult> | (string & {})
interface UmiPath extends HistoryPath {
  pathname: UmiPathname
}
type UmiTo = UmiPathname | UmiPath

type UmiPush = (to: UmiTo, state?: any) => void
type UmiReplace = (to: UmiTo, state?: any) => void


export interface UmiHistory extends History {
  push: UmiPush
  replace: UmiReplace
}

// --- type utils ---
type TrimLeftSlash<T extends string> = T extends `/${infer R}`
  ? TrimLeftSlash<R>
  : T
type TrimRightSlash<T extends string> = T extends `${infer R}/`
  ? TrimRightSlash<R>
  : T
type TrimSlash<T extends string> = TrimLeftSlash<TrimRightSlash<T>>

type IsNever<T> = [T] extends [never] ? true : false
type IsEqual<A, B> = (<G>() => G extends A ? 1 : 2) extends <G>() => G extends B
  ? 1
  : 2
  ? true
  : false

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never
type UnionMerge<U> = UnionToIntersection<U> extends infer O
  ? { [K in keyof O]: O[K] }
  : never

type ExcludeEmptyKey<T> = IsEqual<T, ''> extends true ? never : T

type PathConcat<
  TKey extends string,
  TValue,
  N = TrimSlash<TKey>
> = TValue extends string
  ? ExcludeEmptyKey<N>
  :
      | ExcludeEmptyKey<N>
      | `${N & string}${IsNever<ExcludeEmptyKey<N>> extends true
          ? ''
          : '/'}${UnionPath<TValue>}`

type UnionPath<T> = {
  [K in keyof T]-?: PathConcat<K & string, T[K]>
}[keyof T]

type MakeSureLeftSlash<T> = T extends any
  ? `/${TrimRightSlash<T & string>}`
  : never

// exclude `/*`, because it always at the top of the IDE tip list
type Path<T, K = UnionPath<T>> = Exclude<MakeSureLeftSlash<K>, '/*'> | IndexRoutePathname

--- END: src/.umi-production/core/historyIntelli.ts ---

--- START: src/.umi-production/core/plugin.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import * as Plugin_0 from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/app.tsx';
import * as Plugin_1 from '@@/core/helmet.ts';
import * as Plugin_2 from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-access/runtime.tsx';
import * as Plugin_3 from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-initialState/runtime.tsx';
import * as Plugin_4 from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-layout/runtime.tsx';
import * as Plugin_5 from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-model/runtime.tsx';
import { PluginManager } from 'umi';

function __defaultExport (obj) {
  if (obj.default) {
    return typeof obj.default === 'function' ? obj.default() :  obj.default
  }
  return obj;
}
export function getPlugins() {
  return [
    {
      apply: __defaultExport(Plugin_0),
      path: process.env.NODE_ENV === 'production' ? void 0 : 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/app.tsx',
    },
    {
      apply: Plugin_1,
      path: process.env.NODE_ENV === 'production' ? void 0 : '@@/core/helmet.ts',
    },
    {
      apply: Plugin_2,
      path: process.env.NODE_ENV === 'production' ? void 0 : 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-access/runtime.tsx',
    },
    {
      apply: Plugin_3,
      path: process.env.NODE_ENV === 'production' ? void 0 : 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-initialState/runtime.tsx',
    },
    {
      apply: Plugin_4,
      path: process.env.NODE_ENV === 'production' ? void 0 : 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-layout/runtime.tsx',
    },
    {
      apply: Plugin_5,
      path: process.env.NODE_ENV === 'production' ? void 0 : 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-model/runtime.tsx',
    },
  ];
}

export function getValidKeys() {
  return ['patchRoutes','patchClientRoutes','modifyContextOpts','modifyClientRenderOpts','rootContainer','innerProvider','i18nProvider','accessProvider','dataflowProvider','outerProvider','render','onRouteChange','antd','getInitialState','layout','qiankun','request',];
}

let pluginManager = null;

export function createPluginManager() {
  pluginManager = PluginManager.create({
    plugins: getPlugins(),
    validKeys: getValidKeys(),
  });


  return pluginManager;
}

export function getPluginManager() {
  return pluginManager;
}

--- END: src/.umi-production/core/plugin.ts ---

--- START: src/.umi-production/core/pluginConfig.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import { IConfigFromPluginsJoi } from "./pluginConfigJoi.d";

interface IConfigTypes {
    codeSplitting: {
    jsStrategy: "bigVendors" | "depPerChunk" | "granularChunks";
    jsStrategyOptions?: ({

} | undefined);
    cssStrategy?: ("mergeAll" | undefined);
    cssStrategyOptions?: ({

} | undefined);
};
    title: string;
    styles: Array<string | {
    src?: (string | undefined);
} | {
    content?: (string | undefined);
} | { [x: string]: any }>;
    scripts: Array<string | {
    src?: (string | undefined);
} | {
    content?: (string | undefined);
} | { [x: string]: any }>;
    routes: Array<{
    component?: (string | undefined);
    layout?: (false | undefined);
    path?: (string | undefined);
    redirect?: (string | undefined);
    routes?: IConfigTypes['routes'];
    wrappers?: (Array<string> | undefined);
} | { [x: string]: any }>;
    routeLoader: {
    moduleType: "esm" | "cjs";
};
    reactRouter5Compat: boolean | {

};
    presets: Array<string>;
    plugins: Array<string>;
    npmClient: "pnpm" | "tnpm" | "cnpm" | "yarn" | "npm";
    mountElementId: string;
    metas: Array<{
    charset?: (string | undefined);
    content?: (string | undefined);
    "http-equiv"?: (string | undefined);
    name?: (string | undefined);
} | { [x: string]: any }>;
    links: Array<{
    crossorigin?: (string | undefined);
    href?: (string | undefined);
    hreflang?: (string | undefined);
    media?: (string | undefined);
    referrerpolicy?: (string | undefined);
    rel?: (string | undefined);
    sizes?: (any | undefined);
    title?: (any | undefined);
    type?: (any | undefined);
} | { [x: string]: any }>;
    historyWithQuery: {

};
    history: {
    type: "browser" | "hash" | "memory";
};
    headScripts: Array<string | {
    src?: (string | undefined);
} | {
    content?: (string | undefined);
} | { [x: string]: any }>;
    esbuildMinifyIIFE: boolean;
    conventionRoutes: {
    base?: (string | undefined);
    exclude?: (Array<any> | undefined);
};
    conventionLayout: boolean;
    base: string;
    analyze: {

};
    writeToDisk: boolean;
    theme: { [x: string]: any };
    targets: { [x: string]: any };
    svgr: { [x: string]: any };
    svgo: { [x: string]: any } | boolean;
    stylusLoader: { [x: string]: any };
    styleLoader: { [x: string]: any };
    srcTranspilerOptions: {
    esbuild?: ({ [x: string]: any } | undefined);
    swc?: ({ [x: string]: any } | undefined);
};
    srcTranspiler: "babel" | "esbuild" | "swc";
    sassLoader: { [x: string]: any };
    runtimePublicPath: {

};
    purgeCSS: { [x: string]: any };
    publicPath: string;
    proxy: { [x: string]: any } | Array<any>;
    postcssLoader: { [x: string]: any };
    outputPath: string;
    normalCSSLoaderModules: { [x: string]: any };
    mfsu: {
    cacheDirectory?: (string | undefined);
    chainWebpack?: (((...args: any[]) => unknown) | undefined);
    esbuild?: (boolean | undefined);
    exclude?: (Array<string | any> | undefined);
    include?: (Array<string> | undefined);
    mfName?: (string | undefined);
    remoteAliases?: (Array<string> | undefined);
    remoteName?: (string | undefined);
    runtimePublicPath?: (boolean | undefined);
    shared?: ({ [x: string]: any } | undefined);
    strategy?: ("eager" | "normal" | undefined);
} | boolean;
    mdx: {
    loader?: (string | undefined);
    loaderOptions?: ({ [x: string]: any } | undefined);
};
    manifest: {
    basePath?: (string | undefined);
    fileName?: (string | undefined);
};
    lessLoader: { [x: string]: any };
    jsMinifierOptions: { [x: string]: any };
    jsMinifier: "esbuild" | "swc" | "terser" | "uglifyJs" | "none";
    inlineLimit: number;
    ignoreMomentLocale: boolean;
    https: {
    cert?: (string | undefined);
    hosts?: (Array<string> | undefined);
    http2?: (boolean | undefined);
    key?: (string | undefined);
};
    hash: boolean;
    forkTSChecker: { [x: string]: any };
    fastRefresh: boolean;
    extraPostCSSPlugins: Array<any>;
    extraBabelPresets: Array<string | Array<any>>;
    extraBabelPlugins: Array<string | Array<any>>;
    extraBabelIncludes: Array<string | any>;
    externals: { [x: string]: any } | string | ((...args: any[]) => unknown);
    esm: {

};
    devtool: "cheap-source-map" | "cheap-module-source-map" | "eval" | "eval-source-map" | "eval-cheap-source-map" | "eval-cheap-module-source-map" | "eval-nosources-cheap-source-map" | "eval-nosources-cheap-module-source-map" | "eval-nosources-source-map" | "source-map" | "hidden-source-map" | "hidden-nosources-cheap-source-map" | "hidden-nosources-cheap-module-source-map" | "hidden-nosources-source-map" | "hidden-cheap-source-map" | "hidden-cheap-module-source-map" | "inline-source-map" | "inline-cheap-source-map" | "inline-cheap-module-source-map" | "inline-nosources-cheap-source-map" | "inline-nosources-cheap-module-source-map" | "inline-nosources-source-map" | "nosources-source-map" | "nosources-cheap-source-map" | "nosources-cheap-module-source-map" | boolean;
    depTranspiler: "babel" | "esbuild" | "swc" | "none";
    define: { [x: string]: any };
    deadCode: {
    context?: (string | undefined);
    detectUnusedExport?: (boolean | undefined);
    detectUnusedFiles?: (boolean | undefined);
    exclude?: (Array<string> | undefined);
    failOnHint?: (boolean | undefined);
    patterns?: (Array<string> | undefined);
};
    cssPublicPath: string;
    cssMinifierOptions: { [x: string]: any };
    cssMinifier: "cssnano" | "esbuild" | "parcelCSS" | "none";
    cssLoaderModules: { [x: string]: any };
    cssLoader: { [x: string]: any };
    copy: Array<{
    from: string;
    to: string;
} | string>;
    checkDepCssModules?: boolean;
    cacheDirectoryPath: string;
    babelLoaderCustomize: string;
    autoprefixer: { [x: string]: any };
    autoCSSModules: boolean;
    alias: { [x: string]: any };
    crossorigin: boolean | {
    includes?: (Array<any> | undefined);
};
    esmi: {
    cdnOrigin: string;
    shimUrl?: (string | undefined);
};
    exportStatic: {
    extraRoutePaths?: (((...args: any[]) => unknown) | Array<string> | undefined);
    ignorePreRenderError?: (boolean | undefined);
};
    favicons: Array<string>;
    helmet: boolean;
    icons: {
    autoInstall?: ({

} | undefined);
    defaultComponentConfig?: ({

} | undefined);
    alias?: ({

} | undefined);
    include?: (Array<string> | undefined);
};
    mock: {
    exclude?: (Array<string> | undefined);
    include?: (Array<string> | undefined);
};
    mpa: {
    template?: (string | undefined);
    layout?: (string | undefined);
    getConfigFromEntryFile?: (boolean | undefined);
    entry?: ({

} | undefined);
};
    phantomDependency: {
    exclude?: (Array<string> | undefined);
};
    polyfill: {
    imports?: (Array<string> | undefined);
};
    routePrefetch: {

};
    terminal: {

};
    tmpFiles: boolean;
    clientLoader: {

};
    routeProps: {

};
    ssr: {
    serverBuildPath?: (string | undefined);
    serverBuildTarget?: ("express" | "worker" | undefined);
    platform?: (string | undefined);
    builder?: ("esbuild" | "webpack" | "mako" | undefined);
    __INTERNAL_DO_NOT_USE_OR_YOU_WILL_BE_FIRED?: ({
    pureApp?: (boolean | undefined);
    pureHtml?: (boolean | undefined);
} | undefined);
};
    lowImport: {
    libs?: (Array<any> | undefined);
    css?: (string | undefined);
};
    vite: {

};
    apiRoute: {
    platform?: (string | undefined);
};
    monorepoRedirect: boolean | {
    srcDir?: (Array<string> | undefined);
    exclude?: (Array<any> | undefined);
    peerDeps?: (boolean | undefined);
};
    test: {

};
    clickToComponent: {
    /** 默认情况下，点击将默认编辑器为vscode, 你可以设置编辑器 vscode 或者 vscode-insiders */
    editor?: (string | undefined);
};
    legacy: {
    buildOnly?: (boolean | undefined);
    nodeModulesTransform?: (boolean | undefined);
    checkOutput?: (boolean | undefined);
};
    /** 设置 babel class-properties 启用 loose 
 @doc https://umijs.org/docs/api/config#classpropertiesloose */
    classPropertiesLoose: boolean | {

};
    ui: {

};
    mako: {
    plugins?: (Array<{
    load?: (((...args: any[]) => unknown) | undefined);
    generateEnd?: (((...args: any[]) => unknown) | undefined);
}> | undefined);
    px2rem?: ({
    root?: (number | undefined);
    propBlackList?: (Array<string> | undefined);
    propWhiteList?: (Array<string> | undefined);
    selectorBlackList?: (Array<string> | undefined);
    selectorWhiteList?: (Array<string> | undefined);
    selectorDoubleList?: (Array<string> | undefined);
} | undefined);
    experimental?: ({
    webpackSyntaxValidate?: (Array<string> | undefined);
} | undefined);
    flexBugs?: (boolean | undefined);
    optimization?: ({
    skipModules?: (boolean | undefined);
} | undefined);
};
    hmrGuardian: boolean;
    forget: {
    ReactCompilerConfig?: ({

} | undefined);
};
    verifyCommit: {
    scope?: (Array<string> | undefined);
    allowEmoji?: (boolean | undefined);
};
    run: {
    globals?: (Array<string> | undefined);
};
    access: { [x: string]: any };
    analytics: {
    baidu?: (string | undefined);
    ga?: (string | undefined);
    ga_v2?: (string | undefined);
};
    antd: {
    dark?: (boolean | undefined);
    compact?: (boolean | undefined);
    import?: (boolean | undefined);
    style?: ("less" | "css" | undefined);
    theme?: ({
    components: { [x: string]: { [x: string]: any } };
} | { [x: string]: any } | undefined);
    appConfig?: ({ [x: string]: any } | undefined);
    momentPicker?: (boolean | undefined);
    styleProvider?: ({ [x: string]: any } | undefined);
    configProvider?: ({
    theme: {
    components: { [x: string]: { [x: string]: any } };
} | { [x: string]: any };
} | { [x: string]: any } | undefined);
};
    dva: {
    extraModels?: (Array<string> | undefined);
    immer?: ({ [x: string]: any } | undefined);
    skipModelValidate?: (boolean | undefined);
};
    initialState: {
    loading?: (string | undefined);
};
    layout: { [x: string]: any };
    locale: {
    default?: (string | undefined);
    useLocalStorage?: (boolean | undefined);
    baseNavigator?: (boolean | undefined);
    title?: (boolean | undefined);
    antd?: (boolean | undefined);
    baseSeparator?: (string | undefined);
};
    mf: {
    name?: (string | undefined);
    remotes?: (Array<{
    aliasName?: (string | undefined);
    name: string;
    entry?: (string | undefined);
    entries?: ({

} | undefined);
    keyResolver?: (string | undefined);
}> | undefined);
    shared?: ({ [x: string]: any } | undefined);
    library?: ({ [x: string]: any } | undefined);
    remoteHash?: (boolean | undefined);
};
    model: {
    extraModels?: (Array<string> | undefined);
};
    moment2dayjs: {
    preset?: ("antd" | "antdv3" | "none" | undefined);
    plugins?: (Array<string> | undefined);
};
    qiankun: {
    slave?: ({ [x: string]: any } | undefined);
    master?: ({ [x: string]: any } | undefined);
    externalQiankun?: (boolean | undefined);
};
    reactQuery: {
    devtool?: ({ [x: string]: any } | boolean | undefined);
    queryClient?: ({ [x: string]: any } | boolean | undefined);
};
    request: {
    dataField?: (string | undefined);
};
    styledComponents: {
    babelPlugin?: ({ [x: string]: any } | undefined);
};
    tailwindcss: { [x: string]: any };
    valtio: {

};
};

type PrettifyWithCloseable<T> = {
  [K in keyof T]: T[K] | false;
} & {};

export type IConfigFromPlugins = PrettifyWithCloseable<
  IConfigFromPluginsJoi & Partial<IConfigTypes>
>;

--- END: src/.umi-production/core/pluginConfig.ts ---

--- START: src/.umi-production/core/pluginConfigJoi.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
// Created by Umi Plugin

export interface IConfigFromPluginsJoi {
openAPI?: ({
requestLibPath?: string
schemaPath?: string
mock?: boolean
projectName?: string
apiPrefix?: (string | (() => any))
namespace?: string
hook?: {
customFunctionName?: (() => any)
customClassName?: (() => any)
}
}[] | {
requestLibPath?: string
schemaPath?: string
mock?: boolean
projectName?: string
apiPrefix?: (string | (() => any))
namespace?: string
hook?: {
customFunctionName?: (() => any)
customClassName?: (() => any)
}
})
keepalive?: unknown[]
tabsLayout?: (boolean | {
hasCustomTabs?: boolean
hasDropdown?: boolean
hasFixedHeader?: boolean
})
requestRecord?: {
exclude?: unknown[]
type?: boolean
namespace?: string
comment?: boolean
outputDir?: string
successFilter?: (() => any)
role?: string
mock?: {
outputDir?: string
fileName?: string
usingRole?: string
}
}
}

--- END: src/.umi-production/core/pluginConfigJoi.d.ts ---

--- START: src/.umi-production/core/polyfill.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.error.cause.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.aggregate-error.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.aggregate-error.cause.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.at.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.find-last.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.find-last-index.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.push.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.reduce.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.reduce-right.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.to-reversed.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.to-sorted.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.to-spliced.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.array.with.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.map.group-by.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.object.group-by.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.object.has-own.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.promise.any.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.promise.with-resolvers.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.reflect.to-string-tag.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.regexp.flags.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.string.at-alternative.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.string.is-well-formed.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.string.replace-all.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.string.to-well-formed.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.typed-array.at.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.typed-array.find-last.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.typed-array.find-last-index.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.typed-array.set.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.typed-array.to-reversed.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.typed-array.to-sorted.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/es.typed-array.with.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.suppressed-error.constructor.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.from-async.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.filter-out.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.filter-reject.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.group.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.group-by.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.group-by-to-map.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.group-to-map.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.is-template-object.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.last-index.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.last-item.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array.unique-by.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array-buffer.detached.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array-buffer.transfer.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.array-buffer.transfer-to-fixed-length.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-disposable-stack.constructor.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.constructor.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.as-indexed-pairs.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.async-dispose.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.drop.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.every.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.filter.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.find.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.flat-map.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.for-each.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.from.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.indexed.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.map.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.reduce.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.some.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.take.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.async-iterator.to-array.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.bigint.range.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.composite-key.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.composite-symbol.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.data-view.get-float16.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.data-view.get-uint8-clamped.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.data-view.set-float16.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.data-view.set-uint8-clamped.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.disposable-stack.constructor.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.function.demethodize.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.function.is-callable.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.function.is-constructor.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.function.metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.function.un-this.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.constructor.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.as-indexed-pairs.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.dispose.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.drop.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.every.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.filter.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.find.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.flat-map.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.for-each.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.from.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.indexed.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.map.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.range.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.reduce.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.some.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.take.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.to-array.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.iterator.to-async.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.json.is-raw-json.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.json.parse.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.json.raw-json.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.delete-all.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.emplace.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.every.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.filter.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.find.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.find-key.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.from.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.includes.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.key-by.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.key-of.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.map-keys.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.map-values.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.merge.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.of.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.reduce.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.some.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.update.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.update-or-insert.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.map.upsert.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.clamp.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.deg-per-rad.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.degrees.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.fscale.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.f16round.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.iaddh.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.imulh.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.isubh.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.rad-per-deg.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.radians.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.scale.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.seeded-prng.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.signbit.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.math.umulh.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.number.from-string.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.number.range.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.object.iterate-entries.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.object.iterate-keys.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.object.iterate-values.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.observable.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.promise.try.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.define-metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.delete-metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.get-metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.get-metadata-keys.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.get-own-metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.get-own-metadata-keys.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.has-metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.has-own-metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.reflect.metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.regexp.escape.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.add-all.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.delete-all.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.difference.v2.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.difference.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.every.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.filter.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.find.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.from.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.intersection.v2.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.intersection.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.is-disjoint-from.v2.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.is-disjoint-from.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.is-subset-of.v2.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.is-subset-of.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.is-superset-of.v2.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.is-superset-of.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.join.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.map.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.of.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.reduce.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.some.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.symmetric-difference.v2.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.symmetric-difference.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.union.v2.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.set.union.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.string.at.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.string.cooked.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.string.code-points.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.string.dedent.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.async-dispose.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.dispose.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.is-registered-symbol.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.is-registered.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.is-well-known-symbol.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.is-well-known.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.matcher.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.metadata.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.metadata-key.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.observable.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.pattern-match.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.symbol.replace-all.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.typed-array.from-async.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.typed-array.filter-out.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.typed-array.filter-reject.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.typed-array.group-by.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.typed-array.to-spliced.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.typed-array.unique-by.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.uint8-array.from-base64.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.uint8-array.from-hex.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.uint8-array.to-base64.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.uint8-array.to-hex.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-map.delete-all.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-map.from.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-map.of.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-map.emplace.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-map.upsert.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-set.add-all.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-set.delete-all.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-set.from.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/esnext.weak-set.of.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/web.dom-exception.stack.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/web.immediate.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/web.self.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/web.structured-clone.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/web.url.can-parse.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/web.url-search-params.delete.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/web.url-search-params.has.js";
import "D:/\u4E1C\u65B9\u7406\u5DE5/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/core-js@3.34.0/node_modules/core-js/modules/web.url-search-params.size.js";
import 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/regenerator-runtime@0.13.11/node_modules/regenerator-runtime/runtime.js';
export {};

--- END: src/.umi-production/core/polyfill.ts ---

--- START: src/.umi-production/core/route.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';

export async function getRoutes() {
  const routes = {"1":{"path":"/welcome","icon":"home","name":"AMSNet","parentId":"ant-design-pro-layout","id":"1"},"2":{"path":"/user","layout":false,"id":"2"},"3":{"path":"/user/login","parentId":"2","id":"3"},"4":{"path":"/user/register","parentId":"2","id":"4"},"5":{"path":"/fileoperate","icon":"edit","name":"Device Labeling","access":"canUser","parentId":"ant-design-pro-layout","id":"5"},"6":{"path":"/maskoperate","icon":"edit","name":"Net Labeling","access":"canUser","parentId":"ant-design-pro-layout","id":"6"},"7":{"path":"/graphoperate","icon":"edit","name":"Knowledge Graph","access":"canUser","parentId":"ant-design-pro-layout","id":"7"},"8":{"path":"/","redirect":"/welcome","parentId":"ant-design-pro-layout","id":"8"},"9":{"path":"*","layout":false,"id":"9"},"ant-design-pro-layout":{"id":"ant-design-pro-layout","path":"/","isLayout":true}} as const;
  return {
    routes,
    routeComponents: {
'1': React.lazy(() => import(/* webpackChunkName: "p__Welcome" */'@/pages/Welcome.tsx')),
'2': React.lazy(() => import('./EmptyRoute')),
'3': React.lazy(() => import(/* webpackChunkName: "p__User__Login__index" */'@/pages/User/Login/index.tsx')),
'4': React.lazy(() => import(/* webpackChunkName: "p__User__Register__index" */'@/pages/User/Register/index.tsx')),
'5': React.lazy(() => import(/* webpackChunkName: "p__FileOperate__index" */'@/pages/FileOperate/index.tsx')),
'6': React.lazy(() => import(/* webpackChunkName: "p__MaskOperate__index" */'@/pages/MaskOperate/index.tsx')),
'7': React.lazy(() => import(/* webpackChunkName: "p__GraphOperate__index" */'@/pages/GraphOperate/index.tsx')),
'8': React.lazy(() => import('./EmptyRoute')),
'9': React.lazy(() => import(/* webpackChunkName: "p__404" */'@/pages/404.tsx')),
'ant-design-pro-layout': React.lazy(() => import(/* webpackChunkName: "t__plugin-layout__Layout" */'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-layout/Layout.tsx')),
},
  };
}

--- END: src/.umi-production/core/route.tsx ---

--- START: src/.umi-production/core/terminal.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
let count = 0;
let groupLevel = 0;
function send(type: string, message?: string) {
  if(process.env.NODE_ENV==='production'){
    return;
  }else{
    const encodedMessage = message ? `&m=${encodeURI(message)}` : '';
    fetch(`/__umi/api/terminal?type=${type}&t=${Date.now()}&c=${count++}&g=${groupLevel}${encodedMessage}`, { mode: 'no-cors' })
  }
}
function prettyPrint(obj: any) {
  return JSON.stringify(obj, null, 2);
}
function stringifyObjs(objs: any[]) {
  const obj = objs.length > 1 ? objs.map(stringify).join(' ') : objs[0];
  return typeof obj === 'object' ? `${prettyPrint(obj)}` : obj.toString();
}
function stringify(obj: any) {
  return typeof obj === 'object' ? `${JSON.stringify(obj)}` : obj.toString();
}
const terminal = {
  log(...objs: any[]) { send('log', stringifyObjs(objs)) },
  info(...objs: any[]) { send('info', stringifyObjs(objs)) },
  warn(...objs: any[]) { send('warn', stringifyObjs(objs)) },
  error(...objs: any[]) { send('error', stringifyObjs(objs)) },
  group() { groupLevel++ },
  groupCollapsed() { groupLevel++ },
  groupEnd() { groupLevel && --groupLevel },
  clear() { send('clear') },
  trace(...args: any[]) { console.trace(...args) },
  profile(...args: any[]) { console.profile(...args) },
  profileEnd(...args: any[]) { console.profileEnd(...args) },
};
export { terminal };

--- END: src/.umi-production/core/terminal.ts ---

--- START: src/.umi-production/plugin-access/context.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import { AccessInstance } from './types.d';

export const AccessContext = React.createContext<AccessInstance>(null);

--- END: src/.umi-production/plugin-access/context.ts ---

--- START: src/.umi-production/plugin-access/index.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React, { PropsWithChildren } from 'react';
import { AccessContext } from './context';
import type { IRoute } from '@umijs/max';

export const useAccess = () => {
  return React.useContext(AccessContext);
};

export interface AccessProps {
  accessible: boolean;
  fallback?: React.ReactNode;
}
export const Access: React.FC<PropsWithChildren<AccessProps>> = (props) => {
  if (process.env.NODE_ENV === 'development' && typeof props.accessible !== 'boolean') {
    throw new Error('[access] the `accessible` property on <Access /> should be a boolean');
  }

  return <>{ props.accessible ? props.children : props.fallback }</>;
};

export const useAccessMarkedRoutes = (routes: IRoute[]) => {
  const access = useAccess();
  const markdedRoutes: IRoute[] = React.useMemo(() => {
    const process = (route, parentAccessCode, parentRoute) => {
      let accessCode = route.access;
      // 用父级的路由检测父级的 accessCode
      let detectorRoute = route;
      if (!accessCode && parentAccessCode) {
        accessCode = parentAccessCode;
        detectorRoute = parentRoute;
      }

      // set default status
      route.unaccessible = false;

      // check access code
      if (typeof accessCode === 'string') {
        const detector = access[accessCode];

        if (typeof detector === 'function') {
          route.unaccessible = !detector(detectorRoute);
        } else if (typeof detector === 'boolean') {
          route.unaccessible = !detector;
        } else if (typeof detector === 'undefined') {
          route.unaccessible = true;
        }
      }

      // check children access code
      if (route.children?.length) {
        const isNoAccessibleChild = !route.children.reduce((hasAccessibleChild, child) => {
          process(child, accessCode, route);

          return hasAccessibleChild || !child.unaccessible;
        }, false);

        // make sure parent route is unaccessible if all children are unaccessible
        if (isNoAccessibleChild) {
          route.unaccessible = true;
        }
      }

      // check children access code
      if (route.routes?.length) {
        const isNoAccessibleChild = !route.routes.reduce((hasAccessibleChild, child) => {
          process(child, accessCode, route);

          return hasAccessibleChild || !child.unaccessible;
        }, false);

        // make sure parent route is unaccessible if all children are unaccessible
        if (isNoAccessibleChild) {
          route.unaccessible = true;
        }
      }

      return route;
    }

    return routes.map(route => process(route));
  }, [routes.length, access]);

  return markdedRoutes;
}

--- END: src/.umi-production/plugin-access/index.tsx ---

--- START: src/.umi-production/plugin-access/runtime.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import accessFactory from '@/access';
import { useModel } from '@@/plugin-model';

import { AccessContext } from './context';

function Provider(props) {
  const { initialState } = useModel('@@initialState');
  const access = React.useMemo(() => accessFactory(initialState), [initialState]);

  return (
    <AccessContext.Provider value={access}>
      { props.children }
    </AccessContext.Provider>
  );
}

export function accessProvider(container) {
  return <Provider>{ container }</Provider>;
}

--- END: src/.umi-production/plugin-access/runtime.tsx ---

--- START: src/.umi-production/plugin-access/types.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import accessFactory from '@/access';

export type AccessInstance = ReturnType<typeof accessFactory>;

--- END: src/.umi-production/plugin-access/types.d.ts ---

--- START: src/.umi-production/plugin-antd/runtime.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import {
  ConfigProvider,
} from 'antd';
import { ApplyPluginsType } from 'umi';
import { getPluginManager } from '../core/plugin';

let cacheAntdConfig = null;

const getAntdConfig = () => {
  if(!cacheAntdConfig){
    cacheAntdConfig = getPluginManager().applyPlugins({
      key: 'antd',
      type: ApplyPluginsType.modify,
      initialValue: {
      },
    });
  }
  return cacheAntdConfig;
}

function AntdProvider({ children }) {
  let container = children;

  const [antdConfig, _setAntdConfig] = React.useState(() => {
    const {
      appConfig: _,
      ...finalConfigProvider
    } = getAntdConfig();
    return finalConfigProvider
  });
  const setAntdConfig: typeof _setAntdConfig = (newConfig) => {
    _setAntdConfig(prev => {
      return merge({}, prev, typeof newConfig === 'function' ? newConfig(prev) : newConfig)
    })
  }




  return container;
}

export function rootContainer(children) {
  return (
    <AntdProvider>
      {children}
    </AntdProvider>
  );
}

--- END: src/.umi-production/plugin-antd/runtime.tsx ---

--- START: src/.umi-production/plugin-antd/runtimeConfig.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import type { RuntimeAntdConfig } from './types.d';
export type IRuntimeConfig = {
  antd?: RuntimeAntdConfig
};

--- END: src/.umi-production/plugin-antd/runtimeConfig.d.ts ---

--- START: src/.umi-production/plugin-antd/types.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
type Prettify<T> = {
  [K in keyof T]: T[K];
} & {};

type AntdConfig = Prettify<{}


>;

export type RuntimeAntdConfig = (memo: AntdConfig) => AntdConfig;

--- END: src/.umi-production/plugin-antd/types.d.ts ---

--- START: src/.umi-production/plugin-initialState/@@initialState.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import { useState, useEffect, useCallback } from 'react';
import { getInitialState } from '@/app';

export type InitialStateType = Awaited<ReturnType<typeof getInitialState>> | undefined;

const initState = {
  initialState: undefined as InitialStateType,
  loading: true,
  error: undefined,
};

export default () => {
  const [state, setState] = useState(initState);
  const refresh = useCallback(async () => {
    setState((s) => ({ ...s, loading: true, error: undefined }));
    try {
      const ret = await getInitialState();
      setState((s) => ({ ...s, initialState: ret, loading: false }));
    } catch (e) {
      setState((s) => ({ ...s, error: e, loading: false }));
    }
  }, []);

  const setInitialState = useCallback(
    async (
      initialState: InitialStateType | ((initialState: InitialStateType) => InitialStateType),
    ) => {
      setState((s) => {
        if (typeof initialState === 'function') {
          return { ...s, initialState: initialState(s.initialState), loading: false };
        }
        return { ...s, initialState, loading: false };
      });
    },
    [],
  );

  useEffect(() => {
    refresh();
  }, []);

  return {
    ...state,
    refresh,
    setInitialState,
  };
}

--- END: src/.umi-production/plugin-initialState/@@initialState.ts ---

--- START: src/.umi-production/plugin-initialState/Provider.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import { useModel } from '@@/plugin-model';
function Loading() { return <div />; }
export default function InitialStateProvider(props: any) {
  const appLoaded = React.useRef(false);
  const { loading = false } = useModel("@@initialState") || {};
  React.useEffect(() => {
    if (!loading) {
      appLoaded.current = true;
    }
  }, [loading]);
  if (loading && !appLoaded.current && typeof window !== 'undefined') {
    return <Loading />;
  }
  return props.children;
}

--- END: src/.umi-production/plugin-initialState/Provider.tsx ---

--- START: src/.umi-production/plugin-initialState/runtime.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import Provider from './Provider';
export function dataflowProvider(container) {
  return <Provider>{ container }</Provider>;
}

--- END: src/.umi-production/plugin-initialState/runtime.tsx ---

--- START: src/.umi-production/plugin-initialState/runtimeConfig.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
export interface IRuntimeConfig {
  getInitialState?: () => Promise<Record<string, any>>
}

--- END: src/.umi-production/plugin-initialState/runtimeConfig.d.ts ---

--- START: src/.umi-production/plugin-layout/Exception.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import { history, type IRoute } from '@umijs/max';
import { Result, Button } from 'antd';

const Exception: React.FC<{
  children: React.ReactNode;
  route?: IRoute;
  notFound?: React.ReactNode;
  noAccessible?: React.ReactNode;
  unAccessible?: React.ReactNode;
  noFound?: React.ReactNode;
}> = (props) => (
  // render custom 404
  (!props.route && (props.noFound || props.notFound)) ||
  // render custom 403
  (props.route?.unaccessible && (props.unAccessible || props.noAccessible)) ||
  // render default exception
  ((!props.route || props.route?.unaccessible) && (
    <Result
      status={props.route ? '403' : '404'}
      title={props.route ? '403' : '404'}
      subTitle={props.route ? '抱歉，你无权访问该页面' : '抱歉，你访问的页面不存在'}
      extra={
        <Button type="primary" onClick={() => history.push('/')}>
          返回首页
        </Button>
      }
    />
  )) ||
  // normal render
  props.children
);

export default Exception;

--- END: src/.umi-production/plugin-layout/Exception.tsx ---

--- START: src/.umi-production/plugin-layout/icons.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import HomeOutlined from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@ant-design+icons@4.8.3_rea_19faa62653f401826ad5c42b19a83e78/node_modules/@ant-design/icons/es/icons/HomeOutlined';
import EditOutlined from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@ant-design+icons@4.8.3_rea_19faa62653f401826ad5c42b19a83e78/node_modules/@ant-design/icons/es/icons/EditOutlined';
export default { HomeOutlined, EditOutlined };

--- END: src/.umi-production/plugin-layout/icons.tsx ---

--- START: src/.umi-production/plugin-layout/index.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
export type TempType = string

--- END: src/.umi-production/plugin-layout/index.ts ---

--- START: src/.umi-production/plugin-layout/Layout.css ---
@media screen and (max-width: 480px) {
  /* 在小屏幕的时候可以有更好的体验 */
  .umi-plugin-layout-container {
    width: 100% !important;
  }
  .umi-plugin-layout-container > * {
    border-radius: 0 !important;
  }
}
.umi-plugin-layout-menu .anticon {
  margin-right: 8px;
}
.umi-plugin-layout-menu .ant-dropdown-menu-item {
  min-width: 160px;
}
.umi-plugin-layout-right {
  display: flex !important;
  float: right;
  height: 100%;
  margin-left: auto;
  overflow: hidden;
}
.umi-plugin-layout-right .umi-plugin-layout-action {
  display: flex;
  align-items: center;
  height: 100%;
  padding: 0 12px;
  cursor: pointer;
  transition: all 0.3s;
}
.umi-plugin-layout-right .umi-plugin-layout-action > i {
  color: rgba(255, 255, 255, 0.85);
  vertical-align: middle;
}
.umi-plugin-layout-right .umi-plugin-layout-action:hover {
  background: rgba(0, 0, 0, 0.025);
}
.umi-plugin-layout-right .umi-plugin-layout-action.opened {
  background: rgba(0, 0, 0, 0.025);
}
.umi-plugin-layout-right .umi-plugin-layout-search {
  padding: 0 12px;
}
.umi-plugin-layout-right .umi-plugin-layout-search:hover {
  background: transparent;
}
.umi-plugin-layout-name {
  margin-left: 8px;
}
.umi-plugin-layout-name.umi-plugin-layout-hide-avatar-img {
  margin-left: 0;
}

--- END: src/.umi-production/plugin-layout/Layout.css ---

--- START: src/.umi-production/plugin-layout/Layout.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
/// <reference types="D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/@ant-design/pro-components" />


import {
  Link, useLocation, useNavigate, Outlet, useAppData, matchRoutes,
  type IRoute
} from '@umijs/max';
import React, { useMemo } from 'react';
import {
  ProLayout,
} from "D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/@ant-design/pro-components";
import './Layout.css';
import Logo from './Logo';
import Exception from './Exception';
import { getRightRenderContent } from './rightRender';
import { useModel } from '@@/plugin-model';
import { useAccessMarkedRoutes } from '@@/plugin-access';


// 过滤出需要显示的路由, 这里的filterFn 指 不希望显示的层级
const filterRoutes = (routes: IRoute[], filterFn: (route: IRoute) => boolean) => {
  if (routes.length === 0) {
    return []
  }

  let newRoutes = []
  for (const route of routes) {
    const newRoute = {...route };
    if (filterFn(route)) {
      if (Array.isArray(newRoute.routes)) {
        newRoutes.push(...filterRoutes(newRoute.routes, filterFn))
      }
    } else {
      if (Array.isArray(newRoute.children)) {
        newRoute.children = filterRoutes(newRoute.children, filterFn);
        newRoute.routes = newRoute.children;
      }
      newRoutes.push(newRoute);
    }
  }

  return newRoutes;
}

// 格式化路由 处理因 wrapper 导致的 菜单 path 不一致
const mapRoutes = (routes: IRoute[]) => {
  if (routes.length === 0) {
    return []
  }
  return routes.map(route => {
    // 需要 copy 一份, 否则会污染原始数据
    const newRoute = {...route}
    if (route.originPath) {
      newRoute.path = route.originPath
    }

    if (Array.isArray(route.routes)) {
      newRoute.routes = mapRoutes(route.routes);
    }

    if (Array.isArray(route.children)) {
      newRoute.children = mapRoutes(route.children);
    }

    return newRoute
  })
}

export default (props: any) => {
  const location = useLocation();
  const navigate = useNavigate();
  const { clientRoutes, pluginManager } = useAppData();
  const initialInfo = (useModel && useModel('@@initialState')) || {
    initialState: undefined,
    loading: false,
    setInitialState: null,
  };
  const { initialState, loading, setInitialState } = initialInfo;
  const userConfig = {
  "locale": true,
  "navTheme": "light",
  "colorPrimary": "#1890ff",
  "layout": "mix",
  "contentWidth": "Fluid",
  "fixedHeader": false,
  "fixSiderbar": true,
  "colorWeak": false,
  "title": "AMSNet",
  "pwa": true,
  "iconfontUrl": "",
  "token": {}
};
const formatMessage = undefined;
  const runtimeConfig = pluginManager.applyPlugins({
    key: 'layout',
    type: 'modify',
    initialValue: {
      ...initialInfo
    },
  });


  // 现在的 layout 及 wrapper 实现是通过父路由的形式实现的, 会导致路由数据多了冗余层级, proLayout 消费时, 无法正确展示菜单, 这里对冗余数据进行过滤操作
  const newRoutes = filterRoutes(clientRoutes.filter(route => route.id === 'ant-design-pro-layout'), (route) => {
    return (!!route.isLayout && route.id !== 'ant-design-pro-layout') || !!route.isWrapper;
  })
  const [route] = useAccessMarkedRoutes(mapRoutes(newRoutes));

  const matchedRoute = useMemo(() => matchRoutes(route.children, location.pathname)?.pop?.()?.route, [location.pathname]);

  return (
    <ProLayout
      route={route}
      location={location}
      title={userConfig.title || 'yupi-antd-frontend-init'}
      navTheme="dark"
      siderWidth={256}
      onMenuHeaderClick={(e) => {
        e.stopPropagation();
        e.preventDefault();
        navigate('/');
      }}
      formatMessage={userConfig.formatMessage || formatMessage}
      menu={{ locale: userConfig.locale }}
      logo={Logo}
      menuItemRender={(menuItemProps, defaultDom) => {
        if (menuItemProps.isUrl || menuItemProps.children) {
          return defaultDom;
        }
        if (menuItemProps.path && location.pathname !== menuItemProps.path) {
          return (
            // handle wildcard route path, for example /slave/* from qiankun
            <Link to={menuItemProps.path.replace('/*', '')} target={menuItemProps.target}>
              {defaultDom}
            </Link>
          );
        }
        return defaultDom;
      }}
      itemRender={(route, _, routes) => {
        const { breadcrumbName, title, path } = route;
        const label = title || breadcrumbName
        const last = routes[routes.length - 1]
        if (last) {
          if (last.path === path || last.linkPath === path) {
            return <span>{label}</span>;
          }
        }
        return <Link to={path}>{label}</Link>;
      }}
      disableContentMargin
      fixSiderbar
      fixedHeader
      {...runtimeConfig}
      rightContentRender={
        runtimeConfig.rightContentRender !== false &&
        ((layoutProps) => {
          const dom = getRightRenderContent({
            runtimeConfig,
            loading,
            initialState,
            setInitialState,
          });
          if (runtimeConfig.rightContentRender) {
            return runtimeConfig.rightContentRender(layoutProps, dom, {
              // BREAK CHANGE userConfig > runtimeConfig
              userConfig,
              runtimeConfig,
              loading,
              initialState,
              setInitialState,
            });
          }
          return dom;
        })
      }
    >
      <Exception
        route={matchedRoute}
        noFound={runtimeConfig?.noFound}
        notFound={runtimeConfig?.notFound}
        unAccessible={runtimeConfig?.unAccessible}
        noAccessible={runtimeConfig?.noAccessible}
      >
        {runtimeConfig.childrenRender
          ? runtimeConfig.childrenRender(<Outlet />, props)
          : <Outlet />
        }
      </Exception>
    </ProLayout>
  );
}

--- END: src/.umi-production/plugin-layout/Layout.tsx ---

--- START: src/.umi-production/plugin-layout/Logo.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';

const LogoIcon: React.FC = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="32"
      height="32"
      viewBox="0 0 200 200"
    >
      <defs>
        <linearGradient
          id="linearGradient-1"
          x1="62.102%"
          x2="108.197%"
          y1="0%"
          y2="37.864%"
        >
          <stop offset="0%" stopColor="#4285EB"></stop>
          <stop offset="100%" stopColor="#2EC7FF"></stop>
        </linearGradient>
        <linearGradient
          id="linearGradient-2"
          x1="69.644%"
          x2="54.043%"
          y1="0%"
          y2="108.457%"
        >
          <stop offset="0%" stopColor="#29CDFF"></stop>
          <stop offset="37.86%" stopColor="#148EFF"></stop>
          <stop offset="100%" stopColor="#0A60FF"></stop>
        </linearGradient>
        <linearGradient
          id="linearGradient-3"
          x1="69.691%"
          x2="16.723%"
          y1="-12.974%"
          y2="117.391%"
        >
          <stop offset="0%" stopColor="#FA816E"></stop>
          <stop offset="41.473%" stopColor="#F74A5C"></stop>
          <stop offset="100%" stopColor="#F51D2C"></stop>
        </linearGradient>
        <linearGradient
          id="linearGradient-4"
          x1="68.128%"
          x2="30.44%"
          y1="-35.691%"
          y2="114.943%"
        >
          <stop offset="0%" stopColor="#FA8E7D"></stop>
          <stop offset="51.264%" stopColor="#F74A5C"></stop>
          <stop offset="100%" stopColor="#F51D2C"></stop>
        </linearGradient>
      </defs>
      <g fill="none" fillRule="evenodd" stroke="none" strokeWidth="1">
        <g transform="translate(-20 -20)">
          <g transform="translate(20 20)">
            <g>
              <g fillRule="nonzero">
                <g>
                  <path
                    fill="url(#linearGradient-1)"
                    d="M91.588 4.177L4.18 91.513a11.981 11.981 0 000 16.974l87.408 87.336a12.005 12.005 0 0016.989 0l36.648-36.618c4.209-4.205 4.209-11.023 0-15.228-4.208-4.205-11.031-4.205-15.24 0l-27.783 27.76c-1.17 1.169-2.945 1.169-4.114 0l-69.802-69.744c-1.17-1.169-1.17-2.942 0-4.11l69.802-69.745c1.17-1.169 2.944-1.169 4.114 0l27.783 27.76c4.209 4.205 11.032 4.205 15.24 0 4.209-4.205 4.209-11.022 0-15.227L108.581 4.056c-4.719-4.594-12.312-4.557-16.993.12z"
                  ></path>
                  <path
                    fill="url(#linearGradient-2)"
                    d="M91.588 4.177L4.18 91.513a11.981 11.981 0 000 16.974l87.408 87.336a12.005 12.005 0 0016.989 0l36.648-36.618c4.209-4.205 4.209-11.023 0-15.228-4.208-4.205-11.031-4.205-15.24 0l-27.783 27.76c-1.17 1.169-2.945 1.169-4.114 0l-69.802-69.744c-1.17-1.169-1.17-2.942 0-4.11l69.802-69.745c2.912-2.51 7.664-7.596 14.642-8.786 5.186-.883 10.855 1.062 17.009 5.837L108.58 4.056c-4.719-4.594-12.312-4.557-16.993.12z"
                  ></path>
                </g>
                <path
                  fill="url(#linearGradient-3)"
                  d="M153.686 135.855c4.208 4.205 11.031 4.205 15.24 0l27.034-27.012c4.7-4.696 4.7-12.28 0-16.974l-27.27-27.15c-4.218-4.2-11.043-4.195-15.254.013-4.209 4.205-4.209 11.022 0 15.227l18.418 18.403c1.17 1.169 1.17 2.943 0 4.111l-18.168 18.154c-4.209 4.205-4.209 11.023 0 15.228z"
                ></path>
              </g>
              <ellipse
                cx="100.519"
                cy="100.437"
                fill="url(#linearGradient-4)"
                rx="23.6"
                ry="23.581"
              ></ellipse>
            </g>
          </g>
        </g>
      </g>
    </svg>
  );
};

export default LogoIcon;

--- END: src/.umi-production/plugin-layout/Logo.tsx ---

--- START: src/.umi-production/plugin-layout/rightRender.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import { Avatar, version, Dropdown, Menu, Spin } from 'antd';
import { LogoutOutlined } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@ant-design+icons@4.8.3_rea_19faa62653f401826ad5c42b19a83e78/node_modules/@ant-design/icons';

export function getRightRenderContent (opts: {
   runtimeConfig: any,
   loading: boolean,
   initialState: any,
   setInitialState: any,
 }) {
  if (opts.runtimeConfig.rightRender) {
    return opts.runtimeConfig.rightRender(
      opts.initialState,
      opts.setInitialState,
      opts.runtimeConfig,
    );
  }

  const showAvatar = opts.initialState?.avatar || opts.initialState?.name || opts.runtimeConfig.logout;
  const disableAvatarImg = opts.initialState?.avatar === false;
  const nameClassName = disableAvatarImg ? 'umi-plugin-layout-name umi-plugin-layout-hide-avatar-img' : 'umi-plugin-layout-name';
  const avatar =
    showAvatar ? (
      <span className="umi-plugin-layout-action">
        {!disableAvatarImg ?
          (
            <Avatar
              size="small"
              className="umi-plugin-layout-avatar"
              src={
                opts.initialState?.avatar ||
                "https://gw.alipayobjects.com/zos/antfincdn/XAosXuNZyF/BiazfanxmamNRoxxVxka.png"
              }
              alt="avatar"
            />
          ) : null}
        <span className={nameClassName}>{opts.initialState?.name}</span>
      </span>
    ) : null;


  if (opts.loading) {
    return (
      <div className="umi-plugin-layout-right">
        <Spin size="small" style={ { marginLeft: 8, marginRight: 8 } } />
      </div>
    );
  }

  // 如果没有打开Locale，并且头像为空就取消掉这个返回的内容
    if(!avatar) return null;

  const langMenu = {
    className: "umi-plugin-layout-menu",
    selectedKeys: [],
    items: [
      {
        key: "logout",
        label: (
          <>
            <LogoutOutlined />
            退出登录
          </>
        ),
        onClick: () => {
          opts?.runtimeConfig?.logout?.(opts.initialState);
        },
      },
    ],
  };
  // antd@5 和  4.24 之后推荐使用 menu，性能更好
  let dropdownProps;
  if (version.startsWith("5.") || version.startsWith("4.24.")) {
    dropdownProps = { menu: langMenu };
  } else if (version.startsWith("3.")) {
    dropdownProps = {
      overlay: (
        <Menu>
          {langMenu.items.map((item) => (
            <Menu.Item key={item.key} onClick={item.onClick}>
              {item.label}
            </Menu.Item>
          ))}
        </Menu>
      ),
    };
  } else { // 需要 antd 4.20.0 以上版本
    dropdownProps = { overlay: <Menu {...langMenu} /> };
  }



  return (
    <div className="umi-plugin-layout-right anticon">
      {opts.runtimeConfig.logout ? (
        <Dropdown {...dropdownProps} overlayClassName="umi-plugin-layout-container">
          {avatar}
        </Dropdown>
      ) : (
        avatar
      )}
    </div>
  );
}

--- END: src/.umi-production/plugin-layout/rightRender.tsx ---

--- START: src/.umi-production/plugin-layout/runtime.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React from 'react';
import icons from './icons';


function formatIcon(name: string) {
  return name
    .replace(name[0], name[0].toUpperCase())
    .replace(/-(w)/g, function(all, letter) {
      return letter.toUpperCase();
    });
}

export function patchRoutes({ routes }) {
  Object.keys(routes).forEach(key => {
    const { icon } = routes[key];
    if (icon && typeof icon === 'string') {
      

      const upperIcon = formatIcon(icon);
      if (icons[upperIcon] || icons[upperIcon + 'Outlined']) {
        routes[key].icon = React.createElement(icons[upperIcon] || icons[upperIcon + 'Outlined']);
      }
    }
  });
}

--- END: src/.umi-production/plugin-layout/runtime.tsx ---

--- START: src/.umi-production/plugin-layout/runtimeConfig.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import type { RunTimeLayoutConfig } from './types.d';
export interface IRuntimeConfig {
  layout?: RunTimeLayoutConfig
}

--- END: src/.umi-production/plugin-layout/runtimeConfig.d.ts ---

--- START: src/.umi-production/plugin-layout/types.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
/// <reference types="D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/@ant-design/pro-components" />


    import type { ProLayoutProps, HeaderProps } from "D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/@ant-design/pro-components";
    import type InitialStateType from '@@/plugin-initialState/@@initialState';
           type InitDataType = ReturnType<typeof InitialStateType>;
        

    import type { IConfigFromPlugins } from '@@/core/pluginConfig';

    export type RunTimeLayoutConfig = (initData: InitDataType) => Omit<
      ProLayoutProps,
      'rightContentRender'
    > & {
      childrenRender?: (dom: JSX.Element, props: ProLayoutProps) => React.ReactNode;
      unAccessible?: JSX.Element;
      noFound?: JSX.Element;
      logout?: (initialState: InitDataType['initialState']) => Promise<void> | void;
      rightContentRender?: ((
        headerProps: HeaderProps,
        dom: JSX.Element,
        props: {
          userConfig: IConfigFromPlugins['layout'];
          runtimeConfig: RunTimeLayoutConfig;
          loading: InitDataType['loading'];
          initialState: InitDataType['initialState'];
          setInitialState: InitDataType['setInitialState'];
        },
      ) => JSX.Element) | false;
      rightRender?: (
        initialState: InitDataType['initialState'],
        setInitialState: InitDataType['setInitialState'],
        runtimeConfig: RunTimeLayoutConfig,
      ) => JSX.Element;
    };

--- END: src/.umi-production/plugin-layout/types.d.ts ---

--- START: src/.umi-production/plugin-model/index.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
// @ts-ignore
import type { models as rawModels } from '@@/plugin-model/model';
import isEqual from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/fast-deep-equal@3.1.3/node_modules/fast-deep-equal/index.js';
import React, { useContext, useEffect, useMemo, useRef, useState } from 'react';

type Models = typeof rawModels;

type GetNamespaces<M> = {
  [K in keyof M]: M[K] extends { namespace: string }
    ? M[K]['namespace']
    : never;
}[keyof M];

type Namespaces = GetNamespaces<Models>;

// @ts-ignore
const Context = React.createContext<{ dispatcher: Dispatcher }>(null);

class Dispatcher {
  callbacks: Record<Namespaces, Set<Function>> = {};
  data: Record<Namespaces, unknown> = {};
  update = (namespace: Namespaces) => {
    if (this.callbacks[namespace]) {
      this.callbacks[namespace].forEach((cb) => {
        try {
          const data = this.data[namespace];
          cb(data);
        } catch (e) {
          cb(undefined);
        }
      });
    }
  };
}

interface ExecutorProps {
  hook: () => any;
  onUpdate: (val: any) => void;
  namespace: string;
}

function Executor(props: ExecutorProps) {
  const { hook, onUpdate, namespace } = props;

  const updateRef = useRef(onUpdate);
  const initialLoad = useRef(false);

  let data: any;
  try {
    data = hook();
  } catch (e) {
    console.error(
      `plugin-model: Invoking '${namespace || 'unknown'}' model failed:`,
      e,
    );
  }

  // 首次执行时立刻返回初始值
  useMemo(() => {
    updateRef.current(data);
  }, []);

  // React 16.13 后 update 函数用 useEffect 包裹
  useEffect(() => {
    if (initialLoad.current) {
      updateRef.current(data);
    } else {
      initialLoad.current = true;
    }
  });

  return null;
}

const dispatcher = new Dispatcher();

export function Provider(props: {
  models: Record<string, any>;
  children: React.ReactNode;
}) {
  return (
    <Context.Provider value={{ dispatcher }}>
      {Object.keys(props.models).map((namespace) => {
        return (
          <Executor
            key={namespace}
            hook={props.models[namespace]}
            namespace={namespace}
            onUpdate={(val) => {
              dispatcher.data[namespace] = val;
              dispatcher.update(namespace);
            }}
          />
        );
      })}
      {props.children}
    </Context.Provider>
  );
}

type GetModelByNamespace<M, N> = {
  [K in keyof M]: M[K] extends { namespace: string; model: unknown }
    ? M[K]['namespace'] extends N
      ? M[K]['model'] extends (...args: any) => any
        ? ReturnType<M[K]['model']>
        : never
      : never
    : never;
}[keyof M];

type Model<N> = GetModelByNamespace<Models, N>;
type Selector<N, S> = (model: Model<N>) => S;

type SelectedModel<N, T> = T extends (...args: any) => any
  ? ReturnType<NonNullable<T>>
  : Model<N>;

export function useModel<N extends Namespaces>(namespace: N): Model<N>;

export function useModel<N extends Namespaces, S>(
  namespace: N,
  selector: Selector<N, S>,
): SelectedModel<N, typeof selector>;

export function useModel<N extends Namespaces, S>(
  namespace: N,
  selector?: Selector<N, S>,
): SelectedModel<N, typeof selector> {
  const { dispatcher } = useContext<{ dispatcher: Dispatcher }>(Context);
  const selectorRef = useRef(selector);
  selectorRef.current = selector;
  const [state, setState] = useState(() =>
    selectorRef.current
      ? selectorRef.current(dispatcher.data[namespace])
      : dispatcher.data[namespace],
  );
  const stateRef = useRef<any>(state);
  stateRef.current = state;

  const isMount = useRef(false);
  useEffect(() => {
    isMount.current = true;
    return () => {
      isMount.current = false;
    };
  }, []);

  useEffect(() => {
    const handler = (data: any) => {
      if (!isMount.current) {
        // 如果 handler 执行过程中，组件被卸载了，则强制更新全局 data
        // TODO: 需要加个 example 测试
        setTimeout(() => {
          dispatcher.data[namespace] = data;
          dispatcher.update(namespace);
        });
      } else {
        const currentState = selectorRef.current
          ? selectorRef.current(data)
          : data;
        const previousState = stateRef.current;
        if (!isEqual(currentState, previousState)) {
          // 避免 currentState 拿到的数据是老的，从而导致 isEqual 比对逻辑有问题
          stateRef.current = currentState;
          setState(currentState);
        }
      }
    };

    dispatcher.callbacks[namespace] ||= new Set() as any; // rawModels 是 umi 动态生成的文件，导致前面 callback[namespace] 的类型无法推导出来，所以用 as any 来忽略掉
    dispatcher.callbacks[namespace].add(handler);
    dispatcher.update(namespace);

    return () => {
      dispatcher.callbacks[namespace].delete(handler);
    };
  }, [namespace]);

  return state;
}

--- END: src/.umi-production/plugin-model/index.tsx ---

--- START: src/.umi-production/plugin-model/model.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import model_1 from 'D:/东方理工/AMSNet/AMSNetFrontEnd/src/.umi-production/plugin-initialState/@@initialState';

export const models = {
model_1: { namespace: '@@initialState', model: model_1 },
} as const

--- END: src/.umi-production/plugin-model/model.ts ---

--- START: src/.umi-production/plugin-model/runtime.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React  from 'react';
import { Provider } from './';
import { models as rawModels } from './model';

function ProviderWrapper(props: any) {
  const models = React.useMemo(() => {
    return Object.keys(rawModels).reduce((memo, key) => {
      memo[rawModels[key].namespace] = rawModels[key].model;
      return memo;
    }, {});
  }, []);
  return <Provider models={models} {...props}>{ props.children }</Provider>
}

export function dataflowProvider(container, opts) {
  return <ProviderWrapper {...opts}>{ container }</ProviderWrapper>;
}

--- END: src/.umi-production/plugin-model/runtime.tsx ---

--- START: src/.umi-production/plugin-moment2dayjs/runtime.tsx ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import dayjs from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs';
import antdPlugin from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/antd-dayjs-webpack-plugin@1.0.6_dayjs@1.11.13/node_modules/antd-dayjs-webpack-plugin/src/antd-plugin.js';

import isSameOrBefore from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/isSameOrBefore';
import isSameOrAfter from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/isSameOrAfter';
import advancedFormat from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/advancedFormat';
import customParseFormat from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/customParseFormat';
import weekday from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/weekday';
import weekYear from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/weekYear';
import weekOfYear from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/weekOfYear';
import isMoment from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/isMoment';
import localeData from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/localeData';
import localizedFormat from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/localizedFormat';
import duration from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/duration';

dayjs.extend(isSameOrBefore);
dayjs.extend(isSameOrAfter);
dayjs.extend(advancedFormat);
dayjs.extend(customParseFormat);
dayjs.extend(weekday);
dayjs.extend(weekYear);
dayjs.extend(weekOfYear);
dayjs.extend(isMoment);
dayjs.extend(localeData);
dayjs.extend(localizedFormat);
dayjs.extend(duration);

dayjs.extend(antdPlugin);

--- END: src/.umi-production/plugin-moment2dayjs/runtime.tsx ---

--- START: src/.umi-production/plugin-request/index.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
export {
  useRequest,
  UseRequestProvider,
  request,
  getRequestInstance,
} from './request';

--- END: src/.umi-production/plugin-request/index.ts ---

--- START: src/.umi-production/plugin-request/request.ts ---
// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import axios, {
  type AxiosInstance,
  type AxiosRequestConfig,
  type AxiosResponse,
  type AxiosError,
} from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/axios@0.27.2/node_modules/axios';
import useUmiRequest, { UseRequestProvider } from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@ahooksjs+use-request@2.8.15_react@18.3.1/node_modules/@ahooksjs/use-request';
import { ApplyPluginsType } from 'umi';
import { getPluginManager } from '../core/plugin';

import {
  BaseOptions,
  BasePaginatedOptions,
  BaseResult,
  CombineService,
  LoadMoreFormatReturn,
  LoadMoreOptions,
  LoadMoreOptionsWithFormat,
  LoadMoreParams,
  LoadMoreResult,
  OptionsWithFormat,
  PaginatedFormatReturn,
  PaginatedOptionsWithFormat,
  PaginatedParams,
  PaginatedResult,
} from 'D:/东方理工/AMSNet/AMSNetFrontEnd/node_modules/.pnpm/@ahooksjs+use-request@2.8.15_react@18.3.1/node_modules/@ahooksjs/use-request/es/types';

type ResultWithData< T = any > = { data?: T; [key: string]: any };

function useRequest<
  R = any,
  P extends any[] = any,
  U = any,
  UU extends U = any,
>(
  service: CombineService<R, P>,
  options: OptionsWithFormat<R, P, U, UU>,
): BaseResult<U, P>;
function useRequest<R extends ResultWithData = any, P extends any[] = any>(
  service: CombineService<R, P>,
  options?: BaseOptions<R['data'], P>,
): BaseResult<R['data'], P>;
function useRequest<R extends LoadMoreFormatReturn = any, RR = any>(
  service: CombineService<RR, LoadMoreParams<R>>,
  options: LoadMoreOptionsWithFormat<R, RR>,
): LoadMoreResult<R>;
function useRequest<
  R extends ResultWithData<LoadMoreFormatReturn | any> = any,
  RR extends R = any,
>(
  service: CombineService<R, LoadMoreParams<R['data']>>,
  options: LoadMoreOptions<RR['data']>,
): LoadMoreResult<R['data']>;

function useRequest<R = any, Item = any, U extends Item = any>(
  service: CombineService<R, PaginatedParams>,
  options: PaginatedOptionsWithFormat<R, Item, U>,
): PaginatedResult<Item>;
function useRequest<Item = any, U extends Item = any>(
  service: CombineService<
    ResultWithData<PaginatedFormatReturn<Item>>,
    PaginatedParams
  >,
  options: BasePaginatedOptions<U>,
): PaginatedResult<Item>;
function useRequest(service: any, options: any = {}) {
  return useUmiRequest(service, {
    formatResult: result => result?.data,
    requestMethod: (requestOptions: any) => {
      if (typeof requestOptions === 'string') {
        return request(requestOptions);
      }
      if (typeof requestOptions === 'object') {
        const { url, ...rest } = requestOptions;
        return request(url, rest);
      }
      throw new Error('request options error');
    },
    ...options,
  });
}

// request 方法 opts 参数的接口
interface IRequestOptions extends AxiosRequestConfig {
  skipErrorHandler?: boolean;
  requestInterceptors?: IRequestInterceptorTuple[];
  responseInterceptors?: IResponseInterceptorTuple[];
  [key: string]: any;
}

interface IRequestOptionsWithResponse extends IRequestOptions {
  getResponse: true;
}

interface IRequestOptionsWithoutResponse extends IRequestOptions{
  getResponse: false;
}

interface IRequest{
   <T = any>(url: string, opts: IRequestOptionsWithResponse): Promise<AxiosResponse<T>>;
   <T = any>(url: string, opts: IRequestOptionsWithoutResponse): Promise<T>;
   <T = any>(url: string, opts: IRequestOptions): Promise<T>; // getResponse 默认是 false， 因此不提供该参数时，只返回 data
   <T = any>(url: string): Promise<T>;  // 不提供 opts 时，默认使用 'GET' method，并且默认返回 data
}

type RequestError = AxiosError | Error

interface IErrorHandler {
  (error: RequestError, opts: IRequestOptions): void;
}
type WithPromise<T> = T | Promise<T>;
type IRequestInterceptorAxios = (config: IRequestOptions) => WithPromise<IRequestOptions>;
type IRequestInterceptorUmiRequest = (url: string, config : IRequestOptions) => WithPromise<{ url: string, options: IRequestOptions }>;
type IRequestInterceptor = IRequestInterceptorAxios | IRequestInterceptorUmiRequest;
type IErrorInterceptor = (error: Error) => Promise<Error>;
type IResponseInterceptor = <T = any>(response : AxiosResponse<T>) => WithPromise<AxiosResponse<T>> ;
type IRequestInterceptorTuple = [IRequestInterceptor , IErrorInterceptor] | [IRequestInterceptor] | IRequestInterceptor
type IResponseInterceptorTuple = [IResponseInterceptor, IErrorInterceptor] | [IResponseInterceptor] | IResponseInterceptor

export interface RequestConfig<T = any> extends AxiosRequestConfig {
  errorConfig?: {
    errorHandler?: IErrorHandler;
    errorThrower?: ( res: T ) => void
  };
  requestInterceptors?: IRequestInterceptorTuple[];
  responseInterceptors?: IResponseInterceptorTuple[];
}

let requestInstance: AxiosInstance;
let config: RequestConfig;
const getConfig = (): RequestConfig => {
  if (config) return config;
  config = getPluginManager().applyPlugins({
    key: 'request',
    type: ApplyPluginsType.modify,
    initialValue: {},
  });
  return config;
};

const getRequestInstance = (): AxiosInstance => {
  if (requestInstance) return requestInstance;
  const config = getConfig();
  requestInstance = axios.create(config);

  config?.requestInterceptors?.forEach((interceptor) => {
    if(interceptor instanceof Array){
      requestInstance.interceptors.request.use(async (config) => {
        const { url } = config;
        if(interceptor[0].length === 2){
          const { url: newUrl, options } = await interceptor[0](url, config);
          return { ...options, url: newUrl };
        }
        return interceptor[0](config);
      }, interceptor[1]);
    } else {
      requestInstance.interceptors.request.use(async (config) => {
        const { url } = config;
        if(interceptor.length === 2){
          const { url: newUrl, options } = await interceptor(url, config);
          return { ...options, url: newUrl };
        }
        return interceptor(config);
      })
    }
  });

  config?.responseInterceptors?.forEach((interceptor) => {
    interceptor instanceof Array ?
      requestInstance.interceptors.response.use(interceptor[0], interceptor[1]):
       requestInstance.interceptors.response.use(interceptor);
  });

  // 当响应的数据 success 是 false 的时候，抛出 error 以供 errorHandler 处理。
  requestInstance.interceptors.response.use((response) => {
    const { data } = response;
    if(data?.success === false && config?.errorConfig?.errorThrower){
      config.errorConfig.errorThrower(data);
    }
    return response;
  })
  return requestInstance;
};

const request: IRequest = (url: string, opts: any = { method: 'GET' }) => {
  const requestInstance = getRequestInstance();
  const config = getConfig();
  const { getResponse = false, requestInterceptors, responseInterceptors } = opts;
  const requestInterceptorsToEject = requestInterceptors?.map((interceptor) => {
    if(interceptor instanceof Array){
      return requestInstance.interceptors.request.use(async (config) => {
        const { url } = config;
        if(interceptor[0].length === 2){
          const { url: newUrl, options } = await interceptor[0](url, config);
          return { ...options, url: newUrl };
        }
        return interceptor[0](config);
      }, interceptor[1]);
    } else {
      return requestInstance.interceptors.request.use(async (config) => {
        const { url } = config;
        if(interceptor.length === 2){
          const { url: newUrl, options } = await interceptor(url, config);
          return { ...options, url: newUrl };
        }
        return interceptor(config);
      })
    }
    });
  const responseInterceptorsToEject = responseInterceptors?.map((interceptor) => {
    return interceptor instanceof Array ?
      requestInstance.interceptors.response.use(interceptor[0], interceptor[1]):
       requestInstance.interceptors.response.use(interceptor);
    });
  return new Promise((resolve, reject)=>{
    requestInstance
      .request({...opts, url})
      .then((res)=>{
        requestInterceptorsToEject?.forEach((interceptor) => {
          requestInstance.interceptors.request.eject(interceptor);
        });
        responseInterceptorsToEject?.forEach((interceptor) => {
          requestInstance.interceptors.response.eject(interceptor);
        });
        resolve(getResponse ? res : res.data);
      })
      .catch((error)=>{
        requestInterceptorsToEject?.forEach((interceptor) => {
          requestInstance.interceptors.request.eject(interceptor);
        });
        responseInterceptorsToEject?.forEach((interceptor) => {
          requestInstance.interceptors.response.eject(interceptor);
        });
        try {
          const handler =
            config?.errorConfig?.errorHandler;
          if(handler)
            handler(error, opts, config);
        } catch (e) {
          reject(e);
        }
        reject(error);
      })
  })
}

export {
  useRequest,
  UseRequestProvider,
  request,
  getRequestInstance,
};

export type {
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError,
  RequestError,
  IRequestInterceptorAxios as RequestInterceptorAxios,
  IRequestInterceptorUmiRequest as RequestInterceptorUmiRequest,
  IRequestInterceptor as RequestInterceptor,
  IErrorInterceptor as ErrorInterceptor,
  IResponseInterceptor as ResponseInterceptor,
  IRequestOptions as RequestOptions,
  IRequest as Request,
};

--- END: src/.umi-production/plugin-request/request.ts ---

--- START: src/.umi-production/plugin-request/runtimeConfig.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import type { RequestConfig } from './types.d'
export type IRuntimeConfig = {
  request?: RequestConfig
};

--- END: src/.umi-production/plugin-request/runtimeConfig.d.ts ---

--- START: src/.umi-production/plugin-request/types.d.ts ---
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
export type {
  RequestConfig,
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError,
  RequestError,
  RequestInterceptorAxios,
  RequestInterceptorUmiRequest,
  RequestInterceptor,
  ErrorInterceptor,
  ResponseInterceptor,
  RequestOptions,
  Request } from './request';

--- END: src/.umi-production/plugin-request/types.d.ts ---

--- START: src/components/Footer/index.tsx ---
import { GithubOutlined, FileOutlined } from '@ant-design/icons';
import { DefaultFooter } from '@ant-design/pro-components';
import '@umijs/max';
import React from 'react';

const Footer: React.FC = () => {
  const defaultMessage = 'IDT@2024';
  const currentYear = new Date().getFullYear();
  return (
    <DefaultFooter
      style={{
        background: 'none',
      }}
      copyright={`${currentYear} ${defaultMessage}`}
      links={[
        {
          key: 'codeNav',
          title: (
              <>
                <FileOutlined /> AMSNet
              </>
          ),
          href: 'https://arxiv.org/abs/2405.09045',
          blankTarget: true,
        },
        {
          key: 'AMSNet-KG',
          title: (
            <>
              <FileOutlined /> AMSNet-KG
            </>
          ),
          href: 'https://arxiv.org/abs/2411.13560',
          blankTarget: true,
        },
      ]}
    />
  );
};
export default Footer;

--- END: src/components/Footer/index.tsx ---

--- START: src/components/HeaderDropdown/index.tsx ---
import { Dropdown } from 'antd';
import type { DropDownProps } from 'antd/es/dropdown';
import React from 'react';
import { useEmotionCss } from '@ant-design/use-emotion-css';
import classNames from 'classnames';

export type HeaderDropdownProps = {
  overlayClassName?: string;
  placement?: 'bottomLeft' | 'bottomRight' | 'topLeft' | 'topCenter' | 'topRight' | 'bottomCenter';
} & Omit<DropDownProps, 'overlay'>;

const HeaderDropdown: React.FC<HeaderDropdownProps> = ({ overlayClassName: cls, ...restProps }) => {
  const className = useEmotionCss(({ token }) => {
    return {
      [`@media screen and (max-width: ${token.screenXS})`]: {
        width: '100%',
      },
    };
  });
  return <Dropdown overlayClassName={classNames(className, cls)} {...restProps} />;
};

export default HeaderDropdown;

--- END: src/components/HeaderDropdown/index.tsx ---

--- START: src/components/RightContent/AvatarDropdown.tsx ---
import { userLogoutUsingPost } from '@/services/backend/userController';
import { LogoutOutlined, SettingOutlined, UserOutlined } from '@ant-design/icons';
import { history, useModel } from '@umijs/max';
import { Avatar, Button, Space } from 'antd';
import { stringify } from 'querystring';
import type { MenuInfo } from 'rc-menu/lib/interface';
import React, { useCallback, useState, useEffect } from 'react';
import { flushSync } from 'react-dom';
import { Link } from 'umi';
import HeaderDropdown from '../HeaderDropdown';

// 定义翻译内容
const translations = {
    zh: {
        login: '登录',
        userCenter: '个人中心',
        userSettings: '个人设置',
        logout: '退出登录',
        noName: '无名'
    },
    en: {
        login: 'Login',
        userCenter: 'User Center',
        userSettings: 'User Settings',
        logout: 'Logout',
        noName: 'No Name'
    }
};

export type GlobalHeaderRightProps = {
    menu?: boolean;
};

export const AvatarDropdown: React.FC<GlobalHeaderRightProps> = ({ menu }) => {
    const { initialState, setInitialState } = useModel('@@initialState');
    const [currentLang, setCurrentLang] = useState(initialState?.language || 'zh');
    const t = translations[currentLang as keyof typeof translations];

    // Update language when global language changes
    useEffect(() => {
        const handleLanguageChange = (event: Event) => {
            const customEvent = event as CustomEvent;
            setCurrentLang(customEvent.detail.language);
        };

        window.addEventListener('languageChange', handleLanguageChange);
        setCurrentLang(initialState?.language || 'zh');
        // message.info(currentLang === 'zh' ? '已切换为中文' : 'Language changed to English');

        return () => {
            window.removeEventListener('languageChange', handleLanguageChange);
        };
    }, [initialState?.language]);

    /**
     * 退出登录，并且将当前的 url 保存
     */
    const loginOut = async () => {
        await userLogoutUsingPost();
        const { search, pathname } = window.location;
        const urlParams = new URL(window.location.href).searchParams;
        /** 此方法会跳转到 redirect 参数所在的位置 */
        const redirect = urlParams.get('redirect');
        // Note: There may be security issues, please note
        if (window.location.pathname !== '/user/login' && !redirect) {
            history.replace({
                pathname: '/user/login',
                search: stringify({
                    redirect: pathname + search,
                }),
            });
        }
    };

    const onMenuClick = useCallback(
        (event: MenuInfo) => {
            const { key } = event;
            if (key === 'logout') {
                flushSync(() => {
                    setInitialState((s) => ({ ...s, currentUser: undefined }));
                });
                loginOut();
                return;
            }
            history.push(`/account/${key}`);
        },
        [setInitialState],
    );

    const { currentUser } = initialState || {};

    if (!currentUser) {
        return (
            <Link to="/user/login">
                <Button type="primary" shape="round">
                    {t.login}
                </Button>
            </Link>
        );
    }

    const menuItems = [
        ...(menu
            ? [
                {
                    key: 'center',
                    icon: <UserOutlined />,
                    label: t.userCenter,
                },
                {
                    key: 'settings',
                    icon: <SettingOutlined />,
                    label: t.userSettings,
                },
                {
                    type: 'divider' as const,
                },
            ]
            : []),
        {
            key: 'logout',
            icon: <LogoutOutlined />,
            label: t.logout,
        },
    ];

    return (
        <HeaderDropdown
            menu={{
                selectedKeys: [],
                onClick: onMenuClick,
                items: menuItems,
            }}
        >
            <Space>
                {currentUser?.userAvatar ? (
                    <Avatar size="small" src={currentUser?.userAvatar} />
                ) : (
                    <Avatar size="small" icon={<UserOutlined />} />
                )}
                <span className="anticon">{currentUser?.userName ?? t.noName}</span>
            </Space>
        </HeaderDropdown>
    );
};

export const AvatarName = () => {};

--- END: src/components/RightContent/AvatarDropdown.tsx ---

--- START: src/constants/index.ts ---
/**
 * 本地后端地址
 */
// export const BACKEND_HOST_LOCAL = "http://amsnet.free.idcfengye.com";
// export const BACKEND_HOST_LOCAL = "http://111.229.103.50/prod-api";

export const BACKEND_HOST_LOCAL = "http://111.229.103.50/prod-api";

/**
 * 线上后端地址
 */
export const BACKEND_HOST_PROD = "http://111.229.103.50/prod-api";

/**
 * ChatGLM聊天模型API
 */
export const ChatGLM_API_Key = "df2bc2f478574aa6b6b251345afafd22.PQlSVfFXZ6hv5rF1";

--- END: src/constants/index.ts ---

--- START: src/pages/404.tsx ---
import { history } from '@umijs/max';
import { Button, Result } from 'antd';
import React from 'react';

const NoFoundPage: React.FC = () => (
  <Result
    status="404"
    title="404"
    subTitle="Sorry, the page you visited does not exist."
    extra={
      <Button type="primary" onClick={() => history.push('/')}>
        Back Home
      </Button>
    }
  />
);

export default NoFoundPage;

--- END: src/pages/404.tsx ---

--- START: src/pages/Admin.tsx ---
import { HeartTwoTone, SmileTwoTone } from '@ant-design/icons';
import { PageContainer } from '@ant-design/pro-components';
import '@umijs/max';
import { Alert, Card, Typography } from 'antd';
import React from 'react';
const Admin: React.FC = () => {
  return (
    <PageContainer content={' 这个页面只有 admin 权限才能查看'}>
      <Card>
        <Alert
          message={'更快更强的重型组件，已经发布。'}
          type="success"
          showIcon
          banner
          style={{
            margin: -12,
            marginBottom: 48,
          }}
        />
        <Typography.Title
          level={2}
          style={{
            textAlign: 'center',
          }}
        >
          <SmileTwoTone /> Ant Design Pro <HeartTwoTone twoToneColor="#eb2f96" /> You
        </Typography.Title>
      </Card>
      <p
        style={{
          textAlign: 'center',
          marginTop: 24,
        }}
      >
        Want to add more pages? Please refer to{' '}
        <a href="https://pro.ant.design/docs/block-cn" target="_blank" rel="noopener noreferrer">
          use block
        </a>
        。
      </p>
    </PageContainer>
  );
};
export default Admin;

--- END: src/pages/Admin.tsx ---

--- START: src/pages/Welcome.css ---
/* Welcome.css */

/* 全局渐显动画 */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* 卡片容器 */
.welcome-card {
  animation: fadeIn 0.8s ease-out;
  border: none;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

/* 主内容区域 */
.welcome-content {
  display: flex;
  flex-direction: column;
  gap: 24px;
}

/* 欢迎标题 */
.welcome-title {
  font-size: 28px;
  font-weight: bold;
  margin: 0;
  animation: fadeIn 1s ease-out;
}

/* 欢迎描述 */
.welcome-desc {
  font-size: 16px;
  line-height: 1.6;
  margin: 0;
  white-space: pre-wrap;
  animation: fadeIn 1.2s ease-out;
}

/* 卡片组容器 */
.cards-container {
  display: flex;
  flex-wrap: wrap;
  gap: 24px;
  animation: fadeIn 1.4s ease-out;
}

/* 信息卡片 */
.info-card {
  background-color: #fff;
  border: 1px solid #e8e8e8;
  border-radius: 12px;
  padding: 20px;
  flex: 1;
  min-width: 260px;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  position: relative;
  overflow: hidden;
}

/* 卡片悬停动画 */
.info-card:hover {
  transform: translateY(-8px);
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
}

/* 卡片点击反馈 */
.info-card:active {
  transform: translateY(2px);
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
}

/* 卡片头部：编号和标题 */
.card-header {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 16px;
}

/* 编号框 */
.index-box {
  width: 48px;
  height: 48px;
  background-color: #1890ff;
  border-radius: 8px;
  display: flex;
  justify-content: center;
  align-items: center;
  color: #fff;
  font-weight: bold;
  font-size: 18px;
  flex-shrink: 0;
  transition: background-color 0.3s ease;
}

/* 编号框悬停颜色变化 */
.info-card:hover .index-box {
  background-color: #147ad6;
}

/* 卡片标题 */
.title {
  font-size: 18px;
  font-weight: 600;
}

/* 卡片描述 */
.desc {
  font-size: 14px;
  color: #666;
  margin-bottom: 16px;
}

/* “了解更多”链接 */
.learn-more {
  font-size: 14px;
  color: #1890ff;
  text-decoration: none;
  position: relative;
  transition: color 0.3s ease;
}

/* 链接下划线动画 */
.learn-more::after {
  content: "";
  position: absolute;
  left: 0;
  bottom: -2px;
  width: 100%;
  height: 2px;
  background-color: #1890ff;
  transform: scaleX(0);
  transform-origin: left;
  transition: transform 0.3s ease;
}

/* 链接悬停效果 */
.learn-more:hover {
  color: #147ad6;
}

.learn-more:hover::after {
  transform: scaleX(1);
}

/* 响应式设计：移动端布局 */
@media (max-width: 768px) {
  .cards-container {
    flex-direction: column;
  }
  .info-card {
    min-width: 100%;
  }
}

--- END: src/pages/Welcome.css ---

--- START: src/pages/Welcome.tsx ---
import React, { useState, useEffect } from 'react';
import { PageContainer } from '@ant-design/pro-components';
import { Card, theme } from 'antd';
import { useModel } from '@umijs/max';
import './Welcome.css'; // 引入美化后的 CSS

// 翻译内容
const translations = {
  zh: {
    welcomeTitle: '欢迎使用AMSNet',
    welcomeDesc:
      'AMSNet是宁波东方理工研究院在电路研究领域的重要成果，是用于模拟/混合信号（AMS）电路的网表数据集。它通过自动技术将电路图转换为网表，为电路设计提供关键数据支持，以解决多模态大语言模型（MLLM）在自动生成AMS电路时缺乏全面数据集的问题。\n\n数据集包含晶体管级电路图和SPICE格式网表，其规模和电路复杂性正在快速扩展，还计划纳入晶体管尺寸和性能规格等信息。同时也在探索功能宏识别（如检测LDO、ADC、DAC、PLL等）来丰富功能，提高电路设计效率。',
    learnMore: '了解更多',
    card1Title: '了解AMSNet数据集',
    card1Desc: '包含晶体管级电路图和SPICE网表，为电路设计提供数据支持。',
    card2Title: 'AMSNet的功能扩展',
    card2Desc: '正在快速扩展规模和复杂性，计划纳入晶体管尺寸和性能规格，探索功能宏识别。',
    card3Title: 'AMSNet在电路设计中的应用',
    card3Desc: '促进MLLM在AMS电路设计中的应用探索，为电路设计提供高效支持。'
  },
  en: {
    welcomeTitle: 'Welcome to AMSNet',
    welcomeDesc:
      'AMSNet is an important achievement of Ningbo Oriental Institute of Technology in the field of circuit research, a netlist dataset for analog/mixed signal (AMS) circuits. It converts circuit diagrams into netlists through automated technology, providing key data support for circuit design, to address the lack of comprehensive datasets when multimodal large language models (MLLM) automatically generate AMS circuits.\n\nThe dataset contains transistor-level circuit diagrams and SPICE format netlists, with scale and circuit complexity rapidly expanding. There are plans to incorporate transistor dimensions and performance specifications. Meanwhile, functional macro recognition (such as detecting LDO, ADC, DAC, PLL, etc.) is being explored to enrich functionality and improve circuit design efficiency.',
    learnMore: 'Learn More',
    card1Title: 'About AMSNet Dataset',
    card1Desc: 'Contains transistor-level circuit diagrams and SPICE netlists, providing data support for circuit design.',
    card2Title: 'AMSNet Feature Extensions',
    card2Desc: 'Rapidly expanding in scale and complexity, planning to incorporate transistor dimensions and performance specifications, exploring functional macro recognition.',
    card3Title: 'AMSNet Applications in Circuit Design',
    card3Desc: 'Promotes the application exploration of MLLM in AMS circuit design, providing efficient support for circuit design.'
  }
};

interface InfoCardProps {
  title: string;
  index: number;
  desc: string;
  href: string;
  learnMoreText: string;
}

/**
 * 单个信息卡片组件
 */
const InfoCard: React.FC<InfoCardProps> = ({ title, href, index, desc, learnMoreText }) => {
  const { token } = theme.useToken();

  return (
    <div className="info-card">
      <div className="card-header">
        <div className="index-box">{index}</div>
        <div className="title" style={{ color: token.colorText }}>{title}</div>
      </div>
      <div className="desc">{desc}</div>
      <a href={href} target="_blank" rel="noreferrer" className="learn-more">
        {learnMoreText} &gt;
      </a>
    </div>
  );
};

const Welcome: React.FC = () => {
  const { token } = theme.useToken();
  const { initialState } = useModel('@@initialState');
  const [currentLang, setCurrentLang] = useState(initialState?.language || 'zh');
  const t = translations[currentLang as keyof typeof translations];

  // 监听全局语言切换
  useEffect(() => {
    const handleLanguageChange = (event: Event) => {
      const customEvent = event as CustomEvent;
      setCurrentLang(customEvent.detail.language);
    };

    window.addEventListener('languageChange', handleLanguageChange);
    setCurrentLang(initialState?.language || 'zh');

    return () => {
      window.removeEventListener('languageChange', handleLanguageChange);
    };
  }, [initialState?.language]);

  return (
    <PageContainer>
      <Card
        className="welcome-card"
        style={{
          borderRadius: 12,
          // 根据导航主题设置背景渐变
          background: initialState?.settings?.navTheme === 'realDark'
            ? 'linear-gradient(75deg, #1A1B1F, #191C1F)'
            : 'linear-gradient(75deg, #FBFDFF, #F5F7FF)'
        }}
        bodyStyle={{ padding: '40px' }}
      >
        <div className="welcome-content">
          <h1 className="welcome-title" style={{ color: token.colorTextHeading }}>
            {t.welcomeTitle}
          </h1>
          <p className="welcome-desc" style={{ color: token.colorTextSecondary }}>
            {t.welcomeDesc}
          </p>
          <div className="cards-container">
            <InfoCard
              index={1}
              href="https://ams-net.github.io/"
              title={t.card1Title}
              desc={t.card1Desc}
              learnMoreText={t.learnMore}
            />
            <InfoCard
              index={2}
              href="https://your-link-2.com"
              title={t.card2Title}
              desc={t.card2Desc}
              learnMoreText={t.learnMore}
            />
            <InfoCard
              index={3}
              href="https://your-link-3.com"
              title={t.card3Title}
              desc={t.card3Desc}
              learnMoreText={t.learnMore}
            />
          </div>
        </div>
      </Card>
    </PageContainer>
  );
};

export default Welcome;

--- END: src/pages/Welcome.tsx ---

--- START: src/pages/Admin/User/index.tsx ---
import CreateModal from '@/pages/Admin/User/components/CreateModal';
import UpdateModal from '@/pages/Admin/User/components/UpdateModal';
import { deleteUserUsingPost, listUserByPageUsingPost } from '@/services/backend/userController';
import { PlusOutlined } from '@ant-design/icons';
import type { ActionType, ProColumns } from '@ant-design/pro-components';
import { PageContainer, ProTable } from '@ant-design/pro-components';
import '@umijs/max';
import { Button, message, Space, Typography } from 'antd';
import React, { useRef, useState } from 'react';

/**
 * 用户管理页面
 *
 * @constructor
 */
const UserAdminPage: React.FC = () => {
  // 是否显示新建窗口
  const [createModalVisible, setCreateModalVisible] = useState<boolean>(false);
  // 是否显示更新窗口
  const [updateModalVisible, setUpdateModalVisible] = useState<boolean>(false);
  const actionRef = useRef<ActionType>();
  // 当前用户点击的数据
  const [currentRow, setCurrentRow] = useState<API.User>();

  /**
   * 删除节点
   *
   * @param row
   */
  const handleDelete = async (row: API.User) => {
    const hide = message.loading('正在删除');
    if (!row) return true;
    try {
      await deleteUserUsingPost({
        id: row.id as any,
      });
      hide();
      message.success('删除成功');
      actionRef?.current?.reload();
      return true;
    } catch (error: any) {
      hide();
      message.error('删除失败，' + error.message);
      return false;
    }
  };

  /**
   * 表格列配置
   */
  const columns: ProColumns<API.User>[] = [
    {
      title: 'id',
      dataIndex: 'id',
      valueType: 'text',
      hideInForm: true,
    },
    {
      title: '账号',
      dataIndex: 'userAccount',
      valueType: 'text',
    },
    {
      title: '用户名',
      dataIndex: 'userName',
      valueType: 'text',
    },
    {
      title: '头像',
      dataIndex: 'userAvatar',
      valueType: 'image',
      fieldProps: {
        width: 64,
      },
      hideInSearch: true,
    },
    {
      title: '简介',
      dataIndex: 'userProfile',
      valueType: 'textarea',
    },
    {
      title: '权限',
      dataIndex: 'userRole',
      valueEnum: {
        user: {
          text: '用户',
        },
        admin: {
          text: '管理员',
        },
      },
    },
    {
      title: '创建时间',
      sorter: true,
      dataIndex: 'createTime',
      valueType: 'dateTime',
      hideInSearch: true,
      hideInForm: true,
    },
    {
      title: '更新时间',
      sorter: true,
      dataIndex: 'updateTime',
      valueType: 'dateTime',
      hideInSearch: true,
      hideInForm: true,
    },
    {
      title: '操作',
      dataIndex: 'option',
      valueType: 'option',
      render: (_, record) => (
        <Space size="middle">
          <Typography.Link
            onClick={() => {
              setCurrentRow(record);
              setUpdateModalVisible(true);
            }}
          >
            修改
          </Typography.Link>
          <Typography.Link type="danger" onClick={() => handleDelete(record)}>
            删除
          </Typography.Link>
        </Space>
      ),
    },
  ];
  return (
    <PageContainer>
      <ProTable<API.User>
        headerTitle={'查询表格'}
        actionRef={actionRef}
        rowKey="key"
        search={{
          labelWidth: 120,
        }}
        toolBarRender={() => [
          <Button
            type="primary"
            key="primary"
            onClick={() => {
              setCreateModalVisible(true);
            }}
          >
            <PlusOutlined /> 新建
          </Button>,
        ]}
        request={async (params, sort, filter) => {
          const sortField = Object.keys(sort)?.[0];
          const sortOrder = sort?.[sortField] ?? undefined;

          const { data, code } = await listUserByPageUsingPost({
            ...params,
            sortField,
            sortOrder,
            ...filter,
          } as API.UserQueryRequest);

          return {
            success: code === 0,
            data: data?.records || [],
            total: Number(data?.total) || 0,
          };
        }}
        columns={columns}
      />
      <CreateModal
        visible={createModalVisible}
        columns={columns}
        onSubmit={() => {
          setCreateModalVisible(false);
          actionRef.current?.reload();
        }}
        onCancel={() => {
          setCreateModalVisible(false);
        }}
      />
      <UpdateModal
        visible={updateModalVisible}
        columns={columns}
        oldData={currentRow}
        onSubmit={() => {
          setUpdateModalVisible(false);
          setCurrentRow(undefined);
          actionRef.current?.reload();
        }}
        onCancel={() => {
          setUpdateModalVisible(false);
        }}
      />
    </PageContainer>
  );
};
export default UserAdminPage;

--- END: src/pages/Admin/User/index.tsx ---

--- START: src/pages/Admin/User/components/CreateModal.tsx ---
import { addUserUsingPost } from '@/services/backend/userController';
import { ProColumns, ProTable } from '@ant-design/pro-components';
import '@umijs/max';
import { message, Modal } from 'antd';
import React from 'react';

interface Props {
  visible: boolean;
  columns: ProColumns<API.User>[];
  onSubmit: (values: API.UserAddRequest) => void;
  onCancel: () => void;
}

/**
 * 添加节点
 * @param fields
 */
const handleAdd = async (fields: API.UserAddRequest) => {
  const hide = message.loading('正在添加');
  try {
    await addUserUsingPost(fields);
    hide();
    message.success('创建成功');
    return true;
  } catch (error: any) {
    hide();
    message.error('创建失败，' + error.message);
    return false;
  }
};

/**
 * 创建弹窗
 * @param props
 * @constructor
 */
const CreateModal: React.FC<Props> = (props) => {
  const { visible, columns, onSubmit, onCancel } = props;

  return (
    <Modal
      destroyOnClose
      title={'创建'}
      open={visible}
      footer={null}
      onCancel={() => {
        onCancel?.();
      }}
    >
      <ProTable
        type="form"
        columns={columns}
        onSubmit={async (values: API.UserAddRequest) => {
          const success = await handleAdd(values);
          if (success) {
            onSubmit?.(values);
          }
        }}
      />
    </Modal>
  );
};
export default CreateModal;

--- END: src/pages/Admin/User/components/CreateModal.tsx ---

--- START: src/pages/Admin/User/components/UpdateModal.tsx ---
import { updateUserUsingPost } from '@/services/backend/userController';
import { ProColumns, ProTable } from '@ant-design/pro-components';
import '@umijs/max';
import { message, Modal } from 'antd';
import React from 'react';

interface Props {
  oldData?: API.User;
  visible: boolean;
  columns: ProColumns<API.User>[];
  onSubmit: (values: API.UserAddRequest) => void;
  onCancel: () => void;
}

/**
 * 更新节点
 *
 * @param fields
 */
const handleUpdate = async (fields: API.UserUpdateRequest) => {
  const hide = message.loading('正在更新');
  try {
    await updateUserUsingPost(fields);
    hide();
    message.success('更新成功');
    return true;
  } catch (error: any) {
    hide();
    message.error('更新失败，' + error.message);
    return false;
  }
};

/**
 * 更新弹窗
 * @param props
 * @constructor
 */
const UpdateModal: React.FC<Props> = (props) => {
  const { oldData, visible, columns, onSubmit, onCancel } = props;

  if (!oldData) {
    return <></>;
  }

  return (
    <Modal
      destroyOnClose
      title={'更新'}
      open={visible}
      footer={null}
      onCancel={() => {
        onCancel?.();
      }}
    >
      <ProTable
        type="form"
        columns={columns}
        form={{
          initialValues: oldData,
        }}
        onSubmit={async (values: API.UserAddRequest) => {
          const success = await handleUpdate({
            ...values,
            id: oldData.id as any,
          });
          if (success) {
            onSubmit?.(values);
          }
        }}
      />
    </Modal>
  );
};
export default UpdateModal;

--- END: src/pages/Admin/User/components/UpdateModal.tsx ---

--- START: src/pages/FileOperate/constants.ts ---
// FileOperate/constants.ts

/**
 * @description 标注类别信息的接口定义
 */
export interface ClassInfo {
  label: string;
  color: string;
}

/**
 * @description 标注类别索引与其颜色、标签的映射关系。
 * 这是手动标注（画框）时，用户选择的类别列表及其在画布上显示的颜色。
 */
export const indexClassColorMap: { [key: number]: ClassInfo } = {
  0: { label: 'capacitor', color: '#ff0000' }, 1: { label: 'pmos', color: '#00ff00' },
  2: { label: 'nmos', color: '#0000ff' }, 3: { label: 'vdd', color: '#ffff00' },
  4: { label: 'gnd', color: '#ff00ff' }, 5: { label: 'nmos-cross', color: '#00ffff' },
  6: { label: 'current', color: '#800000' }, 7: { label: 'cross-line-curved', color: '#008000' },
  8: { label: 'port', color: '#000080' }, 9: { label: 'resistor', color: '#808000' },
  10: { label: 'npn', color: '#800080' }, 11: { label: 'inductor', color: '#008080' },
  12: { label: 'Box_ic', color: '#c0c0c0' }, 13: { label: 'single-end-amp', color: '#808080' },
  14: { label: 'diode', color: '#ff6600' }, 15: { label: 'voltage', color: '#ffcc00' },
  16: { label: 'switch', color: '#ccff00' }, 17: { label: 'pnp', color: '#00ffcc' },
  18: { label: 'nmos-bulk', color: '#00ccff' }, 19: { label: 'voltage-lines', color: '#6600ff' },
  20: { label: 'pmos-bulk', color: '#cc00ff' }, 21: { label: 'pmos-cross', color: '#ff00cc' },
  22: { label: 'switch-3', color: '#ff9999' }, 23: { label: 'single-input-single-end-amp', color: '#99ff99' },
  24: { label: 'diff-amp', color: '#9999ff' }, 25: { label: 'resistor2_3', color: '#ffff99' },
  26: { label: 'antenna', color: '#99ffcc' }, 27: { label: 'inductor-3', color: '#cc99ff' },
  28: { label: 'npn-cross', color: '#ff99cc' }, 29: { label: 'capacitor-3', color: '#ffcc99' },
  30: { label: 'pnp-cross', color: '#ccff99' }, 31: { label: 'black-dot', color: '#99ccff' },
  // 可以根据需要继续添加更多类别
};

/**
 * @description JSON文件中组件名称 (jsonName) 与其染色时使用的颜色映射。
 * 当启用“染色模式”并点击画布上的标注框时，会使用此处的颜色对框进行染色，
 * 以视觉化地表示该框与JSON数据中某个特定组件的关联。
 */
export const jsonNameColorMap: { [key: string]: string } = {
  'opamp': '#FFDDC1', 'resistor': '#C1FFD7', 'capacitor': '#C1D4FF', 'switch': '#F0C1FF',
  'common_source_unloaded': '#FFC1C1', 'common_gate_unloaded': '#FFEAC1', 'source_follower_unloaded': '#E0FFC1',
  'common_source': '#C1FFE5', 'common_gate': '#C1E0FF', 'source_follower': '#D4C1FF',
  'cascode_unloaded': '#F0C1FF', 'cascode': '#FFC1E0', 'differential_pair': '#C1FFD4',
  'current_mirror': '#D4C1FF', 'current_source': '#FFD4C1', 'load': '#C1FFD4',
  // 可以根据实际的JSON数据中的组件名称添加更多映射
};

/**
 * @description 单个语言的文本资源接口
 */
interface TranslationSet {
  [key: string]: string;
}

/**
 * @description 国际化文本资源。
 * 为应用内所有静态文本提供多语言支持。
 */
export const translations: { [key: string]: TranslationSet } = {
  zh: {
    uploadFolder: '上传文件夹',
    undo: '撤销',
    redo: '重做',
    save: '保存',
    deleteBox: '删除选中框',
    restoreDeleted: '恢复删除',
    category: '标注类别',
    previous: '上一张',
    next: '下一张',
    currentFile: '当前文件',
    function: '高级功能',
    coloringMode: '染色模式',
    drawingMode: '绘制模式',
    addProperty: '增加属性',
    addNode: '添加节点',
    nodeName: '节点名称',
    key: '键',
    value: '值',
    delete: '删除',
    saveCurrent: '保存当前',
    saveAll: '导出全部 (ZIP)',
    chooseJsonName: '选择组件名称 (染色用)',
    chooseJsonType: '选择组件类型 (染色用)',
    noFile: '没有可操作的文件',
    noDeletedBoxes: '没有可恢复的删除框',
    fileManagement: '文件',
    annotationTools: '工具',
    actions: '操作',
    dataExplorer: '数据浏览',
    settings: '设置',
    annotations: '标注列表',
    currentImage: "当前:",
    noAnnotations: "当前图片无标注",
    noImages: "请先上传文件夹",
    lineWidth: "线宽",
    selectTool: "选择/移动",
    rectTool: "矩形工具",
    clearAnnotationsButton: "清空当前图片标注",
    operationSuccessful: "操作成功",
    noUndoOperations: "没有可撤销的操作",
    noRedoOperations: "没有可重做的操作",
  },
  en: {
    uploadFolder: 'Upload Folder',
    undo: 'Undo',
    redo: 'Redo',
    save: 'Save',
    deleteBox: 'Delete Selected',
    restoreDeleted: 'Restore Deleted',
    category: 'Category',
    previous: 'Previous',
    next: 'Next',
    currentFile: 'Current File',
    function: 'Advanced Functions',
    coloringMode: 'Coloring Mode',
    drawingMode: 'Drawing Mode',
    addProperty: 'Add Property',
    addNode: 'Add Node',
    nodeName: 'Node Name',
    key: 'Key',
    value: 'Value',
    delete: 'Delete',
    saveCurrent: 'Save Current',
    saveAll: 'Export All (ZIP)',
    chooseJsonName: 'Choose Component (for coloring)',
    chooseJsonType: 'Choose Type (for coloring)',
    noFile: 'No files to operate on',
    noDeletedBoxes: 'No deleted boxes to restore',
    fileManagement: 'Files',
    annotationTools: 'Tools',
    actions: 'Actions',
    dataExplorer: 'Data Explorer',
    settings: 'Settings',
    annotations: 'Annotations',
    currentImage: "Current:",
    noAnnotations: "No annotations for this image",
    noImages: "Please upload a folder first",
    lineWidth: "Line Width",
    selectTool: "Select/Move",
    rectTool: "Rectangle Tool",
    clearAnnotationsButton: "Clear Annotations for Current Image",
    operationSuccessful: "Operation successful",
    noUndoOperations: "No operations to undo",
    noRedoOperations: "No operations to redo",
  }
};
--- END: src/pages/FileOperate/constants.ts ---

--- START: src/pages/FileOperate/index.css ---
/* FileOperate/index.css */
/* Consistent Aetherium Weave Theme */

:root {
  --base-bg: #F0F5FF;
  --panel-bg: rgba(255, 255, 255, 0.75);
  --panel-bg-solid: #FFFFFF;
  --text-primary: #0D1A2E;
  --text-secondary: #5A6A82;
  --accent-primary: #4A90E2;
  --accent-primary-glow: rgba(74, 144, 226, 0.4);
  --accent-primary-hover: #357ABD;
  --border-color-light: #E8E8E8;
  --border-color-medium: #D9D9D9;
  --danger-color: #E94F4F;
  --danger-glow: rgba(233, 79, 79, 0.4);
  --font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
  --transition-speed: 0.3s;
  --transition-curve: ease-in-out;
}

.file-operate-layout {
  height: 100vh;
  background-color: var(--base-bg);
  font-family: var(--font-family);
  color: var(--text-primary);
  overflow: hidden;
  display: flex; /* Use flex for main layout */
}

/* Left Tool Sider - Similar to MaskOperate */
.file-operate-tool-sider {
  background: var(--panel-bg-solid) !important;
  border-right: 1px solid var(--border-color-light);
  box-shadow: 2px 0 8px rgba(0, 30, 80, 0.05);
  z-index: 20;
  flex-shrink: 0;
}

.file-operate-tool-sider .ant-space-item {
  width: 100%;
}
.file-operate-tool-sider .tool-button-pro {
  width: 44px;
  height: 44px;
  font-size: 16px;
  color: var(--text-secondary);
}
.file-operate-tool-sider .tool-button-pro.ant-btn-primary {
  color: #fff;
}
.file-operate-tool-sider .tool-button-pro.ant-btn-text:hover,
.file-operate-tool-sider .tool-button-pro.ant-btn-text:focus {
  background: var(--base-bg) !important;
  color: var(--accent-primary) !important;
}


/* Main Content Area (Center) */
.file-operate-main-content-layout {
  background: transparent;
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}

.file-operate-top-toolbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 16px;
  height: 56px;
  background: var(--panel-bg);
  backdrop-filter: blur(12px);
  border-bottom: 1px solid var(--border-color-light);
  z-index: 10;
  flex-shrink: 0;
}
.file-operate-top-toolbar .image-info-text {
  color: var(--text-secondary);
  font-weight: 500;
  max-width: 300px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}


.file-operate-canvas-content {
  flex-grow: 1;
  padding: 16px;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  position: relative;
}

.file-operate-canvas-wrapper {
  width: 100%;
  height: 100%;
  overflow: auto;
  background: var(--panel-bg-solid);
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 40, 100, 0.1);
  display: flex;
  justify-content: center;
  align-items: center;
}

.file-operate-canvas-wrapper canvas {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
  cursor: crosshair; /* Default drawing cursor */
}
.file-operate-canvas-wrapper.coloring-mode canvas {
  cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="%234A90E2"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-13h2v6h-2zm0 8h2v2h-2z"/></svg>') 12 12, auto !important;
}


/* Right Inspector Sider - Similar to MaskOperate */
.file-operate-inspector-sider {
  background: var(--panel-bg) !important;
  backdrop-filter: blur(12px);
  border-left: 1px solid var(--border-color-light);
  box-shadow: -2px 0 8px rgba(0, 30, 80, 0.05);
  transition: width var(--transition-speed) var(--transition-curve),
  transform var(--transition-speed) var(--transition-curve);
  z-index: 20;
  flex-shrink: 0; /* Important for flex layout */
  display: flex; /* Allow children to flex */
  flex-direction: column; /* Stack children vertically */
}
.file-operate-inspector-sider .ant-tabs {
  flex-grow: 1; /* Make tabs take remaining space */
  display: flex;
  flex-direction: column;
}
.file-operate-inspector-sider .ant-tabs-content-holder {
  flex-grow: 1;
  overflow-y: auto; /* Allow content to scroll */
}
.file-operate-inspector-sider .ant-tabs-tab-btn .tab-text {
  margin-left: 8px;
}
.file-operate-inspector-sider .tab-pane-content {
  padding: 16px;
}

.resizer-horizontal { /* Renamed for clarity */
  width: 5px;
  cursor: col-resize;
  background: transparent;
  z-index: 15;
  flex-shrink: 0; /* Prevent resizer from shrinking */
  transition: background-color var(--transition-speed);
}
.resizer-horizontal:hover {
  background-color: var(--accent-primary-glow);
}


/* General Ant Design Component Overrides */
.ant-btn {
  border-radius: 6px;
  font-weight: 500;
}
.ant-btn-primary {
  background: var(--accent-primary);
  border-color: var(--accent-primary);
}
.ant-btn-primary:hover, .ant-btn-primary:focus {
  background: var(--accent-primary-hover);
  border-color: var(--accent-primary-hover);
}
.ant-form-item { margin-bottom: 16px; }
.ant-form-item-label > label { color: var(--text-secondary); font-weight: 500; }
.ant-select-selector, .ant-input-number, .ant-input {
  border-radius: 6px !important;
  border-color: var(--border-color-medium) !important;
}
.ant-select-selector:hover, .ant-input-number:hover, .ant-input:hover {
  border-color: var(--accent-primary) !important;
}
.ant-select-focused .ant-select-selector,
.ant-input-number-focused,
.ant-input:focus,
.ant-input-focused {
  border-color: var(--accent-primary) !important;
  box-shadow: 0 0 0 2px var(--accent-primary-glow) !important;
}

/* Custom Textarea for YOLO content */
.yolo-content-textarea {
  width: 100%;
  min-height: 200px; /* Adjust as needed */
  font-family: monospace;
  font-size: 12px;
  border: 1px solid var(--border-color-medium);
  border-radius: 6px;
  padding: 8px;
  resize: vertical;
}
.yolo-content-textarea:focus {
  border-color: var(--accent-primary);
  box-shadow: 0 0 0 2px var(--accent-primary-glow);
  outline: none;
}


/* Scrollbar */
::-webkit-scrollbar { width: 6px; height: 6px; }
::-webkit-scrollbar-track { background: transparent; }
::-webkit-scrollbar-thumb { background: var(--border-color-medium); border-radius: 3px; }
::-webkit-scrollbar-thumb:hover { background: var(--accent-primary); }

--- END: src/pages/FileOperate/index.css ---

--- START: src/pages/FileOperate/index.tsx ---
import React, { useState, useRef, useEffect, ChangeEvent, MouseEvent, useCallback } from 'react';
import { Layout, Tabs, Button, Space, InputNumber, Typography, Select, Form, Input, Tooltip, message, Card } from 'antd';
import { useModel } from "@umijs/max";
import JSZip from 'jszip';
import { saveAs } from 'file-saver';
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faUpload, faFolderOpen, faSave, faUndo, faRedo, faTrash, faHistory,
  faArrowLeft, faArrowRight, faTag, faPaintBrush, faPlus, faKey, faPen, faList, faEye, faMinusCircle, faMousePointer,
  faChevronLeft, faChevronRight // For inspector toggle
} from "@fortawesome/free-solid-svg-icons";
// 关键修复：导入现在会解析到 .ts 文件，所有类型都会被正确识别
import { indexClassColorMap, jsonNameColorMap, translations } from './constants';
import './index.css';

const { Option } = Select;
const { Text } = Typography;
const { Sider, Content } = Layout;
const { TabPane } = Tabs;

// 将接口定义移到组件外部，这是更好的实践
interface JsonData {
  local: {
    buildingBlocks: { [key: string]: string[] };
    constants: { [key: string]: string[] };
  };
  global: { [key: string]: any };
}

type Operation =
  | { type: 'draw'; yoloData: string[]; previousYoloContent: string | null }
  | { type: 'stain'; boxName: string; jsonType: 'buildingBlocks' | 'constants'; jsonName: string; previousJsonContent: string | null }
  | { type: 'delete'; deletedLines: { index: number; content: string }[]; previousYoloContent: string | null }
  | { type: 'json_change'; previousJsonContent: string | null; currentJsonContent: string | null };

const getFileNameWithoutExtension = (fileName: string): string => {
  const lastDotIndex = fileName.lastIndexOf('.');
  if (lastDotIndex === -1) return fileName;
  return fileName.substring(0, lastDotIndex);
};

const FileOperate: React.FC = () => {
  const { initialState } = useModel('@@initialState');
  const [currentLang, setCurrentLang] = useState(initialState?.language || 'zh');
  const t = translations[currentLang];

  const [indexClassColorMapState, setIndexClassColorMapState] = useState(indexClassColorMap);
  const [pngList, setPngList] = useState<File[]>([]);
  const [yoloList, setYoloList] = useState<File[]>([]);
  const [jsonList, setJsonList] = useState<File[]>([]);

  const [currentIndex, setCurrentIndex] = useState<number>(0);
  const [currentPng, setCurrentPng] = useState<File | null>(null);

  const [currentYoloContent, setCurrentYoloContent] = useState<string | null>(null);
  const [currentJsonContent, setCurrentJsonContent] = useState<string | null>(null);

  const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const [currentClassIndex, setCurrentClassIndex] = useState<number>(0);

  const [nodeName, setNodeName] = useState<string>('');
  const [nodePropertiesKeys, setNodePropertiesKeys] = useState<string[]>([]);
  const [nodePropertiesValues, setNodePropertiesValues] = useState<string[]>([]);
  const [globalList, setGlobalList] = useState<{ [key: number]: { nodeName: string, nodePropertiesKeys: string[], nodePropertiesValues: string[] } }>({});

  const [operationHistory, setOperationHistory] = useState<Operation[]>([]);
  const [redoHistory, setRedoHistory] = useState<Operation[]>([]);

  const [isDrawing, setIsDrawing] = useState(false);
  const [mouseDownCoords, setMouseDownCoords] = useState({ x: 0, y: 0 });
  const [canvasImageData, setCanvasImageData] = useState<ImageData | null>(null);

  const [selectedJsonName, setSelectedJsonName] = useState<string | null>(null);
  const [selectedJsonType, setSelectedJsonType] = useState<'buildingBlocks' | 'constants' | null>(null);
  const [isColoringMode, setIsColoringMode] = useState(false);

  const [redrawTrigger, setRedrawTrigger] = useState(0);

  const [leftSiderActualWidth, setLeftSiderActualWidth] = useState(300); // 恢复了布局相关的状态
  const [isResizingLeftSider, setIsResizingLeftSider] = useState(false);

  const [inspectorWidth, setInspectorWidth] = useState(320);
  const [isResizingInspector, setIsResizingInspector] = useState(false);
  const [isInspectorVisible, setIsInspectorVisible] = useState(true);

  useEffect(() => {
    setCurrentLang(initialState?.language || 'zh');
  }, [initialState?.language]);

  const stringifyJsonContent = useCallback((jsonObj: JsonData): string => {
    return JSON.stringify(jsonObj, null, 2);
  }, []);

  const parseJsonContent = useCallback((jsonContent: string | null): JsonData => {
    try {
      if (!jsonContent || jsonContent.trim() === "" || jsonContent.trim() === "{}") {
        return { local: { buildingBlocks: {}, constants: {} }, global: {} };
      }
      const parsed = JSON.parse(jsonContent);
      parsed.local = parsed.local || { buildingBlocks: {}, constants: {} };
      parsed.local.buildingBlocks = parsed.local.buildingBlocks || {};
      parsed.local.constants = parsed.local.constants || {};
      parsed.global = parsed.global || {};
      return parsed;
    } catch (e) {
      console.error("JSON parsing failed, returning default object.", e);
      return { local: { buildingBlocks: {}, constants: {} }, global: {} };
    }
  }, []);

  useEffect(() => {
    setOperationHistory([]);
    setRedoHistory([]);

    if (pngList.length > 0 && currentIndex < pngList.length) {
      setCurrentPng(pngList[currentIndex]);
    } else {
      setCurrentPng(null);
      setCurrentYoloContent(null);
      setCurrentJsonContent(null);
      return;
    }

    const readFileContent = async (fileList: File[], index: number, setter: (content: string | null) => void) => {
      if (fileList.length > index && fileList[index]) {
        try {
          const text = await fileList[index].text();
          setter(text);
        } catch (e) {
          console.error("Error reading file:", e);
          setter(null);
        }
      } else {
        setter(null);
      }
    };

    readFileContent(yoloList, currentIndex, (content) => setCurrentYoloContent(content ? content.split('\n').filter(line => line.trim() !== '').join('\n') : ''));
    
    readFileContent(jsonList, currentIndex, (content) => {
      const parsed = parseJsonContent(content);
      setCurrentJsonContent(stringifyJsonContent(parsed));
    });

  }, [currentIndex, pngList, yoloList, jsonList, parseJsonContent, stringifyJsonContent]);

  useEffect(() => {
    if (currentPng) {
      setRedrawTrigger(prev => prev + 1);
    }
  }, [currentPng]);

  const loadCurrentYoloContentToCanvas = useCallback((yoloContent: string | null) => {
    const canvas = canvasRef.current; if (!canvas || !yoloContent) return;
    const ctx = canvas.getContext('2d'); if (!ctx) return;
    const parseYoloContentToAbsolute = (relativeContent: string | null): string[] => {
      if (!relativeContent || !canvasRef.current || canvasRef.current.width === 0) return [];
      const canvas = canvasRef.current; const absoluteArray: string[] = [];
      relativeContent.split('\n').filter(Boolean).forEach(line => {
        const parts = line.split(' ').map(parseFloat); if (parts.length < 5 || parts.some(isNaN)) return;
        const [classIndex, relX, relY, relW, relH] = parts;
        const absLeft = (relX - relW / 2) * canvas.width, absTop = (relY - relH / 2) * canvas.height;
        const absRight = (relX + relW / 2) * canvas.width, absBottom = (relY + relH / 2) * canvas.height;
        const color = indexClassColorMapState[classIndex]?.color || '#808080';
        absoluteArray.push(`${color} ${absLeft} ${absTop} ${absRight} ${absBottom}`);
      });
      return absoluteArray;
    };
    parseYoloContentToAbsolute(yoloContent).forEach(item => {
      const [color, ...coords] = item.split(' ');
      const [left, top, right, bottom] = coords.map(parseFloat);
      ctx.beginPath(); ctx.strokeStyle = color; ctx.lineWidth = 2;
      ctx.rect(left, top, right - left, bottom - top); ctx.stroke();
    });
  }, [indexClassColorMapState]);
  
  const addRectNameToYoloContent = useCallback((content: string | null): string => {
    if (!content) return '';
    const classCounterMap = new Map<string, number>();
    return content.split('\n').filter(Boolean).map(line => {
      const parts = line.split(' '); const classIndexStr = parts[0];
      const classIndex = parseInt(classIndexStr, 10);
      const classCounter = classCounterMap.get(classIndexStr) || 0;
      classCounterMap.set(classIndexStr, classCounter + 1);
      const classLabel = indexClassColorMapState[classIndex]?.label || `class${classIndexStr}`;
      return `${classLabel}_${classCounter} ${line}`;
    }).join('\n');
  }, [indexClassColorMapState]);

  const loadCurrentJsonContentToCanvas = useCallback((jsonContent: string | null) => {
    const canvas = canvasRef.current; if (!canvas || !jsonContent || !currentYoloContent) return;
    const ctx = canvas.getContext('2d'); if (!ctx) return;
    const parsedJson = parseJsonContent(jsonContent);
    if (!parsedJson.local) return;
    const namedYoloMap = new Map(addRectNameToYoloContent(currentYoloContent).split('\n').map(line => {
      const [name, ...rest] = line.split(' '); return [name, rest.join(' ')];
    }));
    Object.entries(parsedJson.local).forEach(([, nameMap]) => {
      if (nameMap && typeof nameMap === 'object') {
        Object.entries(nameMap).forEach(([name, boxNamesArray]) => {
          const color = jsonNameColorMap[name];
          if (!color || !Array.isArray(boxNamesArray)) return;
          boxNamesArray.forEach(boxName => {
            const yoloData = namedYoloMap.get(boxName); if (!yoloData) return;
            const [, relX, relY, relW, relH] = yoloData.split(' ').map(parseFloat);
            const absW = relW * canvas.width, absH = relH * canvas.height;
            const absX = (relX * canvas.width) - absW / 2, absY = (relY * canvas.height) - absH / 2;
            ctx.fillStyle = color; ctx.globalAlpha = 0.3;
            ctx.fillRect(absX, absY, absW, absH); ctx.globalAlpha = 1.0;
          });
        });
      }
    });
  }, [currentYoloContent, parseJsonContent, addRectNameToYoloContent]);

  useEffect(() => {
    if (!canvasRef.current) return;
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    if (currentPng) {
      const img = new Image();
      img.onload = () => {
        canvas.width = img.width; canvas.height = img.height;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(img, 0, 0);
        loadCurrentYoloContentToCanvas(currentYoloContent);
        loadCurrentJsonContentToCanvas(currentJsonContent);
      };
      img.src = URL.createObjectURL(currentPng);
      return () => URL.revokeObjectURL(img.src);
    } else {
      if (canvas.width > 0 && canvas.height > 0) {
        ctx.clearRect(0,0, canvas.width, canvas.height);
        ctx.fillStyle = "#e0e8f0"; ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.font = "bold 20px Arial"; ctx.fillStyle = "#0050b3"; ctx.textAlign = "center";
        ctx.fillText(t.noImages, canvas.width / 2, canvas.height / 2);
      }
    }
  }, [redrawTrigger, currentPng, currentYoloContent, currentJsonContent, t.noImages, loadCurrentYoloContentToCanvas, loadCurrentJsonContentToCanvas]);

  useEffect(() => {
    const data = globalList[currentIndex];
    setNodeName(data?.nodeName || '');
    setNodePropertiesKeys(data?.nodePropertiesKeys || []);
    setNodePropertiesValues(data?.nodePropertiesValues || []);
  }, [currentIndex, globalList]);

  const handleLeftSiderResize = useCallback((e: globalThis.MouseEvent) => {
    if (isResizingLeftSider) {
      const newWidth = e.clientX;
      if (newWidth > 200 && newWidth < 600) {
        setLeftSiderActualWidth(newWidth);
      }
    }
  }, [isResizingLeftSider]);

  const stopLeftSiderResizing = useCallback(() => setIsResizingLeftSider(false), []);

  useEffect(() => {
    if (isResizingLeftSider) {
      document.body.style.userSelect = 'none';
      window.addEventListener('mousemove', handleLeftSiderResize);
      window.addEventListener('mouseup', stopLeftSiderResizing);
    } else {
      document.body.style.userSelect = '';
    }
    return () => {
      window.removeEventListener('mousemove', handleLeftSiderResize);
      window.removeEventListener('mouseup', stopLeftSiderResizing);
      document.body.style.userSelect = '';
    };
  }, [isResizingLeftSider, handleLeftSiderResize, stopLeftSiderResizing]);

  const handleInspectorResize = useCallback((e: globalThis.MouseEvent) => {
    if (isResizingInspector) {
      const newWidth = window.innerWidth - e.clientX;
      if (newWidth > 200 && newWidth < 800) {
        setInspectorWidth(newWidth);
      }
    }
  }, [isResizingInspector]);

  const stopInspectorResizing = useCallback(() => setIsResizingInspector(false), []);

  useEffect(() => {
    if (isResizingInspector) {
      document.body.style.userSelect = 'none';
      window.addEventListener('mousemove', handleInspectorResize);
      window.addEventListener('mouseup', stopInspectorResizing);
    } else {
      document.body.style.userSelect = '';
    }
    return () => {
      window.removeEventListener('mousemove', handleInspectorResize);
      window.removeEventListener('mouseup', stopInspectorResizing);
      document.body.style.userSelect = '';
    };
  }, [isResizingInspector, handleInspectorResize, stopInspectorResizing]);

  const handleFolderUpload = (event: ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files; if (!files) return;
    const newPngList: File[] = [], newYoloList: File[] = [], newJsonList: File[] = [];
    Array.from(files).forEach(file => {
      if (file.name.toLowerCase().includes('classes.txt')) {
        // This part is not fully type safe but acceptable for this specific use case
      } else if (file.type === 'image/png' || file.type === 'image/jpeg') {
        newPngList.push(file);
      } else if (file.name.endsWith('.txt')) {
        newYoloList.push(file);
      } else if (file.name.endsWith('.json')) {
        newJsonList.push(file);
      }
    });
    const compareFn = (a: File, b: File) => a.name.localeCompare(b.name, undefined, { numeric: true });
    setPngList(newPngList.sort(compareFn));
    setYoloList(newYoloList.sort(compareFn));
    setJsonList(newJsonList.sort(compareFn));
    setCurrentIndex(0);
  };

  const handleMouseDown = (e: MouseEvent<HTMLCanvasElement>) => {
    const canvas = canvasRef.current; if (!canvas) return;
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left, y = e.clientY - rect.top;
    setMouseDownCoords({ x, y });
    if (isColoringMode) { handleJsonBoxClick(e); return; }
    setIsDrawing(true);
    const ctx = canvas.getContext('2d'); if (ctx) setCanvasImageData(ctx.getImageData(0, 0, canvas.width, canvas.height));
  };

  const handleMouseMove = (e: MouseEvent<HTMLCanvasElement>) => {
    const canvas = canvasRef.current; if (!canvas || !isDrawing) return;
    const rect = canvas.getBoundingClientRect();
    const currentX = e.clientX - rect.left, currentY = e.clientY - rect.top;
    const ctx = canvas.getContext('2d');
    if (ctx && canvasImageData) {
      ctx.putImageData(canvasImageData, 0, 0);
      ctx.beginPath(); ctx.strokeStyle = indexClassColorMapState[currentClassIndex]?.color || 'black'; ctx.lineWidth = 2;
      ctx.setLineDash([6, 3]);
      ctx.rect(mouseDownCoords.x, mouseDownCoords.y, currentX - mouseDownCoords.x, currentY - mouseDownCoords.y);
      ctx.stroke();
      ctx.setLineDash([]);
    }
  };

  const handleMouseUp = (e: MouseEvent<HTMLCanvasElement>) => {
    if (!isDrawing) return;
    setIsDrawing(false);
    const canvas = canvasRef.current; if (!canvas) return;
    const rect = canvas.getBoundingClientRect();
    const upX = e.clientX - rect.left, upY = e.clientY - rect.top;
    const x1 = Math.min(mouseDownCoords.x, upX), y1 = Math.min(mouseDownCoords.y, upY);
    const width = Math.abs(upX - mouseDownCoords.x), height = Math.abs(upY - mouseDownCoords.y);
    if (width > 1 && height > 1) {
      const x_center = (x1 + width / 2) / canvas.width, y_center = (y1 + height / 2) / canvas.height;
      const yoloWidth = width / canvas.width, yoloHeight = height / canvas.height;
      const yoloFormatData = `${currentClassIndex} ${x_center.toFixed(6)} ${y_center.toFixed(6)} ${yoloWidth.toFixed(6)} ${yoloHeight.toFixed(6)}`;
      const previousYolo = currentYoloContent;

      // 关键修复：为 prev 参数添加明确类型，解决 implicit any 错误
      const newYoloContentValue = (prev: string | null) => (prev ? `${prev}\n${yoloFormatData}` : yoloFormatData);
      setCurrentYoloContent(newYoloContentValue);

      setOperationHistory(prev => [...prev, { type: 'draw', yoloData: [yoloFormatData], previousYoloContent: previousYolo }]);
      setRedoHistory([]);
    }
    setCanvasImageData(null);
    setRedrawTrigger(prev => prev + 1);
  };

  const handleJsonBoxClick = (e: MouseEvent<HTMLCanvasElement>) => {
    if (!isColoringMode || !selectedJsonName || !selectedJsonType) return;
    const canvas = canvasRef.current; if (!canvas || !currentYoloContent) return;
    const rect = canvas.getBoundingClientRect();
    const mouseX = e.clientX - rect.left, mouseY = e.clientY - rect.top;
    const namedYoloLines = addRectNameToYoloContent(currentYoloContent).split('\n');
    for (const line of namedYoloLines) {
      const [boxName, ...rest] = line.split(' '); const yoloData = rest.join(' ');
      const [, x, y, w, h] = yoloData.split(' ').map(parseFloat);
      if (isNaN(x) || isNaN(y) || isNaN(w) || isNaN(h)) continue;
      const boxX = x * canvas.width, boxY = y * canvas.height;
      const boxW = w * canvas.width, boxH = h * canvas.height;
      const left = boxX - boxW/2, top = boxY - boxH/2;
      if (mouseX >= left && mouseX <= left + boxW && mouseY >= top && mouseY <= top + boxH) {
        const previousJson = currentJsonContent;
        const newJson = stringifyJsonContent((() => {
          const jsonObj = parseJsonContent(currentJsonContent);
          const targetDict = jsonObj.local[selectedJsonType!];
          if (!targetDict[selectedJsonName]) targetDict[selectedJsonName] = [];
          if (!targetDict[selectedJsonName].includes(boxName)) targetDict[selectedJsonName].push(boxName);
          return jsonObj;
        })());
        setCurrentJsonContent(newJson);
        setOperationHistory(prev => [...prev, { type: 'stain', boxName, jsonType: selectedJsonType!, jsonName: selectedJsonName, previousJsonContent: previousJson }]);
        setRedoHistory([]);
        setRedrawTrigger(p => p + 1);
        break;
      }
    }
  };

  const handleUndo = () => {
    if (operationHistory.length === 0) { message.info(t.noUndoOperations); return; }
    const lastOperation = operationHistory[operationHistory.length - 1];
    const currentStateSnapshotForRedo: Operation = lastOperation.type === 'draw' ? { ...lastOperation, previousYoloContent: currentYoloContent } :
        (lastOperation.type === 'stain' ) ? { ...lastOperation, previousJsonContent: currentJsonContent } :
          lastOperation.type === 'delete' ? { ...lastOperation, previousYoloContent: currentYoloContent } :
            lastOperation;
    setRedoHistory(prev => [currentStateSnapshotForRedo, ...prev]);
    setOperationHistory(prev => prev.slice(0, -1));
    if (lastOperation.type === 'draw') setCurrentYoloContent(lastOperation.previousYoloContent);
    else if (lastOperation.type === 'stain') setCurrentJsonContent(lastOperation.previousJsonContent);
    else if (lastOperation.type === 'delete') setCurrentYoloContent(lastOperation.previousYoloContent);
    setRedrawTrigger(p => p + 1);
    message.success(t.operationSuccessful);
  };

  const handleRedo = () => {
    if (redoHistory.length === 0) { message.info(t.noRedoOperations); return; }
    const operationToRedo = redoHistory[0];
    const currentStateSnapshotForUndo: Operation = operationToRedo.type === 'draw' ? { ...operationToRedo, previousYoloContent: currentYoloContent } :
        (operationToRedo.type === 'stain') ? { ...operationToRedo, previousJsonContent: currentJsonContent } :
          operationToRedo.type === 'delete' ? { ...operationToRedo, previousYoloContent: currentYoloContent } :
            operationToRedo;
    setOperationHistory(prev => [...prev, currentStateSnapshotForUndo]);
    setRedoHistory(prev => prev.slice(1));
    if (operationToRedo.type === 'draw') {
      const newContent = operationToRedo.previousYoloContent ? `${operationToRedo.previousYoloContent}\n${operationToRedo.yoloData.join('\n')}`.trim() : operationToRedo.yoloData.join('\n');
      setCurrentYoloContent(newContent);
    } else if (operationToRedo.type === 'stain') {
      const { boxName, jsonType, jsonName } = operationToRedo;
      const jsonObj = parseJsonContent(currentJsonContent);
      const targetDict = jsonObj.local[jsonType];
      if (!targetDict[jsonName]) targetDict[jsonName] = [];
      if (!targetDict[jsonName].includes(boxName)) targetDict[jsonName].push(boxName);
      setCurrentJsonContent(stringifyJsonContent(jsonObj));
    } else if (operationToRedo.type === 'delete' && operationToRedo.previousYoloContent) {
      const linesAfterDelete = operationToRedo.previousYoloContent.split('\n').filter((line, idx) => {
        return !operationToRedo.deletedLines.some(del => del.index === idx && del.content === line);
      }).join('\n');
      setCurrentYoloContent(linesAfterDelete || "");
    }
    setRedrawTrigger(p => p + 1);
    message.success(t.operationSuccessful);
  };

  const handleDeleteBox = () => {
    const canvas = canvasRef.current; if (!canvas || !currentYoloContent) return;
    const yoloLines = currentYoloContent.split('\n').filter(Boolean);
    let deletedSomething = false;
    const linesToKeep: string[] = [];
    const deletedLinesInfo: { index: number; content: string }[] = [];
    const previousYoloContentForUndo = currentYoloContent;
    yoloLines.forEach((line, index) => {
      const parts = line.split(' ').map(parseFloat);
      if (parts.length < 5) { linesToKeep.push(line); return; }
      const [ , relX, relY, relW, relH] = parts;
      const absLeft = (relX - relW / 2) * canvas.width, absTop = (relY - relH / 2) * canvas.height;
      const absW = relW * canvas.width, absH = relH * canvas.height;
      if (mouseDownCoords.x >= absLeft && mouseDownCoords.x <= absLeft + absW && mouseDownCoords.y >= absTop && mouseDownCoords.y <= absTop + absH) {
        deletedLinesInfo.push({ index: index, content: line });
        deletedSomething = true;
      } else {
        linesToKeep.push(line);
      }
    });
    if (deletedSomething) {
      setCurrentYoloContent(linesToKeep.join('\n'));
      setOperationHistory(prev => [...prev, { type: 'delete', deletedLines: deletedLinesInfo, previousYoloContent: previousYoloContentForUndo }]);
      setRedoHistory([]);
      message.success('成功删除标注框');
      setRedrawTrigger(p => p + 1);
    } else {
      message.info('未选中任何框，请先单击要删除的框内区域');
    }
  };

  const selectCurrentClassByIndex = (classIndex: number) => setCurrentClassIndex(classIndex);
  const handleAddNodeProperty = () => { setNodePropertiesKeys([...nodePropertiesKeys, '']); setNodePropertiesValues([...nodePropertiesValues, '']); };
  const handleUpdateNodeProperty = (index: number, field: 'key' | 'value', value: string) => {
    if (field === 'key') setNodePropertiesKeys(nodePropertiesKeys.map((k, i) => i === index ? value : k));
    else setNodePropertiesValues(nodePropertiesValues.map((v, i) => i === index ? value : v));
  };
  const removeNodeProperty = (index: number) => {
    setNodePropertiesKeys(nodePropertiesKeys.filter((_, i) => i !== index));
    setNodePropertiesValues(nodePropertiesValues.filter((_, i) => i !== index));
  };
  const handleCreateNode = async () => { /* API calls */ };

  const saveCurrentFileState = useCallback(async (indexToSave: number) => {
    if (!pngList[indexToSave]) return;
    if (currentYoloContent !== null) {
      const newYoloFile = new File([currentYoloContent], `${getFileNameWithoutExtension(pngList[indexToSave].name)}.txt`, { type: 'text/plain' });
      setYoloList(prev => { const n = [...prev]; n[indexToSave] = newYoloFile; return n; });
    }
    if (currentJsonContent !== null) {
      const newJsonFile = new File([currentJsonContent], `${getFileNameWithoutExtension(pngList[indexToSave].name)}.json`, { type: 'application/json' });
      setJsonList(prev => { const n = [...prev]; n[indexToSave] = newJsonFile; return n; });
    }
    setGlobalList(prev => ({ ...prev, [indexToSave]: { nodeName, nodePropertiesKeys, nodePropertiesValues } }));
  }, [pngList, currentYoloContent, currentJsonContent, nodeName, nodePropertiesKeys, nodePropertiesValues]);

  const handleNextIndex = useCallback(() => { if (currentIndex < pngList.length - 1) { saveCurrentFileState(currentIndex); setCurrentIndex(p => p + 1); } }, [currentIndex, pngList.length, saveCurrentFileState]);
  const handlePrevIndex = useCallback(() => { if (currentIndex > 0) { saveCurrentFileState(currentIndex); setCurrentIndex(p => p - 1); } }, [currentIndex, saveCurrentFileState]);

  const handleSaveAllToZip = async () => {
    if (pngList.length === 0) { message.warning(t.noFile); return; }
    message.loading({ content: "正在准备数据并打包...", key: "exporting", duration: 0 });
    const zip = new JSZip();
    for (let i = 0; i < pngList.length; i++) {
      const pngFile = pngList[i];
      const baseName = getFileNameWithoutExtension(pngFile.name);
      let yoloContentForFile: string, jsonContentForFile: string;
      if (i === currentIndex) {
        yoloContentForFile = currentYoloContent || "";
        jsonContentForFile = currentJsonContent || "{}";
      } else {
        const yoloFile = yoloList[i];
        const jsonFile = jsonList[i];
        yoloContentForFile = yoloFile ? await yoloFile.text() : "";
        const rawJsonContent = jsonFile ? await jsonFile.text() : null;
        jsonContentForFile = stringifyJsonContent(parseJsonContent(rawJsonContent));
      }
      zip.file(`yolo/${baseName}.txt`, yoloContentForFile);
      zip.file(`json/${baseName}.json`, jsonContentForFile);
      zip.file(`images/${pngFile.name}`, pngFile);
    }
    zip.generateAsync({ type: 'blob' }).then(content => {
      saveAs(content, 'fileoperate_annotations.zip');
      message.success({content: "所有文件已打包下载", key:"exporting", duration: 2});
    }).catch(err => {
      message.error({content: `导出失败: ${err.message}`, key:"exporting", duration: 2});
    });
  };
  
  return (
    <Layout className="file-operate-layout">
      <Sider width={leftSiderActualWidth} className="file-operate-tool-sider" theme="light" collapsible={false}>
        <Tabs defaultActiveKey="1" className="sider-tabs" centered>
          <TabPane tab={<Tooltip title={t.fileManagement}><FontAwesomeIcon icon={faFolderOpen} /></Tooltip>} key="1">
            <div className="tab-pane-content">
              <Space direction="vertical" style={{ width: '100%' }} size="middle">
                <Button type="primary" onClick={() => document.getElementById('folder-upload-input-fileoperate')?.click()} icon={<FontAwesomeIcon icon={faUpload} />} block>{t.uploadFolder}</Button>
                <input type="file" {...{ webkitdirectory: "true", directory: "true" }} multiple onChange={handleFolderUpload} style={{ display: 'none' }} id="folder-upload-input-fileoperate" />
                <Space.Compact style={{ width: '100%' }}>
                  <Button onClick={handlePrevIndex} disabled={currentIndex === 0} icon={<FontAwesomeIcon icon={faArrowLeft} />} style={{ flex: 1 }} />
                  <InputNumber min={1} max={pngList.length || 1} value={currentIndex + 1}
                               onChange={(value) => { if (value !== null && value >= 1 && value <= pngList.length) { saveCurrentFileState(currentIndex); setCurrentIndex(value - 1); } }}
                               style={{ width: '100%', textAlign: 'center', flex: 2 }}
                               disabled={pngList.length === 0}
                  />
                  <Button onClick={handleNextIndex} disabled={currentIndex >= pngList.length - 1} icon={<FontAwesomeIcon icon={faArrowRight} />} style={{ flex: 1 }} />
                </Space.Compact>
                <Text type="secondary" style={{ textAlign: 'center', display: 'block', wordBreak: 'break-all' }}>{t.currentFile}: {currentPng?.name || 'N/A'} ({currentIndex + 1} / {pngList.length})</Text>
              </Space>
            </div>
          </TabPane>
          <TabPane tab={<Tooltip title={t.annotationTools}><FontAwesomeIcon icon={faPaintBrush} /></Tooltip>} key="2">
            <div className="tab-pane-content">
              <Form layout="vertical">
                <Form.Item label={t.category}>
                  <Select value={currentClassIndex} onChange={selectCurrentClassByIndex} style={{ width: '100%' }}>
                    {/* 关键修复：由于 `constants.ts` 提供了类型，这里的 `color` 和 `label` 属性可以被正确推断，不再报错 */}
                    {Object.entries(indexClassColorMapState).map(([idx, { color, label }]) => (
                      <Option key={idx} value={parseInt(idx)}>
                        <Space><div style={{ width: '16px', height: '16px', backgroundColor: color, borderRadius: '3px', border: '1px solid #ccc' }} />{`[${idx}] ${label}`}</Space>
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
                <Form.Item>
                  <Button onClick={() => setIsColoringMode(!isColoringMode)} type={isColoringMode ? 'primary' : 'default'} ghost={isColoringMode} icon={isColoringMode ? <FontAwesomeIcon icon={faEye} /> : <FontAwesomeIcon icon={faPen} />} block>
                    {isColoringMode ? t.coloringMode : t.drawingMode}
                  </Button>
                </Form.Item>
                <Form.Item label={t.chooseJsonName}>
                  <Select placeholder={t.chooseJsonName} value={selectedJsonName} onChange={setSelectedJsonName} style={{ width: '100%' }} disabled={!isColoringMode}>
                    {Object.keys(jsonNameColorMap).map(name => <Option key={name} value={name}>{name}</Option>)}
                  </Select>
                </Form.Item>
                <Form.Item label={t.chooseJsonType}>
                  <Select placeholder={t.chooseJsonType} value={selectedJsonType} onChange={(v) => setSelectedJsonType(v as any)} style={{ width: '100%' }} disabled={!isColoringMode}>
                    <Option key="buildingBlocks" value="buildingBlocks">Building Blocks</Option>
                    <Option key="constants" value="constants">Constants</Option>
                  </Select>
                </Form.Item>
              </Form>
            </div>
          </TabPane>
          <TabPane tab={<Tooltip title={t.actions}><FontAwesomeIcon icon={faHistory} /></Tooltip>} key="3">
            <div className="tab-pane-content">
              <Space direction="vertical" style={{width: '100%'}} size="middle">
                <Button onClick={handleUndo} icon={<FontAwesomeIcon icon={faUndo} />} block disabled={operationHistory.length === 0}>{t.undo}</Button>
                <Button onClick={handleRedo} icon={<FontAwesomeIcon icon={faRedo} />} block disabled={redoHistory.length === 0}>{t.redo}</Button>
                <Button onClick={handleDeleteBox} icon={<FontAwesomeIcon icon={faTrash} />} block danger>{t.deleteBox}</Button>
                <Button onClick={handleSaveAllToZip} icon={<FontAwesomeIcon icon={faSave} />} block type="primary">{t.saveAll}</Button>
              </Space>
            </div>
          </TabPane>
          <TabPane tab={<Tooltip title={t.function}><FontAwesomeIcon icon={faTag} /></Tooltip>} key="4">
            <div className="tab-pane-content">
              <Form layout="vertical">
                <Form.Item label={t.nodeName}>
                  <Input value={nodeName} onChange={(e) => setNodeName(e.target.value)} />
                </Form.Item>
                {nodePropertiesKeys.map((key, index) => (
                  <Form.Item key={index} label={`${t.key} ${index + 1}`}>
                    <Space.Compact style={{ width: '100%' }}>
                      <Input placeholder={t.key} value={key} onChange={(e) => handleUpdateNodeProperty(index, 'key', e.target.value)} />
                      <Input placeholder={t.value} value={nodePropertiesValues[index]} onChange={(e) => handleUpdateNodeProperty(index, 'value', e.target.value)} />
                      <Tooltip title={t.delete}><Button onClick={() => removeNodeProperty(index)} icon={<FontAwesomeIcon icon={faMinusCircle} />} danger /></Tooltip>
                    </Space.Compact>
                  </Form.Item>
                ))}
                <Button onClick={handleAddNodeProperty} icon={<FontAwesomeIcon icon={faPlus} />} block>{t.addProperty}</Button>
                <Button onClick={handleCreateNode} type="primary" ghost block style={{marginTop: '16px'}}>{t.addNode}</Button>
              </Form>
            </div>
          </TabPane>
        </Tabs>
      </Sider>
      <div className="resizer-horizontal" onMouseDown={() => setIsResizingLeftSider(true)} />
      <Layout className="file-operate-main-content-layout">
        <Content className="file-operate-canvas-content">
          <div className={`file-operate-canvas-wrapper ${isColoringMode ? 'coloring-mode' : ''}`}>
            <canvas ref={canvasRef} onMouseDown={handleMouseDown} onMouseMove={handleMouseMove} onMouseUp={handleMouseUp} />
          </div>
        </Content>
      </Layout>
      <div className="resizer-horizontal" onMouseDown={() => setIsResizingInspector(true)} style={{display: isInspectorVisible ? 'flex' : 'none'}} />
      <Sider width={isInspectorVisible ? inspectorWidth : 0} className="file-operate-inspector-sider" theme="light" collapsible collapsed={!isInspectorVisible} trigger={null} collapsedWidth={0}>
        {isInspectorVisible && (
          <Card title={<Space><FontAwesomeIcon icon={faList}/>{t.dataExplorer}</Space>}
                extra={<Tooltip title={isInspectorVisible ? "隐藏面板" : "显示面板"}><Button type="text" icon={<FontAwesomeIcon icon={faChevronRight} />} onClick={() => setIsInspectorVisible(!isInspectorVisible)} /></Tooltip>}
                style={{height: '100%', display:'flex', flexDirection:'column', borderLeft: 'none'}}
                headStyle={{borderBottom: '1px solid var(--border-color-light)', padding: '0 16px', flexShrink: 0}}
                bodyStyle={{flexGrow: 1, overflow:'auto', padding: '16px'}}
          >
            <Typography.Title level={5}>YOLO Data</Typography.Title>
            <textarea
              value={currentYoloContent ? addRectNameToYoloContent(currentYoloContent) : ""}
              className="yolo-content-textarea"
              readOnly
              style={{height: 'calc(50% - 25px - 10px)', marginBottom: '10px', width: '100%'}}
            />
            <Typography.Title level={5}>JSON Data</Typography.Title>
            <textarea
              value={currentJsonContent || "{}"}
              className="yolo-content-textarea"
              readOnly
              style={{height: 'calc(50% - 25px)', width: '100%'}}
            />
          </Card>
        )}
      </Sider>
    </Layout>
  );
};

export default FileOperate;
--- END: src/pages/FileOperate/index.tsx ---

--- START: src/pages/FloatWindow/float-window.css ---
/* 窗口容器 */
.float-window {
  background: rgba(255, 255, 255, 0.95);
  border-radius: 16px;
  padding: 20px;
  font-family: 'Segoe UI', system-ui, sans-serif;
  backdrop-filter: blur(10px);
  border: 1px solid rgba(0, 0, 0, 0.1);
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
  position: fixed;
  right: 20px;
  bottom: 20px;
  width: 400px;
  max-height: 600px;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  transition: all 0.3s ease;
}

/* 窗口标题 */
.window-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-bottom: 12px;
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
}

.window-title {
  font-size: 16px;
  font-weight: 600;
  color: #333;
}

/* 控制按钮 */
.window-control-button {
  background: transparent;
  border: none;
  padding: 0;
  cursor: pointer;
  transition: transform 0.2s ease;
}

.window-control-button:hover {
  transform: scale(1.1);
}

/* 消息区域 */
.messages-container {
  flex: 1;
  overflow-y: auto;
  margin: 12px 0;
  padding-right: 8px;
}

/* 消息气泡 */
.message-bubble {
  margin: 8px 0;
  padding: 12px;
  border-radius: 12px;
  background: #f5f5f5;
  position: relative;
}

.message-bubble.user {
  background: #e3f2fd;
}

.message-bubble.assistant {
  background: #f5f5f5;
}

/* 消息内容 */
.message-content {
  font-size: 14px;
  color: #333;
  line-height: 1.5;
}

/* 消息操作按钮 */
.message-actions {
  position: absolute;
  top: 8px;
  right: 8px;
  display: flex;
  gap: 8px;
}

.message-actions button {
  background: rgba(255, 255, 255, 0.9);
  border: none;
  border-radius: 50%;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s ease;
}

.message-actions button:hover {
  background: rgba(255, 255, 255, 1);
  transform: scale(1.1);
}

/* 输入区域 */
.input-container {
  margin-top: 16px;
}

.input-area {
  display: flex;
  gap: 8px;
  align-items: center;
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  padding: 8px;
  transition: border-color 0.3s ease;
}

.input-area:focus-within {
  border-color: #1890ff;
}

/* 上传按钮 */
.upload-button {
  background: transparent;
  border: none;
  padding: 0;
  cursor: pointer;
  transition: transform 0.2s ease;
}

.upload-button:hover {
  transform: scale(1.1);
}

/* 输入框 */
.input-area textarea {
  flex: 1;
  background: transparent;
  border: none;
  border-radius: 8px;
  padding: 8px;
  font-size: 14px;
  color: #333;
  outline: none;
  resize: none;
}

/* 发送按钮 */
.send-button {
  background: #1890ff;
  border: none;
  border-radius: 50%;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: background 0.3s ease;
}

.send-button:hover {
  background: #40a9ff;
}

/* 文件预览 */
.file-preview-list {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-top: 12px;
}

.file-tag {
  background: #1890ff;
  color: white;
  padding: 4px 12px;
  border-radius: 16px;
  font-size: 12px;
  display: inline-flex;
  align-items: center;
}

/* 加载动画 */
.loading-indicator {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 16px;
}

/* 最小化状态 */
.float-window.minimized {
  width: 60px;
  height: 60px;
  padding: 0;
  border-radius: 50%;
  justify-content: center;
  align-items: center;
}

.minimized-content {
  display: flex;
  justify-content: center;
  align-items: center;
}

/* 滚动条美化 */
.messages-container::-webkit-scrollbar {
  width: 6px;
}

.messages-container::-webkit-scrollbar-track {
  background: rgba(0, 0, 0, 0.05);
}

.messages-container::-webkit-scrollbar-thumb {
  background: rgba(0, 0, 0, 0.2);
  border-radius: 3px;
}

--- END: src/pages/FloatWindow/float-window.css ---

--- START: src/pages/FloatWindow/index.tsx ---
import React, { useState, useRef, useEffect } from 'react';
import { Button, Input, Upload, message, Image, Spin, Tag } from 'antd';
import type { UploadFile } from 'antd/es/upload/interface';
import {
  InboxOutlined,
  SendOutlined,
  DownOutlined,
  UpOutlined,
  MessageOutlined,
  CloseOutlined,
  CopyOutlined,
  ReloadOutlined,
  DeleteOutlined
} from '@ant-design/icons';
import { marked } from 'marked';
import katex from 'katex';
import 'katex/dist/katex.min.css';
import './float-window.css';
import { useModel } from '@umijs/max';

const ChatGLM_API_Key = "df2bc2f478574aa6b6b251345afafd22.PQlSVfFXZ6hv5rF1";

const FILE_CONFIG = {
  image: ['image/png', 'image/jpeg', 'image/gif'],
  text: ['text/plain', 'text/x-python', 'text/x-matlab'],
  code: ['application/json'],
  office: [
    'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'application/vnd.ms-excel',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'application/vnd.ms-powerpoint',
    'application/vnd.openxmlformats-officedocument.presentationml.presentation'
  ]
};

interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  files?: Array<{
    data: string;
    type: string;
    name: string;
    size: number;
    content?: string;
  }>;
}

const getFileType = (fileType: string) => {
  const allTypes = Object.entries(FILE_CONFIG).flatMap(([_, mimes]) => mimes);
  if (!allTypes.includes(fileType)) return 'other';
  return Object.entries(FILE_CONFIG).find(([_, mimes]) =>
    mimes.includes(fileType)
  )?.[0] || 'other';
};

const FloatWindow: React.FC = () => {
  const [isMinimized, setIsMinimized] = useState(false);
  const [inputText, setInputText] = useState('');
  const [loading, setLoading] = useState(false);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [fileList, setFileList] = useState<UploadFile[]>([]);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const windowRef = useRef<HTMLDivElement>(null);
  const headerRef = useRef<HTMLDivElement>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [initialX, setInitialX] = useState(0);
  const [initialY, setInitialY] = useState(0);
  const [offsetX, setOffsetX] = useState(0);
  const [offsetY, setOffsetY] = useState(0);

  // Text translations for multi-language support
  const translations = {
    zh: {
      title: 'AI 对话助手(只支持单个图像)',
      minimize: '最小化窗口',
      clearContext: '清空上下文',
      clearDialogRecords: '清空对话记录',
      user: '您',
      assistant: '助手',
      viewLargeImage: '查看大图',
      fileType: '类型',
      fileSize: '大小',
      aiThinking: 'AI正在思考...',
      enterMessage: '输入消息或上传文件...',
      unsupportedFormat: '不支持的文件格式',
      fileSizeLimit: '文件大小超过5MB限制',
      pleaseEnterContent: '请输入内容或上传文件',
      contentCopied: '回答内容已复制到剪贴板',
      contextCleared: '对话上下文已清空',
      requestFailed: '请求失败',
      processingError: '请求处理失败'
    },
    en: {
      title: 'AI Assistant (Single Image Only)',
      minimize: 'Minimize Window',
      clearContext: 'Clear Context',
      clearDialogRecords: 'Clear Dialog Records',
      user: 'You',
      assistant: 'Assistant',
      viewLargeImage: 'View Large Image',
      fileType: 'Type',
      fileSize: 'Size',
      aiThinking: 'AI is thinking...',
      enterMessage: 'Enter message or upload a file...',
      unsupportedFormat: 'Unsupported file format',
      fileSizeLimit: 'File size exceeds 5MB limit',
      pleaseEnterContent: 'Please enter content or upload a file',
      contentCopied: 'Answer copied to clipboard',
      contextCleared: 'Dialog context cleared',
      requestFailed: 'Request failed',
      processingError: 'Processing error'
    }
  };

  // Get language from global state
  const { initialState } = useModel('@@initialState');
  const [currentLang, setCurrentLang] = useState(initialState?.language || 'zh');
  const t = translations[currentLang as keyof typeof translations];

  // Update language when global language changes
  useEffect(() => {
    const handleLanguageChange = (event: Event) => {
      const customEvent = event as CustomEvent;
      setCurrentLang(customEvent.detail.language);
    };

    window.addEventListener('languageChange', handleLanguageChange);
    setCurrentLang(initialState?.language || 'zh');

    // message.info(currentLang === 'zh' ? '已切换为中文' : 'Language changed to English');

    return () => {
      window.removeEventListener('languageChange', handleLanguageChange);
    };
  }, [initialState?.language]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  useEffect(() => {
    const handleMouseDown = (e: MouseEvent) => {
      if (headerRef.current) {
        setIsDragging(true);
        setInitialX(e.clientX);
        setInitialY(e.clientY);
        const rect = windowRef.current?.getBoundingClientRect();
        if (rect) {
          setOffsetX(rect.left);
          setOffsetY(rect.top);
        }
      }
    };

    const handleMouseMove = (e: MouseEvent) => {
      if (isDragging && windowRef.current) {
        const dx = e.clientX - initialX;
        const dy = e.clientY - initialY;
        windowRef.current.style.left = `${offsetX + dx}px`;
        windowRef.current.style.top = `${offsetY + dy}px`;
      }
    };

    const handleMouseUp = () => {
      setIsDragging(false);
    };

    const header = headerRef.current;
    if (header) {
      header.addEventListener('mousedown', handleMouseDown);
    }
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);

    return () => {
      if (header) {
        header.removeEventListener('mousedown', handleMouseDown);
      }
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [isDragging, initialX, initialY, offsetX, offsetY]);

  const convertFileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = error => reject(error);
      reader.readAsDataURL(file);
    });
  };

  const processFile = async (file: File) => {
    const base64 = await convertFileToBase64(file);
    const fileType = getFileType(file.type);

    let textContent = '';
    if (FILE_CONFIG.text.includes(file.type) || FILE_CONFIG.code.includes(file.type)) {
      textContent = await file.text();
    }

    return {
      data: base64,
      type: file.type,
      name: file.name,
      size: file.size,
      content: textContent
    };
  };

  const callGLMAPI = async (messageHistory: ChatMessage[]) => {
    const controller = new AbortController();
    try {
      setLoading(true);

      setMessages(prev => {
        const lastMessage = prev[prev.length - 1];
        return lastMessage?.role === 'assistant' && !lastMessage.content
          ? prev
          : [...prev, { role: 'assistant', content: '' }];
      });

      const apiMessages = messageHistory.map(msg => {
        if (msg.role === 'user') {
          const content = [
            ...(msg.files?.filter(f => FILE_CONFIG.image.includes(f.type))
              .map(file => ({
                type: "image_url",
                image_url: { url: file.data, detail: "high" }
              })) || []),
            { type: "text", text: msg.content || t.pleaseEnterContent }
          ];
          return { role: 'user', content };
        } else {
          return { role: 'assistant', content: msg.content };
        }
      });

      const response = await fetch('https://open.bigmodel.cn/api/paas/v4/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${ChatGLM_API_Key}`
        },
        body: JSON.stringify({
          model: 'glm-4v-flash',
          messages: apiMessages,
          temperature: 0.7,
          stream: true
        }),
        signal: controller.signal
      });

      if (!response.ok) throw new Error(`${t.requestFailed}: ${response.status}`);

      const reader = response.body?.getReader();
      const decoder = new TextDecoder();
      let buffer = '';
      let accumulatedContent = '';

      if (reader) {
        while (true) {
          const { done, value } = await reader.read();
          if (done) break;

          buffer += decoder.decode(value, { stream: true });
          const lines = buffer.split('\n');
          buffer = lines.pop() || '';

          for (const line of lines) {
            const trimmedLine = line.replace(/^data: /, '').trim();
            if (!trimmedLine || trimmedLine === '[DONE]') continue;

            try {
              const json = JSON.parse(trimmedLine);
              const contentChunk = json.choices[0]?.delta?.content || '';
              if (contentChunk) {
                accumulatedContent += contentChunk;
                setMessages(prev => {
                  const lastMessage = prev[prev.length - 1];
                  return lastMessage?.role === 'assistant'
                    ? prev.map((msg, i) =>
                      i === prev.length - 1
                        ? { ...msg, content: accumulatedContent }
                        : msg
                    )
                    : prev;
                });
              }
            } catch (err) {
              console.error('解析流数据出错:', err);
            }
          }
        }
      }

      const formattedContent = marked(accumulatedContent)
        .replace(/(?:\\\((.*?)\\\))|(?:\\\[([\s\S]*?)\\\])/g, (_, inlineLatex, blockLatex) => {
          const latex = inlineLatex || blockLatex;
          const html = katex.renderToString(latex, { throwOnError: false });
          return inlineLatex
            ? `<span class="katex">${html}</span>`
            : `<div class="katex">${html}</div>`;
        });

      setMessages(prev =>
        prev.map((msg, i) =>
          i === prev.length - 1
            ? { ...msg, content: formattedContent }
            : msg
        )
      );

    } catch (error) {
      message.error((error as Error).message || t.processingError);
      setMessages(prev => {
        const lastMessage = prev[prev.length - 1];
        return lastMessage?.role === 'assistant' && !lastMessage.content
          ? prev.slice(0, -1)
          : prev;
      });
    } finally {
      setLoading(false);
    }
  };

  const beforeUpload = (file: File) => {
    const validTypes = Object.values(FILE_CONFIG).flat();
    const isValidType = validTypes.includes(file.type);
    const isValidSize = file.size < 5 * 1024 * 1024;

    if (!isValidType) {
      message.error(`${file.name} ${t.unsupportedFormat}`);
      return Upload.LIST_IGNORE;
    }

    if (!isValidSize) {
      message.error(`${file.name} ${t.fileSizeLimit}`);
      return Upload.LIST_IGNORE;
    }

    return true;
  };

  const renderFilePreview = (file: ChatMessage['files'][0]) => {
    const fileType = getFileType(file.type);

    switch (fileType) {
      case 'image':
        return <Image
          width={200}
          src={file.data}
          className="preview-image"
          alt="Upload preview"
          preview={{ mask: t.viewLargeImage }}
        />;

      case 'text':
      case 'code':
        return <div className={`${fileType}-preview`}>
          <h5>{file.name}</h5>
          <pre><code>{file.content}</code></pre>
        </div>;

      case 'office':
        return <div className="office-preview">
          <h5>{file.name}</h5>
          <p>{t.fileType}: {file.type.split('/').pop()?.toUpperCase()} File</p>
          <p>{t.fileSize}: {(file.size / 1024).toFixed(2)}KB</p>
        </div>;

      default:
        return <div className="file-info">
          <h5>{file.name}</h5>
          <p>{t.fileType}: {file.type}</p>
          <p>{t.fileSize}: {(file.size / 1024).toFixed(2)}KB</p>
        </div>;
    }
  };

  const handleSubmit = async () => {
    if (!inputText && fileList.length === 0) {
      message.warning(t.pleaseEnterContent);
      return;
    }

    const processedFiles = await Promise.all(
      fileList.map(async file =>
        await processFile(file.originFileObj as File)
      )
    );

    const userMessage: ChatMessage = {
      role: 'user',
      content: inputText,
      files: processedFiles
    };

    setMessages(prev => [...prev, userMessage]);

    try {
      await callGLMAPI([...messages, userMessage]);
    } finally {
      setInputText('');
      setFileList([]);
    }
  };

  const renderMessageContent = (content: string) => {
    return (
      <div dangerouslySetInnerHTML={{
        __html: marked(content)
          .replace(/\\\(([^]*?)\\\)/g, (_, latex) =>
            katex.renderToString(latex, { throwOnError: false })
          )
          .replace(/\\\[([\s\S]*?)\\\]/g, (_, latex) =>
            katex.renderToString(latex, { throwOnError: false, displayMode: true })
          )
      }} />
    );
  };

  const handleCopyMessage = (content: string) => {
    navigator.clipboard.writeText(content).then(() => {
      message.success(t.contentCopied);
    });
  };

  const handleRetryMessage = (index: number) => {
    const message = messages[index];
    if (message.role === 'assistant') {
      const newMessageHistory = [...messages];
      newMessageHistory[index] = { ...message, content: '' };
      setMessages(newMessageHistory);
      callGLMAPI(newMessageHistory);
    }
  };

  const handleClearContext = () => {
    setMessages([]);
    setFileList([]);
    setInputText('');
    message.success(t.contextCleared);
  };

  const windowStyle: React.CSSProperties = {
    position: 'fixed',
    right: '20px',
    bottom: '20px',
    zIndex: 9999,
    width: isMinimized ? '60px' : '400px',
    height: isMinimized ? '80px' : 'auto',
    background: 'white',
    borderRadius: isMinimized ? '50%' : '8px',
    boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
    overflow: 'hidden',
    transition: 'all 0.3s ease',
  };

  return (
    <div className="float-window" style={windowStyle} ref={windowRef}>
      {!isMinimized && (
        <>
          <div className="window-header" ref={headerRef}>
            <span className="window-title">{t.title}</span>
            <div className="header-buttons">
              <Button
                className="window-control-button"
                icon={<DeleteOutlined />}
                onClick={(e) => {
                  e.stopPropagation();
                  handleClearContext();
                }}
                type="text"
                shape="circle"
                title={t.clearContext}
              />
              <Button
                className="window-control-button"
                icon={<DownOutlined />}
                onClick={(e) => {
                  e.stopPropagation();
                  setIsMinimized(true);
                }}
                type="text"
                shape="circle"
                title={t.minimize}
              />
            </div>
          </div>

          {messages.length > 0 && (
            <div className="clear-context-hint">
              <Button
                size="small"
                icon={<DeleteOutlined />}
                onClick={handleClearContext}
              >
                {t.clearDialogRecords}
              </Button>
            </div>
          )}

          <div className="messages-container">
            {messages.map((msg, index) => {
              if (msg.role === 'assistant' && !msg.content && index !== messages.length - 1) {
                return null;
              }
              return (
                <div key={index} className={`message-bubble ${msg.role}`}>
                  <div className="message-header">
                    <span className="message-role">
                      {msg.role === 'user' ? `👤 ${t.user}` : `🤖 ${t.assistant}`}
                    </span>
                    <span className="message-time">
                      {new Date().toLocaleTimeString([], {
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </span>
                  </div>

                  {msg.files?.map((file, i) => (
                    <div key={i} className="file-preview">
                      {renderFilePreview(file)}
                    </div>
                  ))}

                  <div className="message-content">
                    {renderMessageContent(msg.content)}
                  </div>

                  {msg.role === 'assistant' && (
                    <div className="message-actions">
                      <Button
                        icon={<CopyOutlined />}
                        size="small"
                        onClick={() => handleCopyMessage(msg.content)}
                        className="copy-button"
                      />
                      <Button
                        icon={<ReloadOutlined />}
                        size="small"
                        onClick={() => handleRetryMessage(index)}
                        className="retry-button"
                      />
                    </div>
                  )}
                </div>
              );
            })}

            {loading && (
              <Spin
                tip={t.aiThinking}
                className="loading-indicator"
                indicator={<div className="custom-spin" />}
              />
            )}
            <div ref={messagesEndRef} />
          </div>

          <div className="input-container">
            <div className="input-area">
              <Upload
                multiple={false}
                maxCount={1}
                fileList={fileList}
                beforeUpload={beforeUpload}
                onChange={({ fileList: newFileList }) => {
                  setFileList(newFileList.slice(-1));
                }}
                showUploadList={false}
                disabled={loading}
                accept={Object.values(FILE_CONFIG)
                  .flat()
                  .map(type => `.${type.split('/').pop()}`)
                  .join(',')}
              >
                <Button
                  icon={<InboxOutlined />}
                  className="upload-button"
                  disabled={loading}
                />
              </Upload>

              <Input.TextArea
                className="message-input"
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                placeholder={t.enterMessage}
                autoSize={{ minRows: 1, maxRows: 4 }}
                disabled={loading}
                onPressEnter={(e) => {
                  if (!e.shiftKey && !loading) {
                    e.preventDefault();
                    handleSubmit();
                  }
                }}
              />

              <Button
                type="primary"
                shape="circle"
                icon={<SendOutlined />}
                className="send-button"
                onClick={handleSubmit}
                loading={loading}
                disabled={loading}
              />
            </div>

            {fileList.length > 0 && (
              <div className="file-preview-list">
                {fileList.map((file) => (
                  <Tag
                    key={file.uid}
                    closable
                    className="file-tag"
                    onClose={() => setFileList(prev =>
                      prev.filter(f => f.uid !== file.uid)
                    )}
                    closeIcon={
                      <CloseOutlined
                        style={{ fontSize: 10, verticalAlign: '-1px' }}
                      />
                    }
                  >
                    {file.name}
                  </Tag>
                ))}
              </div>
            )}
          </div>
        </>
      )}

      {isMinimized && (
        <div
          className="minimized-content"
          onDoubleClick={() => setIsMinimized(false)}
        >
          <MessageOutlined className="minimized-icon" />
        </div>
      )}
    </div>
  );
};

export default FloatWindow;

--- END: src/pages/FloatWindow/index.tsx ---

--- START: src/pages/GraphOperate/index.css ---
/* index.css */

/*
 * ===================================================================
 * 全局及基础设定 (Global & Base Settings)
 * ===================================================================
 */
:root {
  --primary-color: #1677ff;
  --danger-color: #ff4d4f;
  --success-color: #52c41a;
  --background-color: #f5f7fa;
  --component-background: #ffffff;
  --border-color: #d9d9d9;
  --text-primary: #333333;
  --text-secondary: #666666;
  --card-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  --border-radius: 8px;
}

body {
  background-color: var(--background-color);
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif;
}

/*
 * ===================================================================
 * 页面布局容器 (Page Layout Container)
 * ===================================================================
 */
.graph-operate-container {
  display: flex;
  flex-direction: column;
  height: calc(100vh - 48px); /* 减去通常的页头高度 */
  padding: 24px;
  gap: 24px;
}

/*
 * ===================================================================
 * 操作面板卡片 (Control Panel Card)
 * ===================================================================
 */
.control-panel-card {
  background: var(--component-background);
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
  border: none;
  flex-shrink: 0; /* 防止在flex布局中被压缩 */
}

.control-panel-card .ant-tabs-nav {
  margin-bottom: 24px;
}

.tab-pane-content {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.input-section {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.properties-list {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.action-buttons {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
  padding-top: 12px;
  border-top: 1px solid #f0f0f0;
}

/*
 * ===================================================================
 * 图谱可视化区域 (Graph Visualization Area)
 * ===================================================================
 */
.visualization-wrapper {
  flex-grow: 1; /* 占据所有剩余的垂直空间 */
  background: var(--component-background);
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
  padding: 16px;
  display: flex;
  flex-direction: column;
  position: relative; /* 为全屏按钮定位提供基础 */
}

.visualization-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
  padding-bottom: 16px;
  border-bottom: 1px solid #f0f0f0;
}

.visualization-container {
  flex-grow: 1;
  width: 100%;
  height: 100%;
}

/*
 * ===================================================================
 * 通用组件样式 (General Component Styles)
 * ===================================================================
 */
.property-row {
  display: flex;
  align-items: center;
  gap: 8px;
}

.property-row .ant-input {
  flex: 1;
}

.fullscreen-btn {
  position: absolute;
  top: 16px;
  right: 16px;
  z-index: 10;
}

--- END: src/pages/GraphOperate/index.css ---

--- START: src/pages/GraphOperate/index.tsx ---
// index.tsx

import React, { useEffect, useState } from 'react';
import { useModel } from 'umi';
import {
  createNode, deleteNode, updateNode, findNode,
  getAllNodes,
  createRelationship, deleteRelationship, updateRelationship, findRelationship,
  getAllRelationships
} from '@/pages/GraphOperate/Components/apiFunctions';
import './index.css';
import { DeleteOutlined, PlusOutlined, FullscreenOutlined, SearchOutlined, SyncOutlined } from '@ant-design/icons';
import { Button, Card, Input, Layout, message, Space, Typography, Select, Tabs } from 'antd';
import Neo4jVisualization from './Components/Neo4jVisualization';

const { Title } = Typography;
const { Content } = Layout;
const { Option } = Select;
const { TabPane } = Tabs;

// ===================================================================
// 接口与类型定义 (Interfaces & Type Definitions)
// ===================================================================
interface Node {
  id: string;
  name: string;
  properties: { [key: string]: any };
}

interface Relationship {
  name: string;
  properties: { [key: string]: any };
}

// ===================================================================
// 国际化文本 (i18n Translations)
// ===================================================================
const translations = {
  zh: {
    createNode: '创建节点',
    deleteNode: '删除节点',
    updateNode: '更新节点',
    findNode: '查询节点',
    createRelationship: '创建关系',
    deleteRelationship: '删除关系',
    updateRelationship: '更新关系',
    findRelationship: '查询关系',
    getAllGraph: '获取/刷新全图',
    nodeName: '节点名称',
    key: '键',
    value: '值',
    addProperty: '添加属性',
    nodeOperations: '节点操作',
    relationshipOperations: '关系操作',
    nodeSuccessMessage: '节点查找成功',
    nodeNotExistMessage: '节点不存在',
    relationshipName: '关系名称',
    graphVisualization: '图谱可视化',
  },
  en: {
    createNode: 'Create Node',
    deleteNode: 'Delete Node',
    updateNode: 'Update Node',
    findNode: 'Find Node',
    createRelationship: 'Create Relationship',
    deleteRelationship: 'Delete Relationship',
    updateRelationship: 'Update Relationship',
    findRelationship: 'Find Relationship',
    getAllGraph: 'Get/Refresh Full Graph',
    nodeName: 'Node Name',
    key: 'Key',
    value: 'Value',
    addProperty: 'Add Property',
    nodeOperations: 'Node Operations',
    relationshipOperations: 'Relationship Operations',
    nodeSuccessMessage: 'Node found successfully',
    nodeNotExistMessage: 'Node does not exist',
    relationshipName: 'Relationship Name',
    graphVisualization: 'Graph Visualization',
  }
};

// ===================================================================
// 主组件 (Main Component)
// ===================================================================
const GraphOperate = () => {
  // --- 状态管理 (State Management) ---
  const { initialState } = useModel('@@initialState');
  const [currentLang, setCurrentLang] = useState(initialState?.language || 'zh');
  const t = translations[currentLang as keyof typeof translations];

  // 节点相关状态
  const [name, setName] = useState('');
  const [nodeProperties, setNodeProperties] = useState<{ key: string, value: string }[]>([]);
  const [nodeResult, setNodeResult] = useState<Node | null>(null);
  const [allNodes, setAllNodes] = useState<Node[]>([]);

  // 关系相关状态
  const [relationshipName, setRelationshipName] = useState('');
  const [relationshipProperties, setRelationshipProperties] = useState<{ key: string, value: string }[]>([]);
  const [relationshipResult, setRelationshipResult] = useState<Relationship | null>(null);
  const [allRelationships, setAllRelationships] = useState<Relationship[]>([]);

  // --- 副作用钩子 (useEffect Hooks) ---
  useEffect(() => {
    const handleLanguageChange = (event: Event) => setCurrentLang((event as CustomEvent).detail.language);
    window.addEventListener('languageChange', handleLanguageChange);
    setCurrentLang(initialState?.language || 'zh');
    return () => window.removeEventListener('languageChange', handleLanguageChange);
  }, [initialState?.language]);

  // --- 属性处理函数 (Property Handlers) ---
  const handleAddProperty = (type: 'node' | 'relationship') => {
    if (type === 'node') {
      setNodeProperties([...nodeProperties, { key: '', value: '' }]);
    } else {
      setRelationshipProperties([...relationshipProperties, { key: '', value: '' }]);
    }
  };

  const handleUpdateProperty = (type: 'node' | 'relationship', index: number, field: 'key' | 'value', val: string) => {
    if (type === 'node') {
      const newProps = [...nodeProperties];
      newProps[index][field] = val;
      setNodeProperties(newProps);
    } else {
      const newProps = [...relationshipProperties];
      newProps[index][field] = val;
      setRelationshipProperties(newProps);
    }
  };

  const handleRemoveProperty = (type: 'node' | 'relationship', index: number) => {
    if (type === 'node') {
      setNodeProperties(nodeProperties.filter((_, i) => i !== index));
    } else {
      setRelationshipProperties(relationshipProperties.filter((_, i) => i !== index));
    }
  };

  const propertiesToObject = (props: { key: string, value: string }[]) => {
    return props.reduce((acc, prop) => {
      if (prop.key) acc[prop.key] = prop.value;
      return acc;
    }, {} as { [key: string]: any });
  };

  // --- 核心API操作函数 (Core API Operations) ---
  const handleCreateNode = async () => {
    if (!name) { message.warn('节点名称不能为空'); return; }
    const propertiesObj = propertiesToObject(nodeProperties);
    const newNode = { name, properties: propertiesObj };
    try {
      const result = await createNode(newNode);
      // API的返回格式可能不一致，这里做兼容处理
      if (result === true || (result && result.code === 0)) {
        message.success(`节点 "${name}" 创建成功`);
        setNodeResult(newNode as Node);
        // 创建成功后自动刷新全图，以便看到新节点
        await handleGetAllGraph();
      } else {
        message.error(`创建节点失败: ${JSON.stringify(result)}`);
      }
    } catch (error) {
      message.error(`创建节点时发生网络或未知错误`);
    }
  };

  const handleDeleteNode = async () => {
    if (!name) { message.warn('请输入要删除的节点名称'); return; }
    await deleteNode({ name });
    message.success(`删除节点 "${name}" 的请求已发送`);
    await handleGetAllGraph();
  };

  const handleUpdateNode = async () => {
    if (!name) { message.warn('请输入要更新的节点名称'); return; }
    const propertiesObj = propertiesToObject(nodeProperties);
    const updatedNode: Node = { id: '', name, properties: propertiesObj };
    await updateNode(updatedNode);
    message.success(`更新节点 "${name}" 的请求已发送`);
    setNodeResult(updatedNode);
    await handleGetAllGraph();
  };

  const handleFindNode = async () => {
    if (!name) { message.warn('请输入要查询的节点名称'); return; }
    const result = await findNode({ name });
    // API返回格式兼容
    const foundNode = result?.data || result;
    if (foundNode && Object.keys(foundNode).length > 0) {
      setNodeResult(foundNode);
      message.success(t.nodeSuccessMessage);
    } else {
      setNodeResult(null);
      message.warn(t.nodeNotExistMessage);
    }
  };

  const handleCreateRelationship = async () => {
    if (!relationshipName) { message.warn('关系名称不能为空'); return; }
    const propertiesObj = propertiesToObject(relationshipProperties);
    // 关系创建通常需要源节点和目标节点，这里假设API封装了此逻辑
    // 原始代码中fromNode, toNode在属性中，保持一致
    if (!propertiesObj.fromNode || !propertiesObj.toNode) {
      message.warn('创建关系必须在属性中指定 fromNode 和 toNode');
      return;
    }
    const newRelationship: Relationship = { name: relationshipName, properties: propertiesObj };
    await createRelationship(newRelationship);
    message.success(`创建关系 "${relationshipName}" 的请求已发送`);
    setRelationshipResult(newRelationship);
    await handleGetAllGraph();
  };

  const handleDeleteRelationship = async () => {
    if (!relationshipName) { message.warn('请输入要删除的关系名称'); return; }
    await deleteRelationship({ name: relationshipName });
    message.success(`删除关系 "${relationshipName}" 的请求已发送`);
    await handleGetAllGraph();
  };

  const handleUpdateRelationship = async () => {
    if (!relationshipName) { message.warn('请输入要更新的关系名称'); return; }
    const propertiesObj = propertiesToObject(relationshipProperties);
    const updatedRelationship: Relationship = { name: relationshipName, properties: propertiesObj };
    await updateRelationship(updatedRelationship);
    message.success(`更新关系 "${relationshipName}" 的请求已发送`);
    setRelationshipResult(updatedRelationship);
    await handleGetAllGraph();
  };

  const handleFindRelationship = async () => {
    if (!relationshipName) { message.warn('请输入要查询的关系名称'); return; }
    const result = await findRelationship({ name: relationshipName });
    const foundRel = result?.data || result;
    if (foundRel) {
      setRelationshipResult(foundRel);
      message.success('关系查找成功');
    } else {
      setRelationshipResult(null);
      message.warn('关系不存在');
    }
  };

  const handleGetAllNodes = async () => {
    const result = await getAllNodes({ includeProperties: true });
    setAllNodes(result?.data || []);
  };

  const handleGetAllRelationships = async () => {
    const result = await getAllRelationships({ includeProperties: true });
    setAllRelationships(result?.data || []);
  };

  const handleGetAllGraph = async () => {
    message.loading('正在加载图谱数据...', 0);
    await Promise.all([handleGetAllNodes(), handleGetAllRelationships()]);
    message.destroy();
    message.success('图谱数据加载完成');
  };

  // --- 渲染函数 (Render Functions) ---
  const renderPropertiesEditor = (type: 'node' | 'relationship') => {
    const props = type === 'node' ? nodeProperties : relationshipProperties;
    return (
      <div className="properties-list">
        {props.map((prop, index) => (
          <div key={index} className="property-row">
            <Input
              placeholder={t.key}
              value={prop.key}
              onChange={(e) => handleUpdateProperty(type, index, 'key', e.target.value)}
            />
            <Input
              placeholder={t.value}
              value={prop.value}
              onChange={(e) => handleUpdateProperty(type, index, 'value', e.target.value)}
            />
            <Button
              type="text"
              danger
              onClick={() => handleRemoveProperty(type, index)}
              icon={<DeleteOutlined />}
            />
          </div>
        ))}
        <Button
          type="dashed"
          onClick={() => handleAddProperty(type)}
          icon={<PlusOutlined />}
        >
          {t.addProperty}
        </Button>
      </div>
    );
  };

  return (
    <Layout>
      <Content className="graph-operate-container">
        <Card className="control-panel-card">
          <Tabs defaultActiveKey="1">
            <TabPane tab={t.nodeOperations} key="1">
              <div className="tab-pane-content">
                <div className="input-section">
                  <Input
                    size="large"
                    placeholder={t.nodeName}
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                  />
                  {renderPropertiesEditor('node')}
                </div>
                <div className="action-buttons">
                  <Button type="primary" onClick={handleCreateNode} icon={<PlusOutlined />}>{t.createNode}</Button>
                  <Button onClick={handleFindNode} icon={<SearchOutlined />}>{t.findNode}</Button>
                  <Button onClick={handleUpdateNode}>{t.updateNode}</Button>
                  <Button danger onClick={handleDeleteNode}>{t.deleteNode}</Button>
                </div>
              </div>
            </TabPane>
            <TabPane tab={t.relationshipOperations} key="2">
              <div className="tab-pane-content">
                <div className="input-section">
                  <Input
                    size="large"
                    placeholder={t.relationshipName}
                    value={relationshipName}
                    onChange={(e) => setRelationshipName(e.target.value)}
                  />
                  {renderPropertiesEditor('relationship')}
                </div>
                <div className="action-buttons">
                  <Button type="primary" onClick={handleCreateRelationship} icon={<PlusOutlined />}>{t.createRelationship}</Button>
                  <Button onClick={handleFindRelationship} icon={<SearchOutlined />}>{t.findRelationship}</Button>
                  <Button onClick={handleUpdateRelationship}>{t.updateRelationship}</Button>
                  <Button danger onClick={handleDeleteRelationship}>{t.deleteRelationship}</Button>
                </div>
              </div>
            </TabPane>
          </Tabs>
        </Card>

        <div className="visualization-wrapper">
          <div className="visualization-header">
            <Title level={4} style={{ margin: 0 }}>{t.graphVisualization}</Title>
            <Button type="primary" onClick={handleGetAllGraph} icon={<SyncOutlined />}>{t.getAllGraph}</Button>
          </div>
          <div className="visualization-container">
            <Neo4jVisualization
              nodes={allNodes}
              relationships={allRelationships}
              // 添加一个key，当数据变化时强制重新渲染组件，解决可视化库可能不更新的问题
              key={allNodes.length + allRelationships.length}
            />
          </div>
        </div>
      </Content>
    </Layout>
  );
};

export default GraphOperate;

--- END: src/pages/GraphOperate/index.tsx ---

--- START: src/pages/GraphOperate/Components/apiFunctions.tsx ---
// 从指定路径的服务模块中导入与图数据库操作相关的函数
import {
  createNodeUsingPost,
  createRelationshipUsingPost,
  deleteNodeUsingDelete,
  deleteRelationshipUsingDelete,
  findNodeUsingPost,
  findRelationshipUsingPost,
  getAllNodesUsingPost,
  getAllRelationshipsUsingPost,
  updateNodeUsingPut,
  updateRelationshipUsingPut
} from '@/services/backend/graphController';
import {message} from "antd";

// 创建节点的异步函数
const createNode = async (node: API.NodeCreateRequest) => {
  try {
    await createNodeUsingPost(node);
    message.success('节点创建成功');
    console.log('Node created');
    return true;
  } catch (error) {
    message.error(`节点创建失败: ${error.message}`);
    console.error(error);
    return false;
  }
};

// 删除节点的异步函数
const deleteNode = async (node: API.NodeDeleteRequest) => {
  try {
    await deleteNodeUsingDelete(node);
    message.success('节点删除成功');
    console.log('Node deleted');
  } catch (error) {
    message.error(`节点删除失败: ${error.message}`);
    console.error(error);
  }
};

// 更新节点的异步函数
const updateNode = async (node: API.NodeUpdateRequest) => {
  try {
    await updateNodeUsingPut(node);
    message.success('节点更新成功');
    console.log('Node updated');
  } catch (error) {
    message.error(`节点更新失败: ${error.message}`);
    console.error(error);
  }
};

// 查找指定节点的异步函数
const findNode = async (query: API.NodeQueryRequest) => {
  try {
    const response = await findNodeUsingPost(query);
    console.log('Node found:', response);
    return response;
  } catch (error) {
    console.error(error);
    message.error(`节点查找失败: ${error.message}`);
    return null;
  }
};

// 获取所有节点的异步函数
async function getAllNodes(params: API.NodeGetAllRequest) {
  try {
    const response = await getAllNodesUsingPost(params);
    message.success('获取全部节点成功');
    console.log('获取全部节点成功：', response);
    return response;
  } catch (error) {
    message.error(`获取全部节点失败: ${error.message}`);
    console.error('获取全部节点失败1：', error);
    throw error;
  }
}

// 创建关系的异步函数
const createRelationship = async (relationship: API.RelationshipCreateRequest) => {
  try {
    await createRelationshipUsingPost(relationship);
    message.success('关系创建成功');
    console.log('Relationship created');
  } catch (error) {
    message.error(`关系创建失败: ${error.message}`);
    console.error(error);
  }
};

// 删除关系的异步函数
const deleteRelationship = async (relationship: API.RelationshipDeleteRequest) => {
  try {
    await deleteRelationshipUsingDelete(relationship);
    message.success('关系删除成功');
    console.log('Relationship deleted');
  } catch (error) {
    message.error(`关系删除失败: ${error.message}`);
    console.error(error);
  }
};

// 更新关系的异步函数
const updateRelationship = async (relationship: API.RelationshipUpdateRequest) => {
  try {
    await updateRelationshipUsingPut(relationship);
    message.success('关系更新成功');
    console.log('Relationship updated');
  } catch (error) {
    message.error(`关系更新失败: ${error.message}`);
    console.error(error);
  }
};

// 查找指定关系的异步函数
const findRelationship = async (query: API.RelationshipQueryRequest) => {
  try {
    const response = await findRelationshipUsingPost(query);
    message.success('关系查找成功');
    console.log('Relationship found:', response);
    return response;
  } catch (error) {
    message.error(`关系查找失败: ${error.message}`);
    console.error(error);
    return null;
  }
};

// 获取所有关系的异步函数
const getAllRelationships = async (params: API.RelationshipGetAllRequest) => {
  try {
    const response = await getAllRelationshipsUsingPost(params);
    message.success('获取全部关系成功');
    return response;
  } catch (error) {
    message.error(`获取全部关系失败: ${error.message}`);
    console.error("获取全部关系失败1：", error);
    return null;
  }
}

// 导出函数
export { createRelationship, deleteRelationship, updateRelationship, findRelationship };
export { createNode, deleteNode, updateNode, findNode };
export { getAllNodes, getAllRelationships };

--- END: src/pages/GraphOperate/Components/apiFunctions.tsx ---

--- START: src/pages/GraphOperate/Components/Neo4jVisualization.tsx ---
import React, { useRef, useEffect, useState } from 'react';
import { Card, Descriptions, Image } from 'antd';
import { Network, DataSet } from 'vis-network/standalone/esm/vis-network';
import 'vis-network/styles/vis-network.css';

// 定义节点的接口
interface Node {
  name: string; // 节点的名称
  properties: { [key: string]: any }; // 节点的属性
}

// 定义关系的接口
interface Relationship {
  name: string; // 关系的名称
  properties: { [key: string]: any }; // 关系的属性
}

// 定义组件的属性接口
interface Neo4jVisualizationProps {
  nodes?: Node[]; // 可选的节点数组
  relationships?: Relationship[]; // 可选的关系数组
}

const Neo4jVisualization: React.FC<Neo4jVisualizationProps> = ({ nodes = [], relationships = [] }) => {
  const cardRef = useRef<HTMLDivElement>(null); // 用于引用图表容器的 ref
  const networkRef = useRef<Network | null>(null); // 用于引用 vis-network 实例的 ref
  const [selectedNode, setSelectedNode] = useState<Node | null>(null); // 当前选中的节点
  const [selectedLink, setSelectedLink] = useState<Relationship | null>(null); // 当前选中的关系

  useEffect(() => {
    // 建立一个不作为节点延伸出去的属性名列表
    const excludedProperties = ['annotatedImage', 'ImgName']
    if (cardRef.current) {
      const container = cardRef.current; // 获取图表容器的 DOM 元素

      // 提取具有相同属性名和属性值的节点，并创建新的节点和边
      const propertyToNodesMap: { [key: string]: Node[] } = {};
      const newNodes: Node[] = [];
      const newRelationships: Relationship[] = [];

      nodes.forEach(node => {
        Object.entries(node.properties).forEach(([key, value]) => {
          if (excludedProperties.includes(key)) {
            return;
          }
          const propertyValue = `${key}:${value}`;
          if (!propertyToNodesMap[propertyValue]) {
            propertyToNodesMap[propertyValue] = [];
          }
          propertyToNodesMap[propertyValue].push(node);
        });
      });

      Object.entries(propertyToNodesMap).forEach(([propertyValue, nodes]) => {
        if (nodes.length > 1) {
          const [key, value] = propertyValue.split(':');
          const newNode: Node = {
            name: propertyValue, // 使用属性名和属性值作为新节点的名称
            properties: {
              belongTo: key
            },
          };

          // 检查新节点是否已经存在，考虑 name 和 properties.belongTo
          const existingNode = newNodes.find(n => n.name === newNode.name && n.properties.belongTo === newNode.properties.belongTo);
          if (!existingNode) {
            newNodes.push(newNode);
          }

          nodes.forEach(node => {
            const newRelationship: Relationship = {
              name: key,
              properties: {
                fromNode: node.name,
                toNode: newNode.name,
              },
            };
            newRelationships.push(newRelationship);
          });
        } else {
          // 如果没有重复的属性值，创建一个新的节点并与原始节点相连
          const [key, value] = propertyValue.split(':');
          const newNode: Node = {
            name: propertyValue, // 使用属性名和属性值作为新节点的名称
            properties: {
              belongTo: key
            },
          };

          // 检查新节点是否已经存在，考虑 name 和 properties.belongTo
          const existingNode = newNodes.find(n => n.name === newNode.name && n.properties.belongTo === newNode.properties.belongTo);
          if (!existingNode) {
            newNodes.push(newNode);
          }

          const node = nodes[0];
          const newRelationship: Relationship = {
            name: key,
            properties: {
              fromNode: node.name,
              toNode: newNode.name,
            },
          };
          newRelationships.push(newRelationship);
        }
      });

      // 将节点数据转换为 vis-network 所需的格式
      const visNodes = new DataSet([
        ...nodes.map(node => ({
          id: node.name, // 使用节点的名称作为 ID
          label: node.name, // 使用节点的名称作为标签
          ...node.properties, // 添加节点的其他属性
          shape: 'ellipse', // 节点的形状为椭圆
          // 设置颜色为淡蓝色
          color: {
            background: '#AED6F1', // 淡蓝色背景
            border: '#3498DB', // 蓝色边框
            highlight: {
              background: '#85C1E9', // 高亮淡蓝色背景
              border: '#2980B9', // 高亮蓝色边框
            },
          },
          borderWidth: 2, // 边框宽度
          font: {
            size: 14, // 字体大小
            color: '#333333', // 字体颜色
          },
        })),
        ...newNodes.map(node => ({
          id: `${node.name}-${node.properties.belongTo}`, // 使用 name 和 belongTo 组合作为 ID
          label: node.name.split(':')[1], // 使用节点的名称作为标签
          ...node.properties, // 添加节点的其他属性
          shape: 'box', // 新节点的形状为矩形
          font: {
            size: 14, // 字体大小
            color: '#333333', // 字体颜色
            align: 'middle', // 文字水平居中
            vadjust: 0, // 文字垂直居中
          },
          // 设置颜色为绿色
          color: {
            background: '#A9DFBF', // 淡绿色背景
            border: '#27AE60', // 绿色边框
            highlight: {
              background: '#7DCEA0', // 高亮淡绿色背景
              border: '#1E8449', // 高亮绿色边框
            },
          },
          borderWidth: 2, // 边框宽度
        })),
      ]);

      // 将关系数据转换为 vis-network 所需的格式
      let edgeIdCounter = 0; // 用于生成唯一边 ID 的计数器
      const visEdges = new DataSet([
        ...relationships.map(rel => {
          const sourceNode = nodes.find(node => node.name === rel.properties.fromNode); // 查找源节点
          const targetNode = nodes.find(node => node.name === rel.properties.toNode); // 查找目标节点

          // 确保 source 和 target 是有效的节点 ID
          if (sourceNode && targetNode) {
            return {
              id: `edge-${edgeIdCounter++}`, // 使用唯一的 ID
              from: sourceNode.name, // 使用源节点的名称作为 from
              to: targetNode.name, // 使用目标节点的名称作为 to
              label: rel.name, // 使用关系的名称作为标签
              ...rel.properties, // 添加关系的其他属性
            };
          } else {
            // 如果找不到对应的节点，跳过该链接
            console.warn(`Skipping relationship ${rel.name} because one or both nodes are missing.`);
            return null;
          }
        }).filter(link => link !== null) as { id: string; from: string; to: string; label: string }[],
        ...newRelationships.map(rel => {
          const sourceNode = nodes.find(node => node.name === rel.properties.fromNode); // 查找源节点
          const targetNode = newNodes.find(node => node.name === rel.properties.toNode); // 查找目标节点

          // 确保 source 和 target 是有效的节点 ID
          if (sourceNode && targetNode) {
            return {
              id: `edge-${edgeIdCounter++}`, // 使用唯一的 ID
              from: sourceNode.name, // 使用源节点的名称作为 from
              to: `${targetNode.name}-${targetNode.properties.belongTo}`, // 使用目标节点的 name 和 belongTo 组合作为 to
              label: rel.name, // 使用关系的名称作为标签
              ...rel.properties, // 添加关系的其他属性
            };
          } else {
            // 如果找不到对应的节点，跳过该链接
            console.warn(`Skipping relationship ${rel.name} because one or both nodes are missing.`);
            return null;
          }
        }).filter(link => link !== null) as { id: string; from: string; to: string; label: string }[],
      ]);

      // 配置 vis-network
      const data = {
        nodes: visNodes, // 节点数据
        edges: visEdges, // 关系数据
      };

      // 打印所有的节点和边
      console.log('Nodes:', visNodes.get());
      console.log('Edges:', visEdges.get());

      const options = {
        interaction: {
          dragNodes: true, // 允许拖动节点
          dragView: true, // 允许拖动视图
          hover: true, // 允许悬停
        },
        physics: {
          enabled: true, // 启用物理引擎
          barnesHut: {
            gravitationalConstant: -200, // 重力常数
            centralGravity: 0, // 中心重力
            springLength: 200, // 弹簧长度
            springConstant: 0.04, // 弹簧常数
            damping: 0.09, // 阻尼
            avoidOverlap: 0.5, // 避免重叠
          },
        },
        nodes: {
          shape: 'dot', // 节点形状为圆点
          size: 20, // 节点大小
          font: {
            size: 12, // 字体大小
          },
          borderWidth: 2, // 边框宽度
          color: {
            background: 'lightgreen', // 背景颜色
            border: 'green', // 边框颜色
            highlight: {
              background: 'lightblue', // 高亮背景颜色
              border: 'blue', // 高亮边框颜色
            },
          },
        },
        edges: {
          arrows: {
            to: {
              enabled: true, // 启用箭头
              scaleFactor: 1, // 箭头缩放因子
            },
          },
          color: {
            color: 'gray', // 默认颜色
            highlight: 'lightblue', // 高亮颜色
          },
          font: {
            align: 'middle', // 标签对齐方式
          },
        },
      };

      // 创建 vis-network 实例
      const network = new Network(container, data, options);
      networkRef.current = network;

      // 监听节点点击事件
      network.on('click', (params) => {
        if (params.nodes.length > 0) {
          const nodeId = params.nodes[0]; // 获取点击的节点 ID
          const node = nodes.find(n => n.name === nodeId) || newNodes.find(n => `${n.name}-${n.properties.belongTo}` === nodeId); // 查找对应的节点
          if (node) {
            setSelectedNode(node); // 设置选中的节点
            setSelectedLink(null); // 清除选中的关系
          }
        } else if (params.edges.length > 0) {
          const edgeId = params.edges[0]; // 获取点击的关系 ID
          const edge = relationships.find(r => r.name === edgeId) || newRelationships.find(r => r.name === edgeId);
          if (edge) {
            setSelectedLink(edge); // 设置选中的关系
            setSelectedNode(null); // 清除选中的节点
          }
        }
      });

      return () => {
        network.destroy(); // 销毁 vis-network 实例
      };
    }
  }, [nodes, relationships]);

  // 限制属性显示的长度
  const truncateString = (str: string, maxLength: number) => {
    return str.length > maxLength ? str.substring(0, maxLength) + '...' : str;
  };

  return (
    <div style={{ height: '100%', width: 1700, display: 'flex', overflow: 'hidden' }}>
      <Card ref={cardRef} style={{ width:1000, height: 800 }} /> {/* 图表容器 */}
      <Card style={{ width: 700, height: 800, overflowY: 'auto' }}>
        {/* 如果选中了节点，显示节点详情 */}
        {selectedNode && (
          <Descriptions title="Node Details" bordered>
            {/* 显示节点的名称，独占一行 */}
            <Descriptions.Item label="Name" span={2}>
              {selectedNode.name}
            </Descriptions.Item>
            {/*空白占位*/}<Descriptions.Item label="" span={2}>{}</Descriptions.Item>
            {/* 显示节点的属性，每个属性单独一行并缩进显示 */}
            {Object.entries(selectedNode.properties).map(([key, value]) => (
              <Descriptions.Item key={key} label={key} span={2} style={{ paddingLeft: '20px' }}>
                {truncateString(value, 30)}
              </Descriptions.Item>
            ))}
            {/* 如果节点包含 annotatedImage 属性，显示图片 */}
            {selectedNode.properties.annotatedImage && (
              <Descriptions.Item label="Annotated Image" span={2}>
                <Image src={selectedNode.properties.annotatedImage} />
              </Descriptions.Item>
            )}
          </Descriptions>
        )}
        {/* 如果选中了链接，显示链接详情 */}
        {selectedLink && (
          <Descriptions title="Link Details" bordered>
            {/* 显示链接的名称，独占一行 */}
            <Descriptions.Item label="Name" span={2}>
              {selectedLink.name}
            </Descriptions.Item>
            {/*空白占位*/}<Descriptions.Item label="" span={2}>{}</Descriptions.Item>
            {/* 显示链接的属性，每个属性单独一行并缩进显示 */}
            {Object.entries(selectedLink.properties).map(([key, value]) => (
              <Descriptions.Item key={key} label={key} span={2} style={{ paddingLeft: '20px' }}>
                {truncateString(value, 30)}
              </Descriptions.Item>
            ))}
          </Descriptions>
        )}
      </Card>
    </div>
  );
};

export default Neo4jVisualization; // 导出组件

--- END: src/pages/GraphOperate/Components/Neo4jVisualization.tsx ---

--- START: src/pages/GraphOperate/Constants/dataTypes.ts ---
interface CircuitNode {
    name: string;
    shape: string;
    properties: {
        load: string;
        low: string;
        input: string;
        output: string;
        class: string;
        evaluates: string;
        sets: string;
        DM_Gain: string;
        CMRR: string;
        PSRR: string;
        CM_gain: string;
    };
}

// 定义链路数据的接口类型
interface Link {
    source: string;
    target: string;
    properties: {
        label: string;
    };
}


--- END: src/pages/GraphOperate/Constants/dataTypes.ts ---

--- START: src/pages/GraphOperate/Styles/Button.css ---
/* Button Base Styles */
.button {
  padding: 8px 16px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: 500;
  font-size: 14px;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 36px;
  margin: 0 4px;
}

/* Primary Button - For main actions (create) */
.button-primary {
  background-color: #1a73e8;
  color: white;
}

.button-primary:hover {
  background-color: #0d66da;
  box-shadow: 0 2px 6px rgba(26, 115, 232, 0.3);
}

.button-primary:active {
  background-color: #0b57d0;
  transform: translateY(1px);
}

/* Secondary Button - For additive actions */
.button-secondary {
  background-color: white;
  color: #1a73e8;
  border: 1px solid #1a73e8;
}

.button-secondary:hover {
  background-color: #f4f8fe;
}

.button-secondary:active {
  background-color: #e8f0fe;
  transform: translateY(1px);
}

/* Action Button - For neutral operations (find, update) */
.button-action {
  background-color: white;
  color: #333;
  border: 1px solid #dadce0;
}

.button-action:hover {
  background-color: #f5f5f5;
}

.button-action:active {
  background-color: #e8e8e8;
  transform: translateY(1px);
}

/* Danger Button - For destructive actions (delete) */
.button-danger {
  background-color: white;
  color: #d93025;
  border: 1px solid #d93025;
}

.button-danger:hover {
  background-color: #fdeeee;
}

.button-danger:active {
  background-color: #fce8e6;
  transform: translateY(1px);
}

/* Fetch Button - Special styled button for fetching data */
.button-fetch {
  background-color: #34a853;
  color: white;
  font-weight: 500;
  padding: 10px 20px;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(52, 168, 83, 0.2);
}

.button-fetch:hover {
  background-color: #2e9549;
  box-shadow: 0 4px 12px rgba(52, 168, 83, 0.3);
}

.button-fetch:active {
  background-color: #287e3f;
  transform: translateY(1px);
  box-shadow: 0 1px 4px rgba(52, 168, 83, 0.2);
}

/* Focus states for accessibility */
.button:focus {
  outline: none;
  box-shadow: 0 0 0 2px rgba(26, 115, 232, 0.4);
}

/* Button icon spacing */
.button span {
  margin-right: 6px;
}

/* Button group styling */
.action-group {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-top: 16px;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .action-group {
    justify-content: center;
  }

  .button {
    min-width: 120px;
  }
}

--- END: src/pages/GraphOperate/Styles/Button.css ---

--- START: src/pages/GraphOperate/Styles/customStyles.css ---
/* Global styles */
body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  background-color: #f7f9fc;
  margin: 0;
  padding: 0;
  color: #333;
}

/* Layout containers */
.graph-container {
  max-width: 1200px;
  margin: 24px auto;
  padding: 0 24px;
}

.panels-container {
  display: flex;
  gap: 24px;
  margin-bottom: 24px;
}

.panel {
  flex: 1;
  min-width: 0;
}

/* Card styling */
.graph-card {
  background-color: white;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  padding: 24px;
  margin-bottom: 24px;
  border: none;
}

/* Typography */
.panel-title {
  color: #1a73e8;
  font-weight: 600;
  margin-bottom: 24px;
  font-size: 20px;
  border-bottom: 1px solid #f0f0f0;
  padding-bottom: 12px;
}

/* Form elements */
.property-group {
  margin-bottom: 16px;
}

.input-row {
  display: flex;
  align-items: center;
  margin-bottom: 12px;
  gap: 8px;
}

.text-input {
  padding: 8px 12px;
  border-radius: 6px;
  border: 1px solid #dadce0;
  font-size: 14px;
  width: 100%;
  transition: border 0.2s ease;
}

.text-input:focus {
  border-color: #1a73e8;
  outline: none;
  box-shadow: 0 0 0 2px rgba(26, 115, 232, 0.2);
}

/* Visualization area */
.visualization-container {
  margin-top: 24px;
  height: 500px;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  background-color: white;
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.fade-in {
  animation: fadeIn 0.3s ease-out forwards;
}

/* Responsive styles */
@media (max-width: 768px) {
  .panels-container {
    flex-direction: column;
  }

  .graph-container {
    padding: 0 16px;
  }

  .graph-card {
    padding: 16px;
  }
}

/* Utility classes */
.text-center {
  text-align: center;
}

.mt-20 {
  margin-top: 20px;
}

.mb-20 {
  margin-bottom: 20px;
}

--- END: src/pages/GraphOperate/Styles/customStyles.css ---

--- START: src/pages/MaskOperate/index.css ---
/* MaskOperate/index.css */
/* "Aetherium Weave" (Professional Layout) Theme by Your Top Programmer */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');

:root {
  --base-bg: #F0F5FF;
  --panel-bg: rgba(255, 255, 255, 0.75);
  --panel-bg-solid: #FFFFFF;
  --text-primary: #0D1A2E;
  --text-secondary: #5A6A82;
  --accent-primary: #4A90E2;
  --accent-primary-glow: rgba(74, 144, 226, 0.4);
  --accent-primary-hover: #357ABD;
  --border-color-light: rgba(74, 144, 226, 0.2);
  --border-color-medium: rgba(74, 144, 226, 0.4);
  --danger-color: #E94F4F;
  --danger-glow: rgba(233, 79, 79, 0.4);
  --font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
  --transition-speed: 0.3s;
  --transition-curve: ease-in-out;
}

/* =================================================================== */
/* 1. 全局与新布局结构 (Global & New Layout Structure)                */
/* =================================================================== */
.mask-operate-pro-layout {
  height: 100vh;
  background-color: var(--base-bg);
  font-family: var(--font-family);
  color: var(--text-primary);
  overflow: hidden;
}

.tool-sider-pro {
  background: var(--panel-bg-solid) !important;
  border-right: 1px solid var(--border-color-light);
  box-shadow: 2px 0 8px rgba(0, 30, 80, 0.05);
  z-index: 20;
}

.main-content-layout-pro {
  background: transparent;
  display: flex;
  flex-direction: column;
}

.top-toolbar-pro {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 16px;
  height: 56px;
  background: var(--panel-bg);
  backdrop-filter: blur(12px);
  border-bottom: 1px solid var(--border-color-light);
  z-index: 10;
  flex-shrink: 0;
}

.canvas-content-pro {
  flex-grow: 1;
  padding: 16px;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden; /* 由内部wrapper滚动 */
  position: relative;
}

.canvas-wrapper-pro {
  width: 100%;
  height: 100%;
  overflow: auto;
  background: var(--panel-bg-solid);
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 40, 100, 0.1);
  display: flex;
  justify-content: center;
  align-items: center;
}

.inspector-sider-pro {
  background: var(--panel-bg) !important;
  backdrop-filter: blur(12px);
  border-left: 1px solid var(--border-color-light);
  box-shadow: -2px 0 8px rgba(0, 30, 80, 0.05);
  transition: width var(--transition-speed) var(--transition-curve),
  transform var(--transition-speed) var(--transition-curve);
  z-index: 20;
}

.inspector-sider-pro .ant-layout-sider-children {
  display: flex;
  flex-direction: column;
  height: 100%;
}

/* =================================================================== */
/* 2. 可伸缩分割线 (Resizable Divider)                                 */
/* =================================================================== */
.resizer {
  width: 5px;
  cursor: col-resize;
  background: transparent;
  z-index: 15;
  transition: background-color var(--transition-speed);
}

.resizer:hover {
  background-color: var(--accent-primary-glow);
}

body.resizing, body.resizing * {
  cursor: col-resize !important;
  user-select: none;
}

/* =================================================================== */
/* 3. 组件样式更新 (Component Style Updates)                         */
/* =================================================================== */

/* ---> 左侧工具栏 (Tool Sidebar) <--- */
.tool-button-pro {
  width: 44px;
  height: 44px;
  font-size: 16px;
  color: var(--text-secondary);
}
.tool-button-pro.ant-btn-primary {
  color: #fff;
}
.tool-button-pro.ant-btn-text:hover {
  background: var(--base-bg) !important;
  color: var(--accent-primary) !important;
}

/* ---> 顶部工具栏 (Top Toolbar) <--- */
.image-info-text-pro {
  color: var(--text-secondary);
  font-weight: 500;
  max-width: 300px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* ---> 画布 (Canvas) <--- */
.drawing-canvas-pro {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
  display: block;
}
.draw-cursor-pro { cursor: crosshair; }
.delete-cursor-pro { cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="%23E94F4F" stroke="white" stroke-width="1.5"><circle cx="12" cy="12" r="10"/><line x1="15" y1="9" x2="9" y2="15"/><line x1="9" y1="9" x2="15" y2="15"/></svg>') 12 12, auto; }

/* ---> 右侧检查器 (Inspector) <--- */
.inspector-tabs-pro {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}
.inspector-tabs-pro .ant-tabs-nav {
  margin-bottom: 0;
  padding: 0 16px;
}
.inspector-tabs-pro .ant-tabs-nav-wrap {
  border-bottom: 1px solid var(--border-color-light);
}
.inspector-tabs-pro .ant-tabs-tab {
  padding: 12px 0;
}
.inspector-tabs-pro .tab-text {
  margin-left: 8px;
}
.inspector-tabs-pro .ant-tabs-content-holder {
  flex-grow: 1;
  overflow: hidden;
}
.tab-pane-content {
  padding: 16px;
  height: 100%;
  overflow-y: auto;
}

/* ---> 标注列表 (Annotation List) - 样式微调 <--- */
.annotation-panel-item-pro .ant-collapse-header .ant-space-item:first-child {
  min-width: 0; /* 关键CSS，允许flex-shrink生效 */
}
.category-name-text-pro {
  flex-shrink: 1; /* 允许文本收缩 */
  min-width: 0;   /* 配合 ellipsis 生效 */
}

/* ---> 滚动条 (Scrollbar) <--- */
::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}
::-webkit-scrollbar-track {
  background: transparent;
}
::-webkit-scrollbar-thumb {
  background: var(--border-color-medium);
  border-radius: 3px;
}
::-webkit-scrollbar-thumb:hover {
  background: var(--accent-primary);
}

/* ---> Sider Footer for Toggle Button <--- */
.sider-footer {
  flex-shrink: 0;
  text-align: right;
  padding: 4px;
  border-top: 1px solid var(--border-color-light);
}

/* ---> 其他通用组件样式 <--- */
.ant-btn {
  border-radius: 6px;
  font-weight: 500;
  transition: all var(--transition-speed) var(--transition-curve);
}
.ant-btn-primary {
  background: var(--accent-primary);
  border-color: var(--accent-primary);
}
.ant-btn-primary:hover {
  background: var(--accent-primary-hover);
  border-color: var(--accent-primary-hover);
}
.ant-form-item-label > label {
  color: var(--text-secondary);
  font-weight: 500;
}
.ant-select-selector, .ant-input-number {
  background-color: var(--panel-bg-solid) !important;
  border: 1px solid var(--border-color-medium) !important;
}

--- END: src/pages/MaskOperate/index.css ---

--- START: src/pages/MaskOperate/index.tsx ---
// MaskOperate/index.tsx
import React, { useState, useRef, useEffect, useCallback } from "react";
import { useModel } from 'umi';
import { Card, Button, Select, InputNumber, Layout, message, Typography, List, Collapse, Space, Tooltip, Form, Radio, Upload, Switch as AntSwitch, Tabs } from 'antd';
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faUpload, faChevronLeft, faChevronRight, faUndo, faRedo,
  faSave, faDrawPolygon, faTrash, faPaintBrush,
  faCog, faList, faMousePointer, faFileArchive, faEraser, faEye, faEyeSlash, faRobot
} from "@fortawesome/free-solid-svg-icons";
import JSZip from 'jszip';
import { saveAs } from 'file-saver';
import { defaultCategoryColors, translations, RESIZE_HANDLE_SIZE } from './constants';
import './index.css';

const { Title, Text } = Typography;
const { Panel } = Collapse;
const { Option } = Select;
const { TabPane } = Tabs;

// ===================================================================
// 接口与类型定义
// ===================================================================
type Point = { x: number; y: number };

type ViewBoxAnnotation = {
  id: string;
  x: number; y: number; width: number; height: number;
  category: string; color: string; sourceLineWidth: number;
};
type ViewDiagonalAnnotation = {
  id: string;
  points: [Point, Point];
  category: string; color: string; thickness: number;
};
type ViewAnnotation = ViewBoxAnnotation | ViewDiagonalAnnotation;

type ImageFileInfo = {
  name: string;
  url: string;
  originalFile: File;
  width: number;
  height: number;
};

type ImageAnnotationData = {
  jsonAnnotations: ViewAnnotation[];
  txtAnnotations: ViewAnnotation[];
  originalTxtFileContent?: string;
};

type UndoOperation = {
  imageId: string;
  previousJsonAnnotations: ViewAnnotation[];
};

type ActiveTool = 'select' | 'rectangle' | 'diagonal' | 'delete';
type AnnotationSourceType = 'json' | 'txt' | 'none';

type ResizeHandle = 'topLeft' | 'top' | 'topRight' | 'left' | 'right' | 'bottomLeft' | 'bottom' | 'bottomRight';
type DraggingState = {
  type: 'move' | 'resize';
  handle?: ResizeHandle;
  startMousePos: Point;
  startAnnotationState: ViewAnnotation;
} | null;


// ===================================================================
// 辅助函数
// ===================================================================
const getFileNameWithoutExtension = (fileName: string): string => {
  const lastDotIndex = fileName.lastIndexOf('.');
  if (lastDotIndex === -1) return fileName;
  return fileName.substring(0, lastDotIndex);
};

const generateUniqueId = (): string => `anno_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

const getCategoryColor = (categoryName: string, currentCategoryColors: { [key: string]: string }, allClasses: string[], defaultColors: {[key:string]:string}): string => {
  if (currentCategoryColors[categoryName]) {
    return currentCategoryColors[categoryName];
  }
  if (defaultColors[categoryName]) {
    return defaultColors[categoryName];
  }
  const categoryIndexInAll = allClasses.indexOf(categoryName);
  const defaultColorKeys = Object.keys(defaultColors);
  if (defaultColorKeys.length > 0) {
    if (categoryIndexInAll !== -1) {
      return defaultColors[defaultColorKeys[categoryIndexInAll % defaultColorKeys.length]];
    } else {
      const knownColorCategories = Object.keys(currentCategoryColors);
      return defaultColors[defaultColorKeys[knownColorCategories.length % defaultColorKeys.length]];
    }
  }
  return "rgba(128, 128, 128, 0.4)";
};


// ===================================================================
// 主组件
// ===================================================================
const MaskOperatePro = () => {
  const { initialState } = useModel('@@initialState');
  const [currentLang, setCurrentLang] = useState(initialState?.language || 'zh');
  const t = translations[currentLang];

  const [images, setImages] = useState<ImageFileInfo[]>([]);
  const [currentImageIndex, setCurrentImageIndex] = useState<number>(-1);

  const [allImageAnnotations, setAllImageAnnotations] = useState<{ [imageName: string]: ImageAnnotationData }>({});

  const [categories, setCategories] = useState<string[]>(Object.keys(defaultCategoryColors));
  const [categoryColors, setCategoryColors] = useState<{ [key: string]: string }>({...defaultCategoryColors});

  const [activeTool, setActiveTool] = useState<ActiveTool>('rectangle');
  const [currentCategory, setCurrentCategory] = useState<string>(Object.keys(defaultCategoryColors)[0] || "");
  const [currentLineWidth, setCurrentLineWidth] = useState<number>(5);

  const [isInspectorVisible, setIsInspectorVisible] = useState<boolean>(true);
  const [inspectorWidth, setInspectorWidth] = useState<number>(320);
  const [isResizing, setIsResizing] = useState<boolean>(false);

  const [undoStack, setUndoStack] = useState<UndoOperation[]>([]);
  const [redoStack, setRedoStack] = useState<UndoOperation[]>([]);

  const [annotationListExpandedKeys, setAnnotationListExpandedKeys] = useState<string[] | number[]>([]);
  const [canvasMousePosition, setCanvasMousePosition] = useState<Point>({ x: 0, y: 0 });

  const [selectedAnnotationSource, setSelectedAnnotationSource] = useState<AnnotationSourceType>('json');
  const [showAnnotationsOnCanvas, setShowAnnotationsOnCanvas] = useState<boolean>(true);
  const [showCategoryInBox, setShowCategoryInBox] = useState<boolean>(true);

  const [selectedAnnotationId, setSelectedAnnotationId] = useState<string | null>(null);
  const [draggingState, setDraggingState] = useState<DraggingState>(null);
  const [hoveredHandle, setHoveredHandle] = useState<ResizeHandle | null>(null);

  const canvasRef = useRef<HTMLCanvasElement>(null);
  const folderUploadInputRef = useRef<HTMLInputElement>(null);
  const classesFileInputRef = useRef<HTMLInputElement>(null);

  const hasActiveImage = images.length > 0 && currentImageIndex >= 0 && currentImageIndex < images.length;
  const currentImageInfo = hasActiveImage ? images[currentImageIndex] : null;

  const activeViewAnnotations = useCallback((): ViewAnnotation[] => {
    if (!currentImageInfo || !showAnnotationsOnCanvas) return [];
    const annotationsForCurrentImage = allImageAnnotations[currentImageInfo.name];
    if (!annotationsForCurrentImage) return [];

    if (selectedAnnotationSource === 'json') return annotationsForCurrentImage.jsonAnnotations || [];
    if (selectedAnnotationSource === 'txt') return annotationsForCurrentImage.txtAnnotations || [];
    return [];
  }, [currentImageInfo, allImageAnnotations, selectedAnnotationSource, showAnnotationsOnCanvas]);

  const currentCanvasAnnotations = activeViewAnnotations();
  const selectedAnnotation = currentCanvasAnnotations.find(a => a.id === selectedAnnotationId);

  useEffect(() => {
    if (categories.length > 0 && (!currentCategory || !categories.includes(currentCategory))) {
      setCurrentCategory(categories[0]);
    } else if (categories.length === 0 && currentCategory !== "") {
      setCurrentCategory("");
    }
  }, [categories, currentCategory]);

  useEffect(() => {
    redrawCanvas();
  }, [currentImageInfo, currentCanvasAnnotations, selectedAnnotationId, showCategoryInBox, activeTool, draggingState, canvasMousePosition]);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas || activeTool !== 'select' || !selectedAnnotation || 'points' in selectedAnnotation) {
      if(canvas) canvas.style.cursor = 'default';
      return;
    }

    const checkHandles = (mousePos: Point) => {
      const handles = getResizeHandles(selectedAnnotation as ViewBoxAnnotation);
      for(const handle of Object.keys(handles)) {
        const h = handles[handle as ResizeHandle];
        if(isPointInRect(mousePos, {x: h.x, y: h.y, width: h.size, height: h.size})) {
          setHoveredHandle(handle as ResizeHandle);
          canvas.style.cursor = handles[handle as ResizeHandle].cursor;
          return;
        }
      }
      if(isPointInRect(mousePos, selectedAnnotation)) {
        canvas.style.cursor = 'move';
      } else {
        canvas.style.cursor = 'default';
      }
      setHoveredHandle(null);
    };

    const handleMouseMove = (e: MouseEvent) => {
      if (draggingState) return;
      const rect = canvas.getBoundingClientRect();
      if (rect.width === 0 || rect.height === 0 || !currentImageInfo) return;

      const scaleX = currentImageInfo.width / rect.width;
      const scaleY = currentImageInfo.height / rect.height;
      const xOnImage = (e.clientX - rect.left) * scaleX;
      const yOnImage = (e.clientY - rect.top) * scaleY;

      checkHandles({ x: xOnImage, y: yOnImage });
    };

    canvas.addEventListener('mousemove', handleMouseMove);
    return () => canvas.removeEventListener('mousemove', handleMouseMove);

  }, [selectedAnnotation, activeTool, draggingState, currentImageInfo]);


  useEffect(() => {
    const canvasElement = canvasRef.current;
    if (!canvasElement) return;

    const handleMouseMoveForCoords = (event: MouseEvent) => {
      if (!currentImageInfo || !canvasRef.current) {
        setCanvasMousePosition({ x: 0, y: 0 });
        return;
      }
      const rect = canvasRef.current.getBoundingClientRect();
      if (rect.width === 0 || rect.height === 0) return;

      const scaleX = currentImageInfo.width / rect.width;
      const scaleY = currentImageInfo.height / rect.height;
      const xOnImage = Math.round((event.clientX - rect.left) * scaleX);
      const yOnImage = Math.round((event.clientY - rect.top) * scaleY);
      setCanvasMousePosition({ x: Math.max(0, xOnImage), y: Math.max(0, yOnImage) });
    };

    canvasElement.addEventListener('mousemove', handleMouseMoveForCoords);
    return () => canvasElement.removeEventListener('mousemove', handleMouseMoveForCoords);
  }, [currentImageInfo]);

  const handleMouseDownOnResize = (e: React.MouseEvent) => {
    e.preventDefault();
    setIsResizing(true);
  };

  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      if (!isResizing) return;
      const newWidth = window.innerWidth - e.clientX;
      if (newWidth > 200 && newWidth < 800) {
        setInspectorWidth(newWidth);
      }
    };

    const handleMouseUp = () => {
      setIsResizing(false);
    };

    if (isResizing) {
      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('mouseup', handleMouseUp);
    }

    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('mouseup', handleMouseUp);
    };
  }, [isResizing]);

  const getResizeHandles = (box: ViewBoxAnnotation): {[key in ResizeHandle]: {x: number, y: number, size: number, cursor: string}} => {
    const s = RESIZE_HANDLE_SIZE;
    const { x, y, width, height } = box;
    return {
      topLeft:    { x: x - s/2, y: y - s/2, size: s, cursor: 'nwse-resize' },
      top:        { x: x + width/2 - s/2, y: y - s/2, size: s, cursor: 'ns-resize' },
      topRight:   { x: x + width - s/2, y: y - s/2, size: s, cursor: 'nesw-resize' },
      left:       { x: x - s/2, y: y + height/2 - s/2, size: s, cursor: 'ew-resize' },
      right:      { x: x + width - s/2, y: y + height/2 - s/2, size: s, cursor: 'ew-resize' },
      bottomLeft: { x: x - s/2, y: y + height - s/2, size: s, cursor: 'nesw-resize' },
      bottom:     { x: x + width/2 - s/2, y: y + height - s/2, size: s, cursor: 'ns-resize' },
      bottomRight:{ x: x + width - s/2, y: y + height - s/2, size: s, cursor: 'nwse-resize' },
    };
  };

  const isPointInRect = (point: Point, rect: { x: number; y: number; width: number; height: number }): boolean => {
    return point.x >= rect.x && point.x <= rect.x + rect.width && point.y >= rect.y && point.y <= rect.y + rect.height;
  };

  const redrawCanvas = () => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    if (currentImageInfo) {
      const img = new Image();
      img.src = currentImageInfo.url;
      img.onload = () => {
        canvas.width = currentImageInfo.width;
        canvas.height = currentImageInfo.height;
        ctx.clearRect(0,0, canvas.width, canvas.height);

        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

        ctx.save();
        ctx.strokeStyle = 'rgba(0, 0, 0, 0.4)';
        ctx.lineWidth = 1;
        ctx.setLineDash([5, 3]);
        ctx.strokeRect(0, 0, canvas.width, canvas.height);
        ctx.restore();

        currentCanvasAnnotations.forEach(anno => {
          const isSelected = anno.id === selectedAnnotationId;
          ctx.globalAlpha = isSelected ? 1.0 : 0.75;
          if ('points' in anno) {
            renderDiagonal(anno, ctx, false, isSelected);
          } else {
            renderRectangle(anno, ctx, false, isSelected);
          }
        });

        if (draggingState) {
          const startPoint = draggingState.startMousePos;
          const endPoint = canvasMousePosition;

          if (activeTool === 'rectangle') {
            const previewRect = createRectangleFromPoints(startPoint, endPoint, currentCategory, categoryColors[currentCategory] || 'rgba(0,0,0,0.2)', currentLineWidth);
            renderRectangle(previewRect, ctx, true);
          } else if (activeTool === 'diagonal') {
            const previewDiag: ViewDiagonalAnnotation = {
              id: 'temp_diag',
              points: [startPoint, endPoint],
              category: currentCategory,
              color: categoryColors[currentCategory] || 'rgba(0,0,0,0.4)',
              thickness: currentLineWidth,
            };
            renderDiagonal(previewDiag, ctx, true);
          }
        }

        ctx.globalAlpha = 1.0;
      };
      if (img.complete) img.onload();
    } else {
      const displayWidth = canvas.offsetWidth || 800;
      const displayHeight = canvas.offsetHeight || 600;
      canvas.width = displayWidth; canvas.height = displayHeight;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = "#e0e8f0"; ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.font = "bold 20px Arial"; ctx.fillStyle = "#0050b3"; ctx.textAlign = "center";
      ctx.fillText(t.noImages, canvas.width / 2, canvas.height / 2);
    }
  };

  const renderRectangle = (box: ViewBoxAnnotation, ctx: CanvasRenderingContext2D, isPreview = false, isSelected = false) => {
    if (isPreview) {
      ctx.save();
      ctx.setLineDash([8, 4]);
      ctx.strokeStyle = "#4A90E2";
      ctx.lineWidth = 1.5;
      ctx.strokeRect(box.x, box.y, box.width, box.height);
      ctx.restore();
      return;
    }

    ctx.fillStyle = box.color;
    ctx.strokeStyle = isSelected ? "#007bff" : "rgba(0,0,0,0.8)";
    ctx.lineWidth = isSelected ? 2.5 : 1.5;
    ctx.fillRect(box.x, box.y, box.width, box.height);
    ctx.strokeRect(box.x, box.y, box.width, box.height);

    if (showCategoryInBox && !isPreview) {
      ctx.fillStyle = "black";
      ctx.font = "bold 12px Arial";
      ctx.textBaseline = "top";
      const maxTextWidth = box.width - 6;
      let displayText = box.category;
      if(ctx.measureText(displayText).width > maxTextWidth && maxTextWidth > 10) {
        let newText = "";
        for(let char of box.category){
          if(ctx.measureText(newText + char + "...").width > maxTextWidth) break;
          newText += char;
        }
        displayText = newText ? newText + "..." : "";
      }
      if(displayText) ctx.fillText(displayText, box.x + 3, box.y + 3);
    }

    if (isSelected && !isPreview) {
      const handles = getResizeHandles(box);
      ctx.fillStyle = '#007bff';
      for (const handle of Object.values(handles)) {
        ctx.fillRect(handle.x, handle.y, handle.size, handle.size);
      }
    }
  };

  const renderDiagonal = (diag: ViewDiagonalAnnotation, ctx: CanvasRenderingContext2D, isPreview = false, isSelected = false) => {
    const { angleRad, length, centerX, centerY } = getDiagonalParameters(diag.points);
    if (length === 0) return;

    ctx.save();
    ctx.translate(centerX, centerY);
    ctx.rotate(angleRad);
    ctx.beginPath();
    ctx.rect(-length / 2, -diag.thickness / 2, length, diag.thickness);

    if (isPreview) {
      ctx.setLineDash([8, 4]);
      ctx.strokeStyle = "#4A90E2";
      ctx.lineWidth = 2;
      ctx.stroke();
    } else {
      ctx.fillStyle = diag.color;
      if (isSelected) {
        ctx.strokeStyle = "#007bff";
        ctx.lineWidth = 2.5;
      } else {
        ctx.strokeStyle = "rgba(0,0,0,0.6)";
        ctx.lineWidth = 1;
      }
      ctx.fill();
      ctx.stroke();
    }

    ctx.restore();

    if (showCategoryInBox && !isPreview) {
      ctx.fillStyle = "black";
      ctx.font = "bold 12px Arial";
      ctx.textAlign = "center";
      ctx.textBaseline = "bottom";
      ctx.fillText(diag.category, centerX, centerY - diag.thickness / 2 - 5);
      ctx.textAlign = "start";
      ctx.textBaseline = "alphabetic";
    }
  };

  const getDiagonalParameters = (points: [Point, Point]) => {
    const dx = points[1].x - points[0].x;
    const dy = points[1].y - points[0].y;
    return {
      angleRad: Math.atan2(dy, dx),
      length: Math.sqrt(dx * dx + dy * dy),
      centerX: (points[0].x + points[1].x) / 2,
      centerY: (points[0].y + points[1].y) / 2,
    };
  };

  const createRectangleFromPoints = (p1: Point, p2: Point, categoryName: string, colorStr: string, lineWidthVal: number): ViewBoxAnnotation => {
    const x = Math.min(p1.x, p2.x);
    const y = Math.min(p1.y, p2.y);
    const width = Math.abs(p1.x - p2.x);
    const height = Math.abs(p1.y - p2.y);
    return {
      id: generateUniqueId(),
      x: parseFloat(x.toFixed(2)), y: parseFloat(y.toFixed(2)),
      width: parseFloat(width.toFixed(2)), height: parseFloat(height.toFixed(2)),
      category: categoryName, color: colorStr, sourceLineWidth: lineWidthVal,
    };
  };

  const handleCanvasMouseDown = (e: React.MouseEvent<HTMLCanvasElement>) => {
    if (!currentImageInfo) return;
    const mousePos = canvasMousePosition;

    if (activeTool === 'select') {
      let clickedOnAnnotation: ViewAnnotation | undefined = undefined;
      let clickedHandle: ResizeHandle | null = null;

      const selectedAnno = currentCanvasAnnotations.find(a => a.id === selectedAnnotationId);
      if (selectedAnno && !('points' in selectedAnno)) {
        const handles = getResizeHandles(selectedAnno);
        for(const handleKey of Object.keys(handles)) {
          const handle = handles[handleKey as ResizeHandle];
          if(isPointInRect(mousePos, {x: handle.x, y: handle.y, width: handle.size, height: handle.size})) {
            clickedOnAnnotation = selectedAnno;
            clickedHandle = handleKey as ResizeHandle;
            break;
          }
        }
      }

      if (!clickedOnAnnotation) {
        for (let i = currentCanvasAnnotations.length - 1; i >= 0; i--) {
          const anno = currentCanvasAnnotations[i];
          if ('points' in anno) {
            const diag = anno as ViewDiagonalAnnotation;
            const { angleRad, length, centerX, centerY } = getDiagonalParameters(diag.points);
            const translatedX = mousePos.x - centerX;
            const translatedY = mousePos.y - centerY;
            const rotatedX = translatedX * Math.cos(-angleRad) - translatedY * Math.sin(-angleRad);
            const rotatedY = translatedX * Math.sin(-angleRad) + translatedY * Math.cos(-angleRad);
            if (Math.abs(rotatedX) <= length / 2 && Math.abs(rotatedY) <= diag.thickness / 2) {
              clickedOnAnnotation = anno;
              break;
            }
          } else {
            if (isPointInRect(mousePos, anno as ViewBoxAnnotation)) {
              clickedOnAnnotation = anno;
              break;
            }
          }
        }
      }

      if (clickedOnAnnotation) {
        setSelectedAnnotationId(clickedOnAnnotation.id);
        addUndoRecord(currentImageInfo.name, currentCanvasAnnotations);
        setDraggingState({
          type: clickedHandle ? 'resize' : 'move',
          handle: clickedHandle || undefined,
          startMousePos: mousePos,
          startAnnotationState: JSON.parse(JSON.stringify(clickedOnAnnotation))
        });
      } else {
        setSelectedAnnotationId(null);
      }

    } else if (activeTool === 'rectangle' || activeTool === 'diagonal') {
      if (!currentCategory || !categoryColors[currentCategory]) {
        if (!currentCategory) message.warn("请先选择一个类别再进行标注!");
        else message.error(`类别 "${currentCategory}" 缺少颜色配置，无法标注!`);
        return;
      }
      const startPoint = { x: mousePos.x, y: mousePos.y };
      setDraggingState({ type: 'move' , startMousePos: startPoint, startAnnotationState: {} as any });
    }
  };

  const handleCanvasMouseMove = (e: React.MouseEvent<HTMLCanvasElement>) => {
    if (!draggingState || !currentImageInfo) return;

    const mousePos = canvasMousePosition;
    const dx = mousePos.x - draggingState.startMousePos.x;
    const dy = mousePos.y - draggingState.startMousePos.y;

    if (activeTool === 'select') {
      const updatedAnnotations = currentCanvasAnnotations.map(anno => {
        if (anno.id === draggingState.startAnnotationState.id) {
          const startState = draggingState.startAnnotationState;
          let newAnno = { ...startState };

          if (draggingState.type === 'move') {
            if ('points' in startState) {
              newAnno.points = [
                { x: startState.points[0].x + dx, y: startState.points[0].y + dy },
                { x: startState.points[1].x + dx, y: startState.points[1].y + dy }
              ] as [Point, Point];
            } else {
              (newAnno as ViewBoxAnnotation).x = (startState as ViewBoxAnnotation).x + dx;
              (newAnno as ViewBoxAnnotation).y = (startState as ViewBoxAnnotation).y + dy;
            }
          } else if (draggingState.type === 'resize' && draggingState.handle && !('points' in startState)) {
            const handle = draggingState.handle;
            const startBox = startState as ViewBoxAnnotation;
            let newBox = newAnno as ViewBoxAnnotation;
            if (handle.includes('right')) newBox.width = Math.max(1, startBox.width + dx);
            if (handle.includes('left')) {
              newBox.x = startBox.x + dx;
              newBox.width = Math.max(1, startBox.width - dx);
            }
            if (handle.includes('bottom')) newBox.height = Math.max(1, startBox.height + dy);
            if (handle.includes('top')) {
              newBox.y = startBox.y + dy;
              newBox.height = Math.max(1, startBox.height - dy);
            }
          }
          return newAnno;
        }
        return anno;
      });

      setAllImageAnnotations(prev => ({
        ...prev,
        [currentImageInfo.name]: {
          ...prev[currentImageInfo.name],
          jsonAnnotations: updatedAnnotations
        }
      }));
    }
  };

  const handleCanvasMouseUp = (e: React.MouseEvent<HTMLCanvasElement>) => {
    if (!currentImageInfo || !draggingState) return;

    const startPoint = draggingState.startMousePos;
    const endPoint = canvasMousePosition;

    if (activeTool === 'rectangle') {
      const newRect = createRectangleFromPoints(startPoint, endPoint, currentCategory, categoryColors[currentCategory], currentLineWidth);
      if (newRect.width > 2 && newRect.height > 2) {
        addAnnotationToCurrentImage(newRect);
      }
    } else if (activeTool === 'diagonal') {
      const newDiagonal: ViewDiagonalAnnotation = {
        id: generateUniqueId(),
        points: [startPoint, endPoint],
        category: currentCategory,
        color: categoryColors[currentCategory],
        thickness: currentLineWidth,
      };
      if(getDiagonalParameters(newDiagonal.points).length > 2) {
        addAnnotationToCurrentImage(newDiagonal);
      }
    }

    setDraggingState(null);
  };

  const handleCanvasClick = (e: React.MouseEvent<HTMLCanvasElement>) => {
    if (!currentImageInfo || draggingState) return;

    if (activeTool === 'delete') {
      const clickPoint = canvasMousePosition;
      const annoIndexToRemove = findAnnotationIndexAtPoint(clickPoint, currentCanvasAnnotations);
      if (annoIndexToRemove > -1) {
        removeAnnotationFromCurrentImageByIndex(annoIndexToRemove);
      }
    }
  };

  const yoloLineToViewAnnotation = (line: string, imgWidth: number, imgHeight: number, classList: string[], colorMap: { [key: string]: string }, defaultLineWidth: number): ViewBoxAnnotation | null => {
    const parts = line.split(' ');
    if (parts.length < 5) return null;
    const classIndex = parseInt(parts[0], 10);
    const x_center = parseFloat(parts[1]) * imgWidth;
    const y_center = parseFloat(parts[2]) * imgHeight;
    const width = parseFloat(parts[3]) * imgWidth;
    const height = parseFloat(parts[4]) * imgHeight;
    const category = classList[classIndex] || `Class_${classIndex}`;
    const color = getCategoryColor(category, colorMap, classList, defaultCategoryColors);
    return {
      id: generateUniqueId(),
      x: x_center - width / 2,
      y: y_center - height / 2,
      width: width,
      height: height,
      category: category,
      color: color,
      sourceLineWidth: defaultLineWidth,
    };
  };

  const viewAnnotationToYoloString = (anno: ViewBoxAnnotation, imgWidth: number, imgHeight: number, classList: string[]): string | null => {
    const classIndex = classList.indexOf(anno.category);
    if (classIndex === -1) return null;
    const x_center = (anno.x + anno.width / 2) / imgWidth;
    const y_center = (anno.y + anno.height / 2) / imgHeight;
    const width = anno.width / imgWidth;
    const height = anno.height / imgHeight;
    return `${classIndex} ${x_center.toFixed(6)} ${y_center.toFixed(6)} ${width.toFixed(6)} ${height.toFixed(6)}`;
  };

  const exportAllDataAsZip = async () => {
    if (images.length === 0) return;
    message.loading({ content: t.exportingMessage, key: 'exporting', duration: 0 });
    const zip = new JSZip();
    const originalFolder = zip.folder("original_data");
    const annotatedFolder = zip.folder("annotated_data");

    if (!originalFolder || !annotatedFolder) {
      message.error("创建导出文件夹失败！");
      return;
    }

    const offscreenCanvas = document.createElement('canvas');
    const ctx = offscreenCanvas.getContext('2d');

    if (!ctx) {
      message.error("无法创建离屏画布！");
      return;
    }

    for (const imageInfo of images) {
      const { originalFile, name: imageName, width: imgWidth, height: imgHeight } = imageInfo;
      const baseName = getFileNameWithoutExtension(imageName);
      const annotationsForImage = allImageAnnotations[imageName];

      // 1. 处理 original_data 文件夹
      originalFolder.file(imageName, originalFile);
      originalFolder.file(`${baseName}.json`, "{}"); // 空JSON
      originalFolder.file(`${baseName}.txt`, "");     // 空TXT

      // 2. 处理 annotated_data 文件夹
      // 2a. 生成带标注的图片
      const imageToDraw = new Image();
      imageToDraw.src = imageInfo.url;
      await new Promise(resolve => { imageToDraw.onload = resolve; });

      offscreenCanvas.width = imgWidth;
      offscreenCanvas.height = imgHeight;
      ctx.clearRect(0, 0, imgWidth, imgHeight);
      ctx.drawImage(imageToDraw, 0, 0, imgWidth, imgHeight);

      const annotationsToDraw = annotationsForImage?.jsonAnnotations || [];
      annotationsToDraw.forEach(anno => {
        if ('points' in anno) {
          renderDiagonal(anno, ctx);
        } else {
          renderRectangle(anno, ctx);
        }
      });

      const blob = await new Promise<Blob | null>(resolve => offscreenCanvas.toBlob(resolve, 'image/png'));
      if (blob) {
        annotatedFolder.file(`${baseName}.png`, blob);
      }

      // 2b. 生成带标注的JSON文件
      const outputJson: { [category: string]: any[] } = {};
      if (annotationsToDraw.length > 0) {
        annotationsToDraw.forEach(anno => {
          if (!outputJson[anno.category]) outputJson[anno.category] = [];
          if ('points' in anno) {
            outputJson[anno.category].push({
              points: anno.points.map(p => ({ x: parseFloat(p.x.toFixed(2)), y: parseFloat(p.y.toFixed(2)) })),
              thickness: anno.thickness
            });
          } else {
            outputJson[anno.category].push({
              x: parseFloat(anno.x.toFixed(2)), y: parseFloat(anno.y.toFixed(2)),
              width: parseFloat(anno.width.toFixed(2)), height: parseFloat(anno.height.toFixed(2)),
              lineWidth: anno.sourceLineWidth
            });
          }
        });
      }
      annotatedFolder.file(`${baseName}.json`, JSON.stringify(outputJson, null, 2));

      // 2c. 生成带标注的TXT文件
      const yoloContent = annotationsToDraw
        .filter(anno => 'width' in anno)
        .map(anno => viewAnnotationToYoloString(anno as ViewBoxAnnotation, imgWidth, imgHeight, categories))
        .filter(str => str !== null)
        .join('\n');
      annotatedFolder.file(`${baseName}.txt`, yoloContent);
    }

    // 3. 为两个文件夹都添加 classes.txt
    const classesContent = categories.join('\n');
    originalFolder.file("classes.txt", classesContent);
    annotatedFolder.file("classes.txt", classesContent);

    try {
      const content = await zip.generateAsync({ type: "blob" });
      saveAs(content, "structured_annotated_data.zip");
      message.success({ content: t.exportSuccessMessage, key: 'exporting', duration: 3 });
    } catch (error) {
      message.error({ content: `${t.exportFailureMessage} ${(error as Error).message}`, key: 'exporting', duration: 3 });
      console.error("ZIP Export Error:", error);
    }
  };

  const processUploadedFiles = async (uploadedFiles: File[]) => {
    message.loading({ content: t.uploadFolder, key: 'fileProcessing', duration: 0 });
    let workingCategories = [...categories];
    let workingCategoryColors = {...categoryColors};
    const classesFile = uploadedFiles.find(f => f.name.toLowerCase() === "classes.txt");
    if (classesFile) {
      try {
        const classesText = await classesFile.text();
        const parsedCats = classesText.split('\n').map(line => line.trim()).filter(line => line.length > 0);
        if (parsedCats.length > 0) {
          workingCategories = parsedCats;
          const newClrs: { [key: string]: string } = {};
          parsedCats.forEach((cat, idx) => {
            newClrs[cat] = categoryColors[cat] || defaultCategoryColors[cat] || Object.values(defaultCategoryColors)[idx % Object.values(defaultCategoryColors).length] || `hsl(${ (idx * 360 / parsedCats.length) % 360 }, 70%, 60%)`;
          });
          workingCategoryColors = newClrs;
        }
      } catch (e) { message.error(`${t.errorReadFileGeneric} classes.txt: ${(e as Error).message}`); }
    }
    const imageInputFiles = uploadedFiles.filter(f => f.type.match(/image\/(jpeg|png|jpg)/i));
    const jsonInputFiles = uploadedFiles.filter(f => f.name.toLowerCase().endsWith(".json"));
    const txtInputFiles = uploadedFiles.filter(f => f.name.toLowerCase().endsWith(".txt") && f.name.toLowerCase() !== "classes.txt");
    const newImages: ImageFileInfo[] = [];
    const newAnnotationsData: { [imageName: string]: ImageAnnotationData } = {};
    let jsonAnnotationsFoundCount = 0;
    let filesProcessedCount = 0;
    for (const imgFile of imageInputFiles.sort((a,b) => a.name.localeCompare(b.name, undefined, { numeric: true }))) {
      filesProcessedCount++;
      const originalImageName = imgFile.name;
      const baseImageName = getFileNameWithoutExtension(originalImageName);
      const imageUrl = URL.createObjectURL(imgFile);
      try {
        const imageInfo = await new Promise<ImageFileInfo>((resolve, reject) => {
          const imageElement = new Image();
          imageElement.onload = () => resolve({ name: originalImageName, url: imageUrl, originalFile: imgFile, width: imageElement.naturalWidth, height: imageElement.naturalHeight });
          imageElement.onerror = () => reject(new Error(`无法加载图片: ${originalImageName}`));
          imageElement.src = imageUrl;
        });
        newImages.push(imageInfo);
        newAnnotationsData[imageInfo.name] = { jsonAnnotations: [], txtAnnotations: [], originalTxtFileContent: undefined };
        const currentImgWidth = imageInfo.width;
        const currentImgHeight = imageInfo.height;
        const correspondingJsonFile = jsonInputFiles.find(f => getFileNameWithoutExtension(f.name) === baseImageName);
        if (correspondingJsonFile) {
          try {
            const jsonContentText = await correspondingJsonFile.text();
            const rawJsonObject = JSON.parse(jsonContentText);
            if (rawJsonObject && typeof rawJsonObject === 'object' && !Array.isArray(rawJsonObject)) {
              for (const categoryName in rawJsonObject) {
                if (Object.prototype.hasOwnProperty.call(rawJsonObject, categoryName)) {
                  const annotationsForCategory = rawJsonObject[categoryName];
                  if (!Array.isArray(annotationsForCategory)) continue;
                  if (!workingCategories.includes(categoryName)) {
                    workingCategories.push(categoryName);
                    message.info(t.categoryNotFoundInClasses.replace('%s', categoryName));
                  }
                  if(!workingCategoryColors[categoryName]){
                    const defaultColorKeys = Object.keys(defaultCategoryColors);
                    workingCategoryColors[categoryName] = defaultCategoryColors[categoryName] || (defaultColorKeys.length > 0 ? defaultCategoryColors[defaultColorKeys[Object.keys(workingCategoryColors).length % defaultColorKeys.length]] : "rgba(100,100,100,0.5)");
                  }
                  const annoColor = workingCategoryColors[categoryName];
                  annotationsForCategory.forEach((anno: any) => {
                    let newViewAnnotation: ViewAnnotation | null = null;
                    if (anno.points && Array.isArray(anno.points) && anno.points.length === 2 && typeof anno.points[0]?.x === 'number' && typeof anno.points[0]?.y === 'number' && typeof anno.points[1]?.x === 'number' && typeof anno.points[1]?.y === 'number') {
                      newViewAnnotation = { id: generateUniqueId(), points: [{x: anno.points[0].x, y: anno.points[0].y}, {x: anno.points[1].x, y: anno.points[1].y}] as [Point, Point], category: categoryName, color: annoColor, thickness: (typeof anno.thickness === 'number' && anno.thickness > 0) ? anno.thickness : currentLineWidth };
                    } else if (typeof anno.x === 'number' && typeof anno.y === 'number' && typeof anno.width === 'number' && anno.width > 0 && typeof anno.height === 'number' && anno.height > 0) {
                      newViewAnnotation = { id: generateUniqueId(), x: anno.x, y: anno.y, width: anno.width, height: anno.height, category: categoryName, color: annoColor, sourceLineWidth: (typeof anno.lineWidth === 'number' && anno.lineWidth > 0) ? anno.lineWidth : currentLineWidth };
                    }
                    if(newViewAnnotation) {
                      newAnnotationsData[imageInfo.name].jsonAnnotations.push(newViewAnnotation);
                      jsonAnnotationsFoundCount++;
                    }
                  });
                }
              }
            } else { message.error(t.jsonNotObjectError.replace('%s', correspondingJsonFile.name)); }
          } catch (e) { message.error(`${t.errorParseJsonFile} ${correspondingJsonFile.name}: ${(e as Error).message}`); console.error("JSON parsing error details for file " + correspondingJsonFile.name + ":", e); }
        }
        const correspondingTxtFile = txtInputFiles.find(f => getFileNameWithoutExtension(f.name) === baseImageName);
        if (correspondingTxtFile) {
          try {
            const txtContent = await correspondingTxtFile.text();
            newAnnotationsData[imageInfo.name].originalTxtFileContent = txtContent;
            const yoloLines = txtContent.split('\n').filter(line => line.trim() !== '');
            newAnnotationsData[imageInfo.name].txtAnnotations = yoloLines.map(line => yoloLineToViewAnnotation(line, currentImgWidth, currentImgHeight, workingCategories, workingCategoryColors, currentLineWidth)).filter(anno => anno !== null) as ViewBoxAnnotation[];
          } catch (e) { message.error(`${t.errorParseTxtFile} ${correspondingTxtFile.name}: ${(e as Error).message}`); }
        }
      } catch (imgError) { message.error((imgError as Error).message); }
    }
    setCategories(workingCategories);
    setCategoryColors(workingCategoryColors);
    if (workingCategories.length > 0 && (!currentCategory || !workingCategories.includes(currentCategory))) { setCurrentCategory(workingCategories[0]); }
    setImages(newImages);
    setAllImageAnnotations(prev => ({ ...prev, ...newAnnotationsData }));
    setCurrentImageIndex(newImages.length > 0 ? 0 : -1);
    setUndoStack([]);
    setRedoStack([]);
    let successMsg = `${filesProcessedCount} ${t.filesProcessed} `;
    if (jsonAnnotationsFoundCount > 0) { successMsg += `${jsonAnnotationsFoundCount} JSON ${t.annotations.toLowerCase()} ${t.jsonLoadSuccess.toLowerCase()}. `; }
    successMsg += t.fileProcessingComplete;
    message.success({ content: successMsg, key: 'fileProcessing', duration: 5 });
    if (folderUploadInputRef.current) folderUploadInputRef.current.value = "";
  };

  const findAnnotationIndexAtPoint = (point: Point, annotationsToSearch: ViewAnnotation[]): number => {
    for (let i = annotationsToSearch.length - 1; i >= 0; i--) {
      const anno = annotationsToSearch[i];
      if ('points' in anno) {
        const diag = anno as ViewDiagonalAnnotation;
        const { angleRad, length, centerX, centerY } = getDiagonalParameters(diag.points);
        if (length === 0) continue;
        const translatedX = point.x - centerX;
        const translatedY = point.y - centerY;
        const rotatedX = translatedX * Math.cos(-angleRad) - translatedY * Math.sin(-angleRad);
        const rotatedY = translatedX * Math.sin(-angleRad) + translatedY * Math.cos(-angleRad);
        if (Math.abs(rotatedX) <= length / 2 && Math.abs(rotatedY) <= diag.thickness / 2) { return i; }
      } else {
        const box = anno as ViewBoxAnnotation;
        if (point.x >= box.x && point.x <= box.x + box.width && point.y >= box.y && point.y <= box.y + box.height) { return i; }
      }
    }
    return -1;
  };

  const addAnnotationToCurrentImage = (newAnnotation: ViewAnnotation) => {
    if (!currentImageInfo) return;
    const currentAnnosData = allImageAnnotations[currentImageInfo.name] || { jsonAnnotations: [], txtAnnotations: [], originalTxtFileContent: undefined };
    addUndoRecord(currentImageInfo.name, currentAnnosData.jsonAnnotations);
    const updatedJsonAnnotations = [...currentAnnosData.jsonAnnotations, newAnnotation];
    setAllImageAnnotations(prev => ({...prev, [currentImageInfo.name]: { ...currentAnnosData, jsonAnnotations: updatedJsonAnnotations } }));
  };

  const removeAnnotationFromCurrentImageByIndex = (indexInView: number) => {
    if (!currentImageInfo || indexInView < 0 || !currentCanvasAnnotations || indexInView >= currentCanvasAnnotations.length) return;
    const annotationToRemoveFromView = currentCanvasAnnotations[indexInView];
    const currentJsonData = allImageAnnotations[currentImageInfo.name]?.jsonAnnotations;
    if (!currentJsonData) { message.error("无法找到当前图片的JSON标注数据进行删除。"); return; }
    const actualJsonIndex = currentJsonData.findIndex(a => a.id === annotationToRemoveFromView.id);
    if (actualJsonIndex === -1) { message.warn("试图删除的标注在JSON源中未找到。"); return; }
    addUndoRecord(currentImageInfo.name, currentJsonData);
    const updatedJsonAnnotations = [...currentJsonData];
    updatedJsonAnnotations.splice(actualJsonIndex, 1);
    setAllImageAnnotations(prev => ({ ...prev, [currentImageInfo.name]: { ...(prev[currentImageInfo.name] || { jsonAnnotations: [], txtAnnotations: [], originalTxtFileContent: undefined }), jsonAnnotations: updatedJsonAnnotations } }));
    message.success(t.deleteButtonText + " " + t.operationSuccessful);
  };

  const addUndoRecord = (imageId: string, currentJsonAnnotations: ViewAnnotation[]) => {
    setUndoStack(prev => [...prev, { imageId: imageId, previousJsonAnnotations: JSON.parse(JSON.stringify(currentJsonAnnotations)) }]);
    setRedoStack([]);
  };

  const performUndo = () => {
    if (undoStack.length === 0) {
      message.info("没有更多可撤销的操作");
      return;
    }
    const lastOperation = undoStack[undoStack.length - 1];
    const annotationsToPushToRedo = allImageAnnotations[lastOperation.imageId]?.jsonAnnotations || [];
    setRedoStack(prev => [...prev, { imageId: lastOperation.imageId, previousJsonAnnotations: annotationsToPushToRedo }]);
    setAllImageAnnotations(prev => ({ ...prev, [lastOperation.imageId]: { ...(prev[lastOperation.imageId] || { jsonAnnotations: [], txtAnnotations: [] }), jsonAnnotations: lastOperation.previousJsonAnnotations } }));
    setUndoStack(prev => prev.slice(0, -1));
    message.success("操作已撤销");
  };

  const performRedo = () => {
    if (redoStack.length === 0) {
      message.info("没有更多可重做的操作");
      return;
    }
    const lastRedoOperation = redoStack[redoStack.length - 1];
    const annotationsToPushToUndo = allImageAnnotations[lastRedoOperation.imageId]?.jsonAnnotations || [];
    setUndoStack(prev => [...prev, { imageId: lastRedoOperation.imageId, previousJsonAnnotations: annotationsToPushToUndo }]);
    setAllImageAnnotations(prev => ({ ...prev, [lastRedoOperation.imageId]: { ...(prev[lastRedoOperation.imageId] || { jsonAnnotations: [], txtAnnotations: [] }), jsonAnnotations: lastRedoOperation.previousJsonAnnotations } }));
    setRedoStack(prev => prev.slice(0, -1));
    message.success("操作已重做");
  };

  const navigateImage = (offset: number) => {
    const newIndex = currentImageIndex + offset;
    if (newIndex >= 0 && newIndex < images.length) {
      setCurrentImageIndex(newIndex);
      setSelectedAnnotationId(null);
      setDraggingState(null);
    }
  };

  const handleClearCurrentJsonAnnotations = () => {
    if (!currentImageInfo) return;
    const currentAnnosData = allImageAnnotations[currentImageInfo.name];
    if (!currentAnnosData || !currentAnnosData.jsonAnnotations || currentAnnosData.jsonAnnotations.length === 0) { message.info("当前图片的JSON标注已为空。"); return; }
    addUndoRecord(currentImageInfo.name, currentAnnosData.jsonAnnotations);
    setAllImageAnnotations(prev => ({ ...prev, [currentImageInfo.name]: { ...currentAnnosData, jsonAnnotations: [] } }));
    message.success("当前图片的JSON源标注已清空。");
  };

  const handleManualClassesUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;
    message.loading({ content: '正在处理 classes.txt...', key: 'classesProcessing', duration: 0 });
    try {
      const classesText = await file.text();
      const parsedCategories = classesText.split('\n').map(line => line.trim()).filter(line => line.length > 0);
      if (parsedCategories.length > 0) {
        const newColors: { [key: string]: string } = {};
        const oldCategoryColors = {...categoryColors};
        parsedCategories.forEach((cat, idx) => {
          newColors[cat] = oldCategoryColors[cat] || defaultCategoryColors[cat] || Object.values(defaultCategoryColors)[idx % Object.values(defaultCategoryColors).length] || `hsl(${(idx * 360 / parsedCategories.length) % 360}, 70%, 60%)`;
        });
        setCategories(parsedCategories);
        setCategoryColors(newColors);
        if (parsedCategories.length > 0 && (!currentCategory || !parsedCategories.includes(currentCategory))) { setCurrentCategory(parsedCategories[0]); }
        else if (parsedCategories.length === 0) { setCurrentCategory(""); }
        message.success({ content: `classes.txt 已更新: ${parsedCategories.length} 个类别。`, key: 'classesProcessing', duration: 3 });
      } else { message.warn({ content: `上传的 classes.txt 为空或格式无效。`, key: 'classesProcessing', duration: 3 }); }
    } catch (e) { message.error({ content: `${t.errorReadFileGeneric} classes.txt: ${(e as Error).message}`, key: 'classesProcessing', duration: 3 }); }
    if (classesFileInputRef.current) classesFileInputRef.current.value = "";
  };

  return (
    <Layout className="mask-operate-pro-layout" hasSider>
      <Layout.Sider width={60} className="tool-sider-pro">
        <Space direction="vertical" align="center" style={{ width: '100%', paddingTop: '16px' }}>
          <Tooltip title={t.selectTool} placement="right"><Button onClick={() => setActiveTool('select')} type={activeTool === 'select' ? 'primary' : 'text'} className="tool-button-pro" icon={<FontAwesomeIcon icon={faMousePointer} size="lg" />} disabled={!hasActiveImage} /></Tooltip>
          <Tooltip title={t.rectTool} placement="right"><Button onClick={() => setActiveTool('rectangle')} type={activeTool === 'rectangle' ? 'primary' : 'text'} className="tool-button-pro" icon={<FontAwesomeIcon icon={faPaintBrush} size="lg" />} disabled={!hasActiveImage} /></Tooltip>
          <Tooltip title={t.diagonalTool} placement="right"><Button onClick={() => setActiveTool('diagonal')} type={activeTool === 'diagonal' ? 'primary' : 'text'} className="tool-button-pro" icon={<FontAwesomeIcon icon={faDrawPolygon} size="lg" />} disabled={!hasActiveImage} /></Tooltip>
          <Tooltip title={t.deleteTool} placement="right"><Button onClick={() => setActiveTool('delete')} type={activeTool === 'delete' ? 'primary' : 'text'} className="tool-button-pro" icon={<FontAwesomeIcon icon={faTrash} size="lg" />} danger={activeTool === 'delete'} disabled={!hasActiveImage} /></Tooltip>
        </Space>
      </Layout.Sider>

      <Layout className="main-content-layout-pro">
        <Layout.Header className="top-toolbar-pro">
          <Space wrap size="small">
            <Button type="primary" icon={<FontAwesomeIcon icon={faUpload} />} onClick={() => folderUploadInputRef.current?.click()}> {t.uploadFolder} </Button>
            <input ref={folderUploadInputRef} type="file" {...{webkitdirectory:"true", directory:"true"}} multiple onChange={(e) => e.target.files && processUploadedFiles(Array.from(e.target.files))} style={{ display: 'none' }}/>
          </Space>
          <Space wrap size="small">
            <Button icon={<FontAwesomeIcon icon={faChevronLeft} />} onClick={() => navigateImage(-1)} disabled={!hasActiveImage || currentImageIndex === 0} />
            <Text className="image-info-text-pro" title={currentImageInfo?.name}>{currentImageInfo ? `${t.currentImage} ${currentImageInfo.name} (${currentImageIndex + 1}/${images.length})` : t.noImages}</Text>
            <Button icon={<FontAwesomeIcon icon={faChevronRight} />} onClick={() => navigateImage(1)} disabled={!hasActiveImage || currentImageIndex >= images.length - 1} />
          </Space>
          <Space wrap size="small">
            <Tooltip title="撤销 (Ctrl+Z)"><Button icon={<FontAwesomeIcon icon={faUndo} />} onClick={performUndo} disabled={undoStack.length === 0} /></Tooltip>
            <Tooltip title="重做 (Ctrl+Y)"><Button icon={<FontAwesomeIcon icon={faRedo} />} onClick={performRedo} disabled={redoStack.length === 0} /></Tooltip>
            <Button type="primary" icon={<FontAwesomeIcon icon={faFileArchive} />} onClick={exportAllDataAsZip} disabled={images.length === 0}>{t.exportAll}</Button>
          </Space>
        </Layout.Header>

        <Layout.Content className="canvas-content-pro">
          <div className="canvas-wrapper-pro">
            <canvas ref={canvasRef}
                    onMouseDown={handleCanvasMouseDown} onMouseMove={handleCanvasMouseMove} onMouseUp={handleCanvasMouseUp} onClick={handleCanvasClick}
                    className={`drawing-canvas-pro ${activeTool === 'delete' ? 'delete-cursor-pro' : (activeTool !== 'select' && hasActiveImage ? 'draw-cursor-pro' : '')}`}
            />
          </div>
        </Layout.Content>
      </Layout>

      <div className="resizer" onMouseDown={handleMouseDownOnResize} style={{ display: isInspectorVisible ? 'block' : 'none' }} />

      <Layout.Sider width={inspectorWidth} collapsedWidth={0} collapsible trigger={null} collapsed={!isInspectorVisible} className="inspector-sider-pro" theme="light">
        <Tabs defaultActiveKey="1" className="inspector-tabs-pro" tabBarExtraContent={
          <Tooltip title={isInspectorVisible ? "隐藏检查器" : "显示检查器"}>
            <Button type="text" icon={<FontAwesomeIcon icon={isInspectorVisible ? faChevronRight : faChevronLeft} />} onClick={() => setIsInspectorVisible(!isInspectorVisible)} />
          </Tooltip>
        }>
          <TabPane tab={<><FontAwesomeIcon icon={faList} /> <span className="tab-text">{t.annotations}</span> {currentCanvasAnnotations.length > 0 ? `(${currentCanvasAnnotations.length})` : ''}</>} key="1">
            <div className="tab-pane-content">
              {hasActiveImage && currentCanvasAnnotations && currentCanvasAnnotations.length > 0 ? (
                <Collapse activeKey={annotationListExpandedKeys} onChange={(keys) => setAnnotationListExpandedKeys(keys as string[])} accordion className="annotations-collapse-pro">
                  {currentCanvasAnnotations.map((item, index) => (
                    <Panel key={item.id} className="annotation-panel-item-pro"
                           header={ <Space align="center" style={{width: '100%', justifyContent: 'space-between'}}> <Space style={{minWidth: 0}}> <div className="color-indicator-pro" style={{ backgroundColor: item.color }} /> <Text className="category-name-text-pro" title={item.category} ellipsis style={{ color: item.color.replace(/[^,]+(?=\))/, '1') }}>{item.category}</Text> </Space> <Tooltip title={t.deleteAnnotationTooltip}> <Button size="small" type="text" danger icon={<FontAwesomeIcon icon={faTrash}/>} onClick={(e) => { e.stopPropagation(); removeAnnotationFromCurrentImageByIndex(index); }} disabled={selectedAnnotationSource === 'txt'} /> </Tooltip> </Space> }>
                      <div className="annotation-details-pro">
                        <Text strong>{t.originalFileNameLabel}:</Text> <Text code title={currentImageInfo?.name}>{currentImageInfo?.name}</Text><br/>
                        {('points' in item) ? ( <> <Text strong>{t.diagonalArea}</Text><br/> <Text>P1: ({item.points[0].x.toFixed(1)}, {item.points[0].y.toFixed(1)}), P2: ({item.points[1].x.toFixed(1)}, {item.points[1].y.toFixed(1)})</Text><br/> <Text>{t.thicknessLabel}: {item.thickness}px</Text> </> ) : ( <> <Text strong>{t.positionAndSize}</Text><br/> <Text>X: {item.x}, Y: {item.y}</Text><br/> <Text>W: {item.width}, H: {item.height}</Text> </> )}
                        {!('points' in item) && currentImageInfo && currentImageInfo.width > 0 && currentImageInfo.height > 0 && ( <> <br/><Text strong>{t.yoloFormatLabel}:</Text><br/> <Text code style={{wordBreak: 'break-all'}}>{viewAnnotationToYoloString(item as ViewBoxAnnotation, currentImageInfo.width, currentImageInfo.height, categories) || "N/A"}</Text> </> )}
                      </div>
                    </Panel>
                  ))}
                </Collapse>
              ) : ( <div style={{ padding: '20px', textAlign: 'center' }}> <Text type="secondary">{hasActiveImage ? t.noAnnotations : t.noImages}</Text> </div> )}
            </div>
          </TabPane>
          <TabPane tab={<><FontAwesomeIcon icon={faCog} /> <span className="tab-text">{t.settings}</span></>} key="2">
            <div className="tab-pane-content">
              <Form layout="vertical">
                <Form.Item label={t.classesFileSettings}><Button icon={<FontAwesomeIcon icon={faUpload} />} onClick={() => classesFileInputRef.current?.click()} block>{t.uploadClassesFile}</Button><input ref={classesFileInputRef} type="file" accept=".txt" onChange={handleManualClassesUpload} style={{ display: 'none' }} /></Form.Item>
                <Form.Item label={t.category}><Select value={currentCategory} onChange={setCurrentCategory} disabled={!hasActiveImage || categories.length === 0} placeholder={categories.length === 0 ? t.noCategoriesFound : "选择类别"} showSearch optionFilterProp="children" filterOption={(input, option) => (option?.children as unknown as string ?? '').toLowerCase().includes(input.toLowerCase())}>{categories.map(cat => <Option key={cat} value={cat} title={cat} style={{color: categoryColors[cat]?.replace(/[^,]+(?=\))/, '1') || 'black'}}>{cat}</Option>)}</Select></Form.Item>
                <Form.Item label={t.lineWidth}><InputNumber min={1} max={50} value={currentLineWidth} onChange={(val) => setCurrentLineWidth(val || 1)} style={{ width: '100%' }} disabled={!hasActiveImage} /></Form.Item>
                <Form.Item label={t.annotationDisplaySource}><Radio.Group onChange={(e) => setSelectedAnnotationSource(e.target.value)} value={selectedAnnotationSource} disabled={!hasActiveImage} optionType="button" buttonStyle="solid" style={{width: '100%'}}><Radio.Button style={{width: '33.33%', textAlign:'center'}} value="json">{t.sourceJson}</Radio.Button><Radio.Button style={{width: '33.33%', textAlign:'center'}} value="txt">{t.sourceTxt}</Radio.Button><Radio.Button style={{width: '33.33%', textAlign:'center'}} value="none">{t.sourceNone}</Radio.Button></Radio.Group></Form.Item>
                <Form.Item label={t.toggleAnnotationsView} valuePropName="checked"><AntSwitch checked={showAnnotationsOnCanvas} onChange={setShowAnnotationsOnCanvas} disabled={!hasActiveImage} checkedChildren={<FontAwesomeIcon icon={faEye} />} unCheckedChildren={<FontAwesomeIcon icon={faEyeSlash} />}/></Form.Item>
                <Form.Item label={t.toggleCategoryInBox} valuePropName="checked"><AntSwitch checked={showCategoryInBox} onChange={setShowCategoryInBox} disabled={!hasActiveImage} checkedChildren={<FontAwesomeIcon icon={faEye} />} unCheckedChildren={<FontAwesomeIcon icon={faEyeSlash} />}/></Form.Item>
                <Form.Item><Button danger icon={<FontAwesomeIcon icon={faEraser} />} onClick={handleClearCurrentJsonAnnotations} block disabled={!currentImageInfo || !allImageAnnotations[currentImageInfo.name]?.jsonAnnotations?.length}>{t.clearAnnotationsButton}</Button></Form.Item>
              </Form>
            </div>
          </TabPane>
        </Tabs>
      </Layout.Sider>
    </Layout>
  );
};

export default MaskOperatePro;

--- END: src/pages/MaskOperate/index.tsx ---

--- START: src/pages/User/Login/index.tsx ---
import Footer from '@/components/Footer';
import { userLoginUsingPost } from '@/services/backend/userController';
import { LockOutlined, UserOutlined } from '@ant-design/icons';
import { LoginForm, ProFormText } from '@ant-design/pro-components';
import { useEmotionCss } from '@ant-design/use-emotion-css';
import { Helmet, history, useModel } from '@umijs/max';
import { message, Tabs, Button } from 'antd';
import React, { useState, useEffect } from 'react';
import { Link } from 'umi';
import Settings from '../../../../config/defaultSettings';

// 定义翻译内容
const translations = {
  zh: {
    login: '登录',
    loginSuccess: '登录成功！',
    loginFailed: '登录失败，',
    accountPasswordLogin: '账户密码登录',
    userAccountPlaceholder: '请输入账号',
    userAccountRequired: '账号是必填项！',
    passwordPlaceholder: '请输入密码',
    passwordRequired: '密码是必填项！',
    register: '新用户注册',
    subtitle: '欢迎来到东方理工数字孪生研究院'
  },
  en: {
    login: 'Login',
    loginSuccess: 'Login successful!',
    loginFailed: 'Login failed, ',
    accountPasswordLogin: 'Account Password Login',
    userAccountPlaceholder: 'Please enter your account',
    userAccountRequired: 'Account is required!',
    passwordPlaceholder: 'Please enter your password',
    passwordRequired: 'Password is required!',
    register: 'New User Registration',
    subtitle: 'Welcome to NINGBO INSTITUTE OF DIGITAL TWIN'
  }
};

const Login: React.FC = () => {
  const [type, setType] = useState<string>('account');
  const { initialState, setInitialState } = useModel('@@initialState');
  const [currentLang, setCurrentLang] = useState(initialState?.language || 'zh');
  const t = translations[currentLang as keyof typeof translations];

  // Update language when global language changes
  useEffect(() => {
    const handleLanguageChange = (event: Event) => {
      const customEvent = event as CustomEvent;
      setCurrentLang(customEvent.detail.language);
    };

    window.addEventListener('languageChange', handleLanguageChange);
    setCurrentLang(initialState?.language || 'zh');

    return () => {
      window.removeEventListener('languageChange', handleLanguageChange);
    };
  }, [initialState?.language]);

  const containerClassName = useEmotionCss(() => {
    return {
      display: 'flex',
      flexDirection: 'column',
      height: '100vh',
      overflow: 'auto',
      backgroundImage:
        "url('https://mdn.alipayobjects.com/yuyan_qk0oxh/afts/img/V-_oS6r-i7wAAAAAAAAAAAAAFl94AQBr')",
      backgroundSize: '100% 100%',
    };
  });

  const handleSubmit = async (values: API.UserLoginRequest) => {
    try {
      // 登录
      const res = await userLoginUsingPost({
        ...values,
      });

      const defaultLoginSuccessMessage = t.loginSuccess;
      message.success(defaultLoginSuccessMessage);
      // 保存已登录用户信息
      setInitialState({
        ...initialState,
        currentUser: res.data,
      });
      const urlParams = new URL(window.location.href).searchParams;
      history.push(urlParams.get('redirect') || '/');
      return;
    } catch (error: any) {
      const defaultLoginFailureMessage = `${t.loginFailed}${error.message}`;
      message.error(defaultLoginFailureMessage);
    }
  };

  // Language toggle function
  const toggleLanguage = () => {
    const newLang = currentLang === 'zh' ? 'en' : 'zh';
    setCurrentLang(newLang);
    // Dispatch event to notify other parts of the app
    window.dispatchEvent(new CustomEvent('languageChange', { detail: { language: newLang } }));
  };

  return (
    <div className={containerClassName}>
      <Helmet>
        <title>
          {t.login} - {Settings.title}
        </title>
      </Helmet>

      {/* Language Toggle Button */}
      <Button
        style={{
          position: 'absolute',
          top: 20,
          right: 20,
          fontSize: '16px',
          zIndex: 10,
          padding: '8px 16px',  // Make the button a bit larger
        }}
        onClick={toggleLanguage}
      >
        {currentLang === 'zh' ? 'EN' : '中文'}
      </Button>

      <div
        style={{
          flex: '1',
          padding: '32px 0',
        }}
      >
        <LoginForm
          contentStyle={{
            minWidth: 280,
            maxWidth: '75vw',
          }}
          logo={<img alt="logo" style={{ height: '100%' }} src="/logo.svg" />}
          title="AMSNet"
          subTitle={t.subtitle}
          initialValues={{
            autoLogin: true,
          }}
          onFinish={async (values) => {
            await handleSubmit(values as API.UserLoginRequest);
          }}
        >
          <Tabs
            activeKey={type}
            onChange={setType}
            centered
            items={[
              {
                key: 'account',
                label: t.accountPasswordLogin,
              },
            ]}
          />
          {type === 'account' && (
            <>
              <ProFormText
                name="userAccount"
                fieldProps={{
                  size: 'large',
                  prefix: <UserOutlined />,
                }}
                placeholder={t.userAccountPlaceholder}
                rules={[
                  {
                    required: true,
                    message: t.userAccountRequired,
                  },
                ]}
              />
              <ProFormText.Password
                name="userPassword"
                fieldProps={{
                  size: 'large',
                  prefix: <LockOutlined />,
                }}
                placeholder={t.passwordPlaceholder}
                rules={[
                  {
                    required: true,
                    message: t.passwordRequired,
                  },
                ]}
              />
            </>
          )}

          <div
            style={{
              marginBottom: 24,
              textAlign: 'right',
            }}
          >
            <Link to="/user/register">{t.register}</Link>
          </div>
        </LoginForm>
      </div>
      <Footer />
    </div>
  );
};

export default Login;

--- END: src/pages/User/Login/index.tsx ---

--- START: src/pages/User/Register/index.tsx ---
import Footer from '@/components/Footer';
import { userRegisterUsingPost } from '@/services/backend/userController';
import { LockOutlined, UserOutlined } from '@ant-design/icons';
import { LoginForm, ProFormText } from '@ant-design/pro-components';
import { useEmotionCss } from '@ant-design/use-emotion-css';
import { Helmet, history, useModel } from '@umijs/max';
import { message, Tabs, Button } from 'antd';
import React, { useState, useEffect } from 'react';
import { Link } from 'umi';
import Settings from '../../../../config/defaultSettings';

// 定义翻译内容
const translations = {
  zh: {
    register: '注册',
    registerSuccess: '注册成功！',
    registerFailure: '注册失败，',
    fishFactoryRecruitment: 'AMSNet标注平台注册页面',
    efficientRecruitment: '高效标注',
    registerButton: '注册',
    newUserRegister: '新用户注册',
    accountPlaceholder: '请输入账号',
    accountRequired: '账号是必填项！',
    passwordPlaceholder: '请输入密码',
    passwordRequired: '密码是必填项！',
    confirmPasswordPlaceholder: '请再次确认密码',
    confirmPasswordRequired: '确认密码是必填项！',
    passwordMismatch: '二次输入的密码不一致',
    existingUserLogin: '老用户登录'
  },
  en: {
    register: 'Register',
    registerSuccess: 'Registration successful!',
    registerFailure: 'Registration failed, ',
    fishFactoryRecruitment: 'AMSNet Label Platform Registration Page',
    efficientRecruitment: 'Efficient Label',
    registerButton: 'Register',
    newUserRegister: 'New User Registration',
    accountPlaceholder: 'Please enter account',
    accountRequired: 'Account is required!',
    passwordPlaceholder: 'Please enter password',
    passwordRequired: 'Password is required!',
    confirmPasswordPlaceholder: 'Please confirm password',
    confirmPasswordRequired: 'Confirm password is required!',
    passwordMismatch: 'Passwords do not match',
    existingUserLogin: 'Existing user login'
  }
};

/**
 * 用户注册页面
 * @constructor
 */
const UserRegisterPage: React.FC = () => {
  const [type, setType] = useState<string>('account');
  const { initialState } = useModel('@@initialState');
  const [currentLang, setCurrentLang] = useState(initialState?.language || 'zh');
  const t = translations[currentLang as keyof typeof translations];

  // Update language when global language changes
  useEffect(() => {
    const handleLanguageChange = (event: Event) => {
      const customEvent = event as CustomEvent;
      setCurrentLang(customEvent.detail.language);
    };

    window.addEventListener('languageChange', handleLanguageChange);
    setCurrentLang(initialState?.language || 'zh');
    return () => {
      window.removeEventListener('languageChange', handleLanguageChange);
    };
  }, [initialState?.language]);

  const containerClassName = useEmotionCss(() => {
    return {
      display: 'flex',
      flexDirection: 'column',
      height: '100vh',
      overflow: 'auto',
      backgroundImage:
        "url('https://mdn.alipayobjects.com/yuyan_qk0oxh/afts/img/V-_oS6r-i7wAAAAAAAAAAAAAFl94AQBr')",
      backgroundSize: '100% 100%',
    };
  });

  /**
   * 提交注册
   * @param values
   */
  const handleSubmit = async (values: API.UserRegisterRequest) => {
    const { userPassword, checkPassword } = values;
    if (userPassword !== checkPassword) {
      message.error(t.passwordMismatch);
      return;
    }

    try {
      await userRegisterUsingPost({ ...values });
      message.success(t.registerSuccess);
      history.push('/user/login');
    } catch (error: any) {
      message.error(`${t.registerFailure}${error.message}`);
    }
  };

  const toggleLanguage = () => {
    setCurrentLang(currentLang === 'zh' ? 'en' : 'zh');
    // Dispatch custom event to notify other parts of the app
    window.dispatchEvent(new CustomEvent('languageChange', { detail: { language: currentLang === 'zh' ? 'en' : 'zh' } }));
  };

  return (
    <div className={containerClassName}>
      <Helmet>
        <title>{t.register} - {Settings.title}</title>
      </Helmet>

      {/* Language Toggle Button */}
      <Button
        style={{
          position: 'absolute',
          top: 20,
          right: 20,
          fontSize: '16px',
          zIndex: 10,
        }}
        onClick={toggleLanguage}
      >
        {currentLang === 'zh' ? 'EN' : '中文'}
      </Button>

      <div style={{ flex: '1', padding: '32px 0' }}>
        <LoginForm
          contentStyle={{
            minWidth: 280,
            maxWidth: '75vw',
          }}
          logo={<img alt="logo" style={{ height: '100%' }} src="/logo.svg" />}
          title={t.fishFactoryRecruitment}
          subTitle={t.efficientRecruitment}
          initialValues={{
            autoLogin: true,
          }}
          submitter={{
            searchConfig: {
              submitText: t.registerButton,
            },
          }}
          onFinish={async (values) => {
            await handleSubmit(values as API.UserLoginRequest);
          }}
        >
          <Tabs
            activeKey={type}
            onChange={setType}
            centered
            items={[
              {
                key: 'account',
                label: t.newUserRegister,
              },
            ]}
          />
          {type === 'account' && (
            <>
              <ProFormText
                name="userAccount"
                fieldProps={{
                  size: 'large',
                  prefix: <UserOutlined />,
                }}
                placeholder={t.accountPlaceholder}
                rules={[
                  {
                    required: true,
                    message: t.accountRequired,
                  },
                ]}
              />
              <ProFormText.Password
                name="userPassword"
                fieldProps={{
                  size: 'large',
                  prefix: <LockOutlined />,
                }}
                placeholder={t.passwordPlaceholder}
                rules={[
                  {
                    required: true,
                    message: t.passwordRequired,
                  },
                ]}
              />
              <ProFormText.Password
                name="checkPassword"
                fieldProps={{
                  size: 'large',
                  prefix: <LockOutlined />,
                }}
                placeholder={t.confirmPasswordPlaceholder}
                rules={[
                  {
                    required: true,
                    message: t.confirmPasswordRequired,
                  },
                ]}
              />
            </>
          )}

          <div
            style={{
              marginBottom: 24,
              textAlign: 'right',
            }}
          >
            <Link to="/user/login">{t.existingUserLogin}</Link>
          </div>
        </LoginForm>
      </div>
      <Footer />
    </div>
  );
};

export default UserRegisterPage;

--- END: src/pages/User/Register/index.tsx ---

--- START: src/pages/welcome(unuse)/Welcome.css ---
/* Welcome.css */

/* 全局渐隐动画 */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* 动态背景渐变动画 */
@keyframes gradientAnimation {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

/* 文本闪烁（剪裁渐变） */
@keyframes shimmer {
  0% { background-position: -200% 0; }
  100% { background-position: 200% 0; }
}

/* 欢迎卡片整体样式，带动态背景 */
.welcome-card {
  border-radius: 16px;
  animation: fadeIn 1s ease-out;
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  border: none;
  position: relative;
  z-index: 1;
}

/* 花哨的背景渐变 */
.flashy-background {
  background: linear-gradient(45deg, #ff6b6b, #f7d794, #6a89cc, #82ccdd);
  background-size: 400% 400%;
  animation: gradientAnimation 10s ease infinite;
}

/* 主内容区域 */
.welcome-content {
  display: flex;
  flex-direction: column;
  gap: 24px;
}

/* 欢迎标题带渐变文字效果 */
.welcome-title {
  font-size: 32px;
  font-weight: bold;
  margin: 0;
  background: linear-gradient(90deg, #ff6b6b, #f7d794, #6a89cc, #82ccdd);
  background-size: 200% 200%;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: shimmer 2s linear infinite;
}

/* 欢迎描述 */
.welcome-desc {
  font-size: 16px;
  line-height: 1.6;
  margin: 0;
  white-space: pre-wrap;
  animation: fadeIn 1.2s ease-out;
}

/* 卡片组容器 */
.cards-container {
  display: flex;
  flex-wrap: wrap;
  gap: 24px;
  animation: fadeIn 1.4s ease-out;
}

/* 信息卡片基础样式 */
.info-card {
  background-color: #fff;
  border-radius: 12px;
  padding: 20px;
  flex: 1;
  min-width: 260px;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  position: relative;
  overflow: hidden;
  z-index: 1;
}

/* 花哨卡片：伪元素实现动态边框 */
.flashy-card::before {
  content: '';
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  background: linear-gradient(45deg, #ff6b6b, #f7d794, #6a89cc, #82ccdd);
  background-size: 400% 400%;
  z-index: -1;
  border-radius: inherit;
  animation: gradientAnimation 5s ease infinite;
}

/* 卡片悬停时放大并加深阴影 */
.info-card:hover {
  transform: scale(1.03);
  box-shadow: 0 12px 28px rgba(0, 0, 0, 0.25);
}

/* 卡片头部：编号和标题 */
.card-header {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 16px;
}

/* 编号框 */
.index-box {
  width: 48px;
  height: 48px;
  background-color: #1890ff;
  border-radius: 8px;
  display: flex;
  justify-content: center;
  align-items: center;
  color: #fff;
  font-weight: bold;
  font-size: 18px;
  flex-shrink: 0;
  transition: background-color 0.3s ease;
}

/* 编号框悬停颜色变化 */
.info-card:hover .index-box {
  background-color: #147ad6;
}

/* 卡片标题 */
.title {
  font-size: 20px;
  font-weight: 600;
}

/* 卡片描述 */
.desc {
  font-size: 14px;
  color: #666;
  margin-bottom: 16px;
}

/* “了解更多”链接样式 */
.learn-more {
  font-size: 14px;
  color: #1890ff;
  text-decoration: none;
  position: relative;
  transition: color 0.3s ease;
}

/* 动态箭头效果 */
.arrow {
  display: inline-block;
  transition: transform 0.3s ease;
}

/* 链接悬停效果 */
.learn-more:hover {
  color: #147ad6;
}

.learn-more:hover .arrow {
  transform: translateX(5px);
}

/* 响应式设计：移动端布局 */
@media (max-width: 768px) {
  .cards-container {
    flex-direction: column;
  }
  .info-card {
    min-width: 100%;
  }
}

--- END: src/pages/welcome(unuse)/Welcome.css ---

--- START: src/pages/welcome(unuse)/Welcome.tsx ---
import React, { useState, useEffect } from 'react';
import { PageContainer } from '@ant-design/pro-components';
import { Card, theme } from 'antd';
import { useModel } from '@umijs/max';
import './Welcome.css'; // 引入美化后的 CSS

// 翻译内容
const translations = {
  zh: {
    welcomeTitle: '欢迎使用AMSNet',
    welcomeDesc:
      'AMSNet是宁波东方理工研究院在电路研究领域的重要成果，是用于模拟/混合信号（AMS）电路的网表数据集。它通过自动技术将电路图转换为网表，为电路设计提供关键数据支持，以解决多模态大语言模型（MLLM）在自动生成AMS电路时缺乏全面数据集的问题。\n\n数据集包含晶体管级电路图和SPICE格式网表，其规模和电路复杂性正在快速扩展，还计划纳入晶体管尺寸和性能规格等信息。同时也在探索功能宏识别（如检测LDO、ADC、DAC、PLL等）来丰富功能，提高电路设计效率。',
    learnMore: '了解更多',
    card1Title: '了解AMSNet数据集',
    card1Desc: '包含晶体管级电路图和SPICE网表，为电路设计提供数据支持。',
    card2Title: 'AMSNet的功能扩展',
    card2Desc: '正在快速扩展规模和复杂性，计划纳入晶体管尺寸和性能规格，探索功能宏识别。',
    card3Title: 'AMSNet在电路设计中的应用',
    card3Desc: '促进MLLM在AMS电路设计中的应用探索，为电路设计提供高效支持。'
  },
  en: {
    welcomeTitle: 'Welcome to AMSNet',
    welcomeDesc:
      'AMSNet is an important achievement of Ningbo Oriental Institute of Technology in the field of circuit research, a netlist dataset for analog/mixed signal (AMS) circuits. It converts circuit diagrams into netlists through automated technology, providing key data support for circuit design, to address the lack of comprehensive datasets when multimodal large language models (MLLM) automatically generate AMS circuits.\n\nThe dataset contains transistor-level circuit diagrams and SPICE format netlists, with scale and circuit complexity rapidly expanding. There are plans to incorporate transistor dimensions and performance specifications. Meanwhile, functional macro recognition (such as detecting LDO, ADC, DAC, PLL, etc.) is being explored to enrich functionality and improve circuit design efficiency.',
    learnMore: 'Learn More',
    card1Title: 'About AMSNet Dataset',
    card1Desc: 'Contains transistor-level circuit diagrams and SPICE netlists, providing data support for circuit design.',
    card2Title: 'AMSNet Feature Extensions',
    card2Desc: 'Rapidly expanding in scale and complexity, planning to incorporate transistor dimensions and performance specifications, exploring functional macro recognition.',
    card3Title: 'AMSNet Applications in Circuit Design',
    card3Desc: 'Promotes the application exploration of MLLM in AMS circuit design, providing efficient support for circuit design.'
  }
};

interface InfoCardProps {
  title: string;
  index: number;
  desc: string;
  href: string;
  learnMoreText: string;
}

/**
 * 带花哨动画效果的信息卡片组件
 */
const InfoCard: React.FC<InfoCardProps> = ({ title, href, index, desc, learnMoreText }) => {
  const { token } = theme.useToken();
  return (
    <div className="info-card flashy-card">
      <div className="card-header">
        <div className="index-box flashy-index">{index}</div>
        <div className="title" style={{ color: token.colorText }}>{title}</div>
      </div>
      <div className="desc">{desc}</div>
      <a href={href} target="_blank" rel="noreferrer" className="learn-more">
        {learnMoreText} <span className="arrow">&rarr;</span>
      </a>
    </div>
  );
};

const Welcome: React.FC = () => {
  const { token } = theme.useToken();
  const { initialState } = useModel('@@initialState');
  const [currentLang, setCurrentLang] = useState(initialState?.language || 'zh');
  const t = translations[currentLang as keyof typeof translations];

  // 监听全局语言切换
  useEffect(() => {
    const handleLanguageChange = (event: Event) => {
      const customEvent = event as CustomEvent;
      setCurrentLang(customEvent.detail.language);
    };

    window.addEventListener('languageChange', handleLanguageChange);
    setCurrentLang(initialState?.language || 'zh');

    return () => {
      window.removeEventListener('languageChange', handleLanguageChange);
    };
  }, [initialState?.language]);

  return (
    <PageContainer>
      <Card
        className="welcome-card flashy-background"
        bodyStyle={{ padding: '40px' }}
      >
        <div className="welcome-content">
          <h1 className="welcome-title flashy-text" style={{ color: token.colorTextHeading }}>
            {t.welcomeTitle}
          </h1>
          <p className="welcome-desc" style={{ color: token.colorTextSecondary }}>
            {t.welcomeDesc}
          </p>
          <div className="cards-container">
            <InfoCard
              index={1}
              href="https://ams-net.github.io/"
              title={t.card1Title}
              desc={t.card1Desc}
              learnMoreText={t.learnMore}
            />
            <InfoCard
              index={2}
              href="https://your-link-2.com"
              title={t.card2Title}
              desc={t.card2Desc}
              learnMoreText={t.learnMore}
            />
            <InfoCard
              index={3}
              href="https://your-link-3.com"
              title={t.card3Title}
              desc={t.card3Desc}
              learnMoreText={t.learnMore}
            />
          </div>
        </div>
      </Card>
    </PageContainer>
  );
};

export default Welcome;

--- END: src/pages/welcome(unuse)/Welcome.tsx ---

--- START: src/services/backend/fileController.ts ---
// @ts-ignore
/* eslint-disable */
import { request } from '@umijs/max';

/** save POST /api/file/save */
export async function saveUsingPost(body: API.SaveFileRequest, options?: { [key: string]: any }) {
  return request<API.BaseResponseString_>('/api/file/save', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** uploadFile POST /api/file/upload */
export async function uploadFileUsingPost(
  // 叠加生成的Param类型 (非body参数swagger默认没有生成对象)
  params: API.uploadFileUsingPOSTParams,
  body: {},
  file?: File,
  options?: { [key: string]: any },
) {
  const formData = new FormData();

  if (file) {
    formData.append('file', file);
  }

  Object.keys(body).forEach((ele) => {
    const item = (body as any)[ele];

    if (item !== undefined && item !== null) {
      if (typeof item === 'object' && !(item instanceof File)) {
        if (item instanceof Array) {
          item.forEach((f) => formData.append(ele, f || ''));
        } else {
          formData.append(ele, JSON.stringify(item));
        }
      } else {
        formData.append(ele, item);
      }
    }
  });

  return request<API.BaseResponseString_>('/api/file/upload', {
    method: 'POST',
    params: {
      ...params,
    },
    data: formData,
    requestType: 'form',
    ...(options || {}),
  });
}

--- END: src/services/backend/fileController.ts ---

--- START: src/services/backend/graphController.ts ---
// @ts-ignore
/* eslint-disable */
import { request } from '@umijs/max';

/** createNode POST /api/graph/createNode */
export async function createNodeUsingPost(
  body: API.NodeCreateRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseString_>('/api/graph/createNode', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** createRelationship POST /api/graph/createRelationship */
export async function createRelationshipUsingPost(
  body: API.RelationshipCreateRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseString_>('/api/graph/createRelationship', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** deleteNode DELETE /api/graph/deleteNode */
export async function deleteNodeUsingDelete(
  body: API.NodeDeleteRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseString_>('/api/graph/deleteNode', {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** deleteRelationship DELETE /api/graph/deleteRelationship */
export async function deleteRelationshipUsingDelete(
  body: API.RelationshipDeleteRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseString_>('/api/graph/deleteRelationship', {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** findNode POST /api/graph/findNode */
export async function findNodeUsingPost(
  body: API.NodeQueryRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseNodeVO_>('/api/graph/findNode', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** findRelationship POST /api/graph/findRelationship */
export async function findRelationshipUsingPost(
  body: API.RelationshipQueryRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseRelationshipVO_>('/api/graph/findRelationship', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** getAllNodes POST /api/graph/getAllNodes */
export async function getAllNodesUsingPost(
  body: API.NodeGetAllRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseListNodeVO_>('/api/graph/getAllNodes', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** getAllRelationships POST /api/graph/getAllRelationships */
export async function getAllRelationshipsUsingPost(
  body: API.RelationshipGetAllRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseListRelationshipVO_>('/api/graph/getAllRelationships', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** updateNode PUT /api/graph/updateNode */
export async function updateNodeUsingPut(
  body: API.NodeUpdateRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseString_>('/api/graph/updateNode', {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** updateRelationship PUT /api/graph/updateRelationship */
export async function updateRelationshipUsingPut(
  body: API.RelationshipUpdateRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseString_>('/api/graph/updateRelationship', {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

--- END: src/services/backend/graphController.ts ---

--- START: src/services/backend/index.ts ---
// @ts-ignore
/* eslint-disable */
// API 更新时间：
// API 唯一标识：
import * as wxMpController from './wxMpController';
import * as fileController from './fileController';
import * as graphController from './graphController';
import * as postController from './postController';
import * as postFavourController from './postFavourController';
import * as postThumbController from './postThumbController';
import * as userController from './userController';
export default {
  wxMpController,
  fileController,
  graphController,
  postController,
  postFavourController,
  postThumbController,
  userController,
};

--- END: src/services/backend/index.ts ---

--- START: src/services/backend/postController.ts ---
// @ts-ignore
/* eslint-disable */
import { request } from '@umijs/max';

/** addPost POST /api/post/add */
export async function addPostUsingPost(body: API.PostAddRequest, options?: { [key: string]: any }) {
  return request<API.BaseResponseLong_>('/api/post/add', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** deletePost POST /api/post/delete */
export async function deletePostUsingPost(
  body: API.DeleteRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseBoolean_>('/api/post/delete', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** editPost POST /api/post/edit */
export async function editPostUsingPost(
  body: API.PostEditRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseBoolean_>('/api/post/edit', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** getPostVOById GET /api/post/get/vo */
export async function getPostVoByIdUsingGet(
  // 叠加生成的Param类型 (非body参数swagger默认没有生成对象)
  params: API.getPostVOByIdUsingGETParams,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponsePostVO_>('/api/post/get/vo', {
    method: 'GET',
    params: {
      ...params,
    },
    ...(options || {}),
  });
}

/** listPostByPage POST /api/post/list/page */
export async function listPostByPageUsingPost(
  body: API.PostQueryRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponsePagePost_>('/api/post/list/page', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** listPostVOByPage POST /api/post/list/page/vo */
export async function listPostVoByPageUsingPost(
  body: API.PostQueryRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponsePagePostVO_>('/api/post/list/page/vo', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** listMyPostVOByPage POST /api/post/my/list/page/vo */
export async function listMyPostVoByPageUsingPost(
  body: API.PostQueryRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponsePagePostVO_>('/api/post/my/list/page/vo', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** searchPostVOByPage POST /api/post/search/page/vo */
export async function searchPostVoByPageUsingPost(
  body: API.PostQueryRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponsePagePostVO_>('/api/post/search/page/vo', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** updatePost POST /api/post/update */
export async function updatePostUsingPost(
  body: API.PostUpdateRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseBoolean_>('/api/post/update', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

--- END: src/services/backend/postController.ts ---

--- START: src/services/backend/postFavourController.ts ---
// @ts-ignore
/* eslint-disable */
import { request } from '@umijs/max';

/** doPostFavour POST /api/post_favour/ */
export async function doPostFavourUsingPost(
  body: API.PostFavourAddRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseInt_>('/api/post_favour/', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** listFavourPostByPage POST /api/post_favour/list/page */
export async function listFavourPostByPageUsingPost(
  body: API.PostFavourQueryRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponsePagePostVO_>('/api/post_favour/list/page', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** listMyFavourPostByPage POST /api/post_favour/my/list/page */
export async function listMyFavourPostByPageUsingPost(
  body: API.PostQueryRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponsePagePostVO_>('/api/post_favour/my/list/page', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

--- END: src/services/backend/postFavourController.ts ---

--- START: src/services/backend/postThumbController.ts ---
// @ts-ignore
/* eslint-disable */
import { request } from '@umijs/max';

/** doThumb POST /api/post_thumb/ */
export async function doThumbUsingPost(
  body: API.PostThumbAddRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseInt_>('/api/post_thumb/', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

--- END: src/services/backend/postThumbController.ts ---

--- START: src/services/backend/typings.d.ts ---
declare namespace API {
  type BaseResponseBoolean_ = {
    code?: number;
    data?: boolean;
    message?: string;
  };

  type BaseResponseInt_ = {
    code?: number;
    data?: number;
    message?: string;
  };

  type BaseResponseListNodeVO_ = {
    code?: number;
    data?: NodeVO[];
    message?: string;
  };

  type BaseResponseListRelationshipVO_ = {
    code?: number;
    data?: RelationshipVO[];
    message?: string;
  };

  type BaseResponseLoginUserVO_ = {
    code?: number;
    data?: LoginUserVO;
    message?: string;
  };

  type BaseResponseLong_ = {
    code?: number;
    data?: number;
    message?: string;
  };

  type BaseResponseNodeVO_ = {
    code?: number;
    data?: NodeVO;
    message?: string;
  };

  type BaseResponsePagePost_ = {
    code?: number;
    data?: PagePost_;
    message?: string;
  };

  type BaseResponsePagePostVO_ = {
    code?: number;
    data?: PagePostVO_;
    message?: string;
  };

  type BaseResponsePageUser_ = {
    code?: number;
    data?: PageUser_;
    message?: string;
  };

  type BaseResponsePageUserVO_ = {
    code?: number;
    data?: PageUserVO_;
    message?: string;
  };

  type BaseResponsePostVO_ = {
    code?: number;
    data?: PostVO;
    message?: string;
  };

  type BaseResponseRelationshipVO_ = {
    code?: number;
    data?: RelationshipVO;
    message?: string;
  };

  type BaseResponseString_ = {
    code?: number;
    data?: string;
    message?: string;
  };

  type BaseResponseUser_ = {
    code?: number;
    data?: User;
    message?: string;
  };

  type BaseResponseUserVO_ = {
    code?: number;
    data?: UserVO;
    message?: string;
  };

  type checkUsingGETParams = {
    /** echostr */
    echostr?: string;
    /** nonce */
    nonce?: string;
    /** signature */
    signature?: string;
    /** timestamp */
    timestamp?: string;
  };

  type DeleteRequest = {
    id?: number;
  };

  type getPostVOByIdUsingGETParams = {
    /** id */
    id?: number;
  };

  type getUserByIdUsingGETParams = {
    /** id */
    id?: number;
  };

  type getUserVOByIdUsingGETParams = {
    /** id */
    id?: number;
  };

  type LoginUserVO = {
    createTime?: string;
    id?: number;
    updateTime?: string;
    userAvatar?: string;
    userName?: string;
    userProfile?: string;
    userRole?: string;
  };

  type NodeCreateRequest = {
    name?: string;
    properties?: Record<string, any>;
  };

  type NodeDeleteRequest = {
    name?: string;
    properties?: Record<string, any>;
  };

  type NodeGetAllRequest = {
    includeProperties?: boolean;
  };

  type NodeQueryRequest = {
    name?: string;
    properties?: Record<string, any>;
  };

  type NodeUpdateRequest = {
    name?: string;
    properties?: Record<string, any>;
  };

  type NodeVO = {
    name?: string;
    properties?: Record<string, any>;
  };

  type OrderItem = {
    asc?: boolean;
    column?: string;
  };

  type PagePost_ = {
    countId?: string;
    current?: number;
    maxLimit?: number;
    optimizeCountSql?: boolean;
    orders?: OrderItem[];
    pages?: number;
    records?: Post[];
    searchCount?: boolean;
    size?: number;
    total?: number;
  };

  type PagePostVO_ = {
    countId?: string;
    current?: number;
    maxLimit?: number;
    optimizeCountSql?: boolean;
    orders?: OrderItem[];
    pages?: number;
    records?: PostVO[];
    searchCount?: boolean;
    size?: number;
    total?: number;
  };

  type PageUser_ = {
    countId?: string;
    current?: number;
    maxLimit?: number;
    optimizeCountSql?: boolean;
    orders?: OrderItem[];
    pages?: number;
    records?: User[];
    searchCount?: boolean;
    size?: number;
    total?: number;
  };

  type PageUserVO_ = {
    countId?: string;
    current?: number;
    maxLimit?: number;
    optimizeCountSql?: boolean;
    orders?: OrderItem[];
    pages?: number;
    records?: UserVO[];
    searchCount?: boolean;
    size?: number;
    total?: number;
  };

  type Post = {
    content?: string;
    createTime?: string;
    favourNum?: number;
    id?: number;
    isDelete?: number;
    tags?: string;
    thumbNum?: number;
    title?: string;
    updateTime?: string;
    userId?: number;
  };

  type PostAddRequest = {
    content?: string;
    tags?: string[];
    title?: string;
  };

  type PostEditRequest = {
    content?: string;
    id?: number;
    tags?: string[];
    title?: string;
  };

  type PostFavourAddRequest = {
    postId?: number;
  };

  type PostFavourQueryRequest = {
    current?: number;
    pageSize?: number;
    postQueryRequest?: PostQueryRequest;
    sortField?: string;
    sortOrder?: string;
    userId?: number;
  };

  type PostQueryRequest = {
    content?: string;
    current?: number;
    favourUserId?: number;
    id?: number;
    notId?: number;
    orTags?: string[];
    pageSize?: number;
    searchText?: string;
    sortField?: string;
    sortOrder?: string;
    tags?: string[];
    title?: string;
    userId?: number;
  };

  type PostThumbAddRequest = {
    postId?: number;
  };

  type PostUpdateRequest = {
    content?: string;
    id?: number;
    tags?: string[];
    title?: string;
  };

  type PostVO = {
    content?: string;
    createTime?: string;
    favourNum?: number;
    hasFavour?: boolean;
    hasThumb?: boolean;
    id?: number;
    tagList?: string[];
    thumbNum?: number;
    title?: string;
    updateTime?: string;
    user?: UserVO;
    userId?: number;
  };

  type RelationshipCreateRequest = {
    name?: string;
    properties?: Record<string, any>;
  };

  type RelationshipDeleteRequest = {
    name?: string;
    properties?: Record<string, any>;
  };

  type RelationshipGetAllRequest = {
    includeProperties?: boolean;
  };

  type RelationshipQueryRequest = {
    name?: string;
    properties?: Record<string, any>;
  };

  type RelationshipUpdateRequest = {
    name?: string;
    properties?: Record<string, any>;
  };

  type RelationshipVO = {
    name?: string;
    properties?: Record<string, any>;
  };

  type SaveFileRequest = {
    color?: string;
    imageFile?: string;
    text?: string;
    timestamp?: number;
    userId?: number;
  };

  type uploadFileUsingPOSTParams = {
    biz?: string;
  };

  type User = {
    createTime?: string;
    id?: number;
    isDelete?: number;
    mpOpenId?: string;
    unionId?: string;
    updateTime?: string;
    userAccount?: string;
    userAvatar?: string;
    userName?: string;
    userPassword?: string;
    userProfile?: string;
    userRole?: string;
  };

  type UserAddRequest = {
    userAccount?: string;
    userAvatar?: string;
    userName?: string;
    userRole?: string;
  };

  type userLoginByWxOpenUsingGETParams = {
    /** code */
    code: string;
  };

  type UserLoginRequest = {
    userAccount?: string;
    userPassword?: string;
  };

  type UserQueryRequest = {
    current?: number;
    id?: number;
    mpOpenId?: string;
    pageSize?: number;
    sortField?: string;
    sortOrder?: string;
    unionId?: string;
    userName?: string;
    userProfile?: string;
    userRole?: string;
  };

  type UserRegisterRequest = {
    checkPassword?: string;
    userAccount?: string;
    userPassword?: string;
  };

  type UserUpdateMyRequest = {
    userAvatar?: string;
    userName?: string;
    userProfile?: string;
  };

  type UserUpdateRequest = {
    id?: number;
    userAvatar?: string;
    userName?: string;
    userProfile?: string;
    userRole?: string;
  };

  type UserVO = {
    createTime?: string;
    id?: number;
    userAvatar?: string;
    userName?: string;
    userProfile?: string;
    userRole?: string;
  };
}

--- END: src/services/backend/typings.d.ts ---

--- START: src/services/backend/userController.ts ---
// @ts-ignore
/* eslint-disable */
import { request } from '@umijs/max';

/** addUser POST /api/user/add */
export async function addUserUsingPost(body: API.UserAddRequest, options?: { [key: string]: any }) {
  return request<API.BaseResponseLong_>('/api/user/add', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** deleteUser POST /api/user/delete */
export async function deleteUserUsingPost(
  body: API.DeleteRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseBoolean_>('/api/user/delete', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** getUserById GET /api/user/get */
export async function getUserByIdUsingGet(
  // 叠加生成的Param类型 (非body参数swagger默认没有生成对象)
  params: API.getUserByIdUsingGETParams,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseUser_>('/api/user/get', {
    method: 'GET',
    params: {
      ...params,
    },
    ...(options || {}),
  });
}

/** getLoginUser GET /api/user/get/login */
export async function getLoginUserUsingGet(options?: { [key: string]: any }) {
  return request<API.BaseResponseLoginUserVO_>('/api/user/get/login', {
    method: 'GET',
    ...(options || {}),
  });
}

/** getUserVOById GET /api/user/get/vo */
export async function getUserVoByIdUsingGet(
  // 叠加生成的Param类型 (非body参数swagger默认没有生成对象)
  params: API.getUserVOByIdUsingGETParams,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseUserVO_>('/api/user/get/vo', {
    method: 'GET',
    params: {
      ...params,
    },
    ...(options || {}),
  });
}

/** listUserByPage POST /api/user/list/page */
export async function listUserByPageUsingPost(
  body: API.UserQueryRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponsePageUser_>('/api/user/list/page', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** listUserVOByPage POST /api/user/list/page/vo */
export async function listUserVoByPageUsingPost(
  body: API.UserQueryRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponsePageUserVO_>('/api/user/list/page/vo', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** userLogin POST /api/user/login */
export async function userLoginUsingPost(
  body: API.UserLoginRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseLoginUserVO_>('/api/user/login', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** userLoginByWxOpen GET /api/user/login/wx_open */
export async function userLoginByWxOpenUsingGet(
  // 叠加生成的Param类型 (非body参数swagger默认没有生成对象)
  params: API.userLoginByWxOpenUsingGETParams,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseLoginUserVO_>('/api/user/login/wx_open', {
    method: 'GET',
    params: {
      ...params,
    },
    ...(options || {}),
  });
}

/** userLogout POST /api/user/logout */
export async function userLogoutUsingPost(options?: { [key: string]: any }) {
  return request<API.BaseResponseBoolean_>('/api/user/logout', {
    method: 'POST',
    ...(options || {}),
  });
}

/** userRegister POST /api/user/register */
export async function userRegisterUsingPost(
  body: API.UserRegisterRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseLong_>('/api/user/register', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** updateUser POST /api/user/update */
export async function updateUserUsingPost(
  body: API.UserUpdateRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseBoolean_>('/api/user/update', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** updateMyUser POST /api/user/update/my */
export async function updateMyUserUsingPost(
  body: API.UserUpdateMyRequest,
  options?: { [key: string]: any },
) {
  return request<API.BaseResponseBoolean_>('/api/user/update/my', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

--- END: src/services/backend/userController.ts ---

--- START: src/services/backend/wxMpController.ts ---
// @ts-ignore
/* eslint-disable */
import { request } from '@umijs/max';

/** check GET /api/ */
export async function checkUsingGet(
  // 叠加生成的Param类型 (非body参数swagger默认没有生成对象)
  params: API.checkUsingGETParams,
  options?: { [key: string]: any },
) {
  return request<string>('/api/', {
    method: 'GET',
    params: {
      ...params,
    },
    ...(options || {}),
  });
}

/** receiveMessage POST /api/ */
export async function receiveMessageUsingPost(options?: { [key: string]: any }) {
  return request<any>('/api/', {
    method: 'POST',
    ...(options || {}),
  });
}

/** setMenu GET /api/setMenu */
export async function setMenuUsingGet(options?: { [key: string]: any }) {
  return request<string>('/api/setMenu', {
    method: 'GET',
    ...(options || {}),
  });
}

--- END: src/services/backend/wxMpController.ts ---

